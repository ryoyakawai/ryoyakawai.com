<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="https://ryoyakawai.com/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ryoyakawai.com/blog/" rel="alternate" type="text/html" /><updated>2020-05-06T17:48:41+09:00</updated><id>https://ryoyakawai.com/blog/</id><title>Delicious Days</title><subtitle>Life is delicious every day.</subtitle><entry><title>ブラウザで動く「交通系カードリーダアプリ」を作ってみた。</title><link href="https://ryoyakawai.com/blog/2020/05/06/nfccardreader.html" rel="alternate" type="text/html" title="ブラウザで動く「交通系カードリーダアプリ」を作ってみた。" /><published>2020-05-06T00:00:00+09:00</published><updated>2020-05-06T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2020/05/06/nfccardreader</id><content type="html" xml:base="https://ryoyakawai.com/blog/2020/05/06/nfccardreader.html">&lt;div&gt; &lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://w3c.github.io/web-nfc/&quot;&gt;Web NFC&lt;/a&gt;を調べてて、実はWebUSBで&lt;a href=&quot;https://bit.ly/35wE8nl&quot;&gt;Sony PaSoRi（パソリ） RC-S380&lt;/a&gt;を読む為の&lt;a href=&quot;https://www.sony.co.jp/Products/felica/business/products/ICS-DCWC1.html&quot;&gt;ドライバ&lt;/a&gt;があることを知り、せっかく見つけたし、スマホ版のリーダはあるけど、ブラウザから読み取れるのは出会ったことがないので作り始めました。&lt;br /&gt;
以下がアプリへのリンクですが、動作には「Sony PaSoRi（パソリ） RC-S380」が必須です。このリーダは公的認証にも使えるものなので、もしかすると最近は持ってる人は少なくないかも？とか思ってます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ryoyakawai.com/apps/nfccardreader/&quot;&gt;交通系カードリーダ （ブラウザ版）&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;a href=&quot;//ryoyakawai.com/apps/nfccardreader/&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2020/05/20200506-nfccardreader-00.png&quot; width=&quot;48%&quot; style=&quot;border-radius:4px; margin-right:2px&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;仕様に関してはSonyさんが多くを公開してくださっていますし、その他はググる、GitHubのスマホアプリのコードを読んだりすることで何とかなりました。&lt;br /&gt;
利用した資料等は以下です。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sony.co.jp/Products/felica/business/tech-support/&quot;&gt;技術情報 - Sony Japan - FeliCa &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/codebutler/farebot&quot;&gt;codebutler/farebot: Read data from public transit cards using your NFC Android phone!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/YasuakiNakazawa/items/3109df682af2a7032f8d&quot;&gt;[PASMO] FeliCa から情報を吸い出してみる - FeliCaの仕様編 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSVエクスポートの機能だったり、他のカード、例えばサンフランシスコ周辺で使わるClipperカードを次に挑戦してみようかなと思ってます。&lt;/p&gt;</content><category term="Web Usb" /><category term="Web" /><summary></summary></entry><entry><title>「自家製チャーシュー ちょっと甘め」のレシピを追加！</title><link href="https://ryoyakawai.com/blog/2019/12/22/roasted-pork.html" rel="alternate" type="text/html" title="「自家製チャーシュー ちょっと甘め」のレシピを追加！" /><published>2019-12-22T00:00:00+09:00</published><updated>2019-12-22T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/12/22/roasted-pork</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/12/22/roasted-pork.html">&lt;div&gt; &lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://cookpad.com/recipe/5959089&quot;&gt;「自家製チャーシュー ちょっと甘め」&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大勝軒の自家製チャーシューの作り方のメモ&lt;a href=&quot;https://cookpad.com/recipe/5211424&quot;&gt;「自家製チャーシューの作り方」&lt;/a&gt;を公開してから1年半くらい。&lt;br /&gt;
美味しいけど、ちょっと醤油辛い、出汁がどうしても余るのが気になってたのを改善してできたメニューです😊&lt;br /&gt;
ちょうどいい出汁の量になって、そのままでも醤油辛くもなく、単独でも美味しく、またご飯の上にのせてチャーシュー丼にしてもいけるチャーシューになりました。
お試しいただけると嬉しいです。つくれぽもおまちしております！&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/12/20191222-roasted-pork-00.jpg&quot; width=&quot;48%&quot; style=&quot;border-radius:4px; margin-right:2px&quot; /&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/12/20191222-roasted-pork-01.jpg&quot; width=&quot;48%&quot; style=&quot;border-radius:4px;&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;自家製チャーシュー-ちょっと甘め&quot;&gt;自家製チャーシュー ちょっと甘め&lt;/h3&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;script src=&quot;https://widgets.cookpad.com/recipes/5959089.js?k=38fc25f2&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/div&gt;</content><category term="Cookpad" /><category term="料理" /><summary></summary></entry><entry><title>Immersive Web Meetupを開催したよ！</title><link href="https://ryoyakawai.com/blog/2019/09/13/immersive-web-meetup.html" rel="alternate" type="text/html" title="Immersive Web Meetupを開催したよ！" /><published>2019-09-13T00:00:00+09:00</published><updated>2019-09-13T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/09/13/immersive-web-meetup</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/09/13/immersive-web-meetup.html">&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;/div&gt;

&lt;p&gt;2019年9月13日（金）にメルカリさんで「Immersive Web Meetup」を開催しました。&lt;br /&gt;
9月16日から1週間の日程でTPAC（W3C年次会議）が福岡であり、せっかくの機会なのでTPACに参加されるついでに東京に立ち寄るW3C関係者の方々をお招きして
コミュニティに向けてお話をしていていただきたい！と想いを込めて企画しました。2015年にTPACが札幌であったときにも&lt;a href=&quot;https://dev.classmethod.jp/event/web-music-developer-meetup-sapporo-report/&quot;&gt;Web Music Developer Meetup@札幌&lt;/a&gt;と題して札幌で開催しています。懐かしいです。&lt;/p&gt;

&lt;h2 id=&quot;展示も行いました&quot;&gt;展示も行いました！&lt;/h2&gt;
&lt;p&gt;映像のXRと音楽のAudio、MIDIという区分で切らず、2つを混ぜ合わせたMeetupにすることで「Immersiveな世界はウェブでも実現できる」をより実感していただくことを意識して展示枠も設けました。そして当日は以下の5つの展示をしていただきました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AR切り絵 - AR Clock Tower, 着せ替え天気予報 by &lt;a href=&quot;https://www.twitter.com/kageori_w&quot; target=&quot;_blank&quot;&gt;@kageori_w&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;webARであそぶ！デジタルファッション by &lt;a href=&quot;https://www.twitter.com/saharu54&quot; target=&quot;_blank&quot;&gt;@saharu54&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Web360Square by &lt;a href=&quot;https://www.twitter.com/AtonKish&quot; target=&quot;_blank&quot;&gt;@AtonKish&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sound Engine for Web Based Novel Game by &lt;a href=&quot;https://www.twitter.com/aike1000&quot; target=&quot;_blank&quot;&gt;@aike1000&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;音に反応して動くMIDIコンバータ by &lt;a href=&quot;https://www.twitter.com/sascacci&quot; target=&quot;_blank&quot;&gt;@sascacci&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Web360Square by &lt;a href=&quot;https://www.twitter.com/AtonKish&quot; target=&quot;_blank&quot;&gt;@AtonKish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Meetupでの展示というのは、個人的には初の試みでしたがやはり対象のAPIが「見て、聞いて」という感じるが主体なこともあり、展示場所周辺は人だかりで盛り上がっていました！&lt;br /&gt;
なのですが、非常に残念ながら写真撮影を失念、、、、という大失態。写真でのご紹介ができなくて非常に残念です・・・ごめんなさい。&lt;/p&gt;

&lt;h2 id=&quot;talk-session&quot;&gt;Talk Session&lt;/h2&gt;
&lt;p&gt;お話をしてくださったのは、&lt;a href=&quot;https://twitter.com/hochsays&quot;&gt;Hongchan Choi&lt;/a&gt;、&lt;a href=&quot;https://twitter.com/cwilso&quot;&gt;Chris Wilson&lt;/a&gt;、それから&lt;a href=&quot;https://twitter.com/Mxcn3&quot;&gt;羽賀 流登&lt;/a&gt;さんの3名です。&lt;/p&gt;

&lt;h3 id=&quot;9-years-of-web-audio---hongchan-choi&quot;&gt;「9 Years of Web Audio」 - Hongchan Choi&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1dlZ3ThCDsYqv6QEuDi07tkK0KC3D3IxfNY4uhHa2KPc/&quot;&gt;（スライドはこちら）&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot; style=&quot;display:flex;flex-direction:row;align-items:flex-start; margin-bottom:0&quot;&gt;
&lt;div&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_01.png&quot; width=&quot;180px&quot; style=&quot;margin-top:10px&quot; /&gt;
&lt;/div&gt;
&lt;div style=&quot;margin-left: 20px; width:80%&quot;&gt;
Web Audioが最初に実装された2010年から今までの経緯、そしてこれから議論が始まる &lt;b&gt;Audio Device Client&lt;/b&gt; の紹介と続きました。  
英語ではありますが、スライドにコメントが完璧に書かれているので、詳細はそちらで！
  
身近で見ていたこともあり、自分自身は、現在に至る歴史、W3Cでのプロセスに関する内容を改めて振り返ると、標準化の難しさ、大変さを改めて感じました。
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;webxr-ar-and-vr-on-the-web---chris-wilson&quot;&gt;「WebXR: AR and VR on the Web」 - Chris Wilson&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1ukRQLp1H_gl7NMB5UZR8JMtH-qlcy37-lyNeXtGjyhE/&quot;&gt;（スライドはこちら）&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot; style=&quot;display:flex;flex-direction:row;align-items:flex-start; margin-bottom:0&quot;&gt;
&lt;div&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_02.png&quot; width=&quot;180px&quot; style=&quot;margin-top:10px&quot; /&gt;
&lt;/div&gt;
&lt;div style=&quot;margin-left: 20px; width:80%&quot;&gt;
WebXRのキーとなるピース、そしてウェブでのVR、ARの状況（実装方法も含む）、そしてW3CのでのVR、ARを扱うImmersive Web WGの状況、
そして最後に音がImmersiveを広める大きなキー技術になる。そしてWeb Audioはすでに3Dオーディオが実装されていて、
WebXRを簡単に実装できるThree.jsやA Frame経由でも利用できることが紹介されました。  
  
3Dオーディオも含めて、Three.jsやA Frame経由で手軽に実装できるという点はサクッと作るときにはホントに便利だと感じます。今後、事例が増えることに期待しています。
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;playcanvasで始めるwebxr---羽賀-流登&quot;&gt;「PlayCanvasで始めるWebXR」 - 羽賀 流登&lt;/h3&gt;
&lt;div class=&quot;post-image-center&quot; style=&quot;display:flex;flex-direction:row;align-items:flex-start; margin-bottom:0&quot;&gt;
&lt;div&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_03.png&quot; width=&quot;180px&quot; style=&quot;margin-top:10px&quot; /&gt;
&lt;/div&gt;
&lt;div style=&quot;margin-left: 20px; width:80%&quot;&gt;
WebXRやるならPlayCanvasががとても良い、というお話。実例、またそのデモも含めた内容でした。  
  
第三者が体験しているVRな世界を、各自がもっている端末のブラウザを通して皆で同時に共有して眺めるシステムが非常に印象的で、ここまでできるのか？！とビックリしました。
&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;おわりに&quot;&gt;おわりに&lt;/h1&gt;
&lt;p&gt;Web Audio、WebXRの両面からのTalk Session、また展示を行うことで「Immersiveな世界はウェブでも実現できる」ことに対して更なる可能性を最も感じていたのは自分自身だったのかもしれません。参加いただいたみなさんも、そうであると嬉しいです。そして自分自身は「ウェブはいい」というのを改めて認識することになりました。&lt;br /&gt;
Meetup全体に関しては、WebXRとWebAudio(Music)が一緒にMeetupを行い、展示枠も設けるという初の試みばかりでどうなるのかという心配はありましたが、結果的には「見て、聞いて、感じてもらう」ことが実現できたと感じていてホッとしております。&lt;br /&gt;
こういったクロス・コミュニティでMeetupを行い、未来を感じる、というのはホントによいですね！！また機会がありましたら検討したいと思っています。&lt;/p&gt;

&lt;p&gt;最後になりましたが、今回会場をご提供いただきましたメルカリさん、そして軽食のスポンサーをしていただきましたGoogleさんには心から感謝申し上げます。ありがとうございました。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot; style=&quot;display:flex;flex-direction:row;align-items:flex-start;margin-bottom:0&quot;&gt;
  &lt;div style=&quot;display:flex;flex-direction:column;align-items:flex-start;width:45%;text-align:center&quot;&gt;
    &lt;div&gt;&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_chris_hongchan.jpg&quot; style=&quot;margin-bottom:0px&quot; /&gt;&lt;/div&gt;
    &lt;div&gt;左2人目から、Hongchan、Chris、えーじさん&lt;/div&gt;
  &lt;/div&gt;
  &lt;div style=&quot;width:45%;margin-left:10px&quot;&gt;
    &lt;div&gt;&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_haga.jpg&quot; style=&quot;margin-bottom:0px&quot; /&gt;&lt;/div&gt;
    &lt;div&gt;羽賀さん&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;post-image-center&quot; style=&quot;display:flex;flex-direction:row;align-items:flex-start;margin-bottom:0&quot;&gt;
  &lt;div style=&quot;display:flex;flex-direction:column;align-items:flex-start;width:45%;text-align:center&quot;&gt;
    &lt;div&gt;&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_ikkou_manpuku.jpg&quot; style=&quot;margin-bottom:0px&quot; /&gt;&lt;/div&gt;
    &lt;div&gt;&lt;a href=&quot;https://www.twitter.com/ikkou&quot; target=&quot;_blank&quot;&gt;WebXRの@ikkouさん&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div style=&quot;float:none;width:45%;margin-left:10px&quot;&gt;
    &lt;div&gt;&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_musubi.jpg&quot; style=&quot;margin-bottom:0px&quot; /&gt;&lt;/div&gt;
    &lt;div style=&quot;margin:auto&quot;&gt;オススメの&lt;a href=&quot;http://www.manpukumusubi.com/&quot; target=&quot;_blank&quot;&gt;「まんぷくにぎり」のおむすび&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;post-image-center&quot; style=&quot;display:flex;flex-direction:row;align-items:flex-start;margin-bottom:0&quot;&gt;
  &lt;div style=&quot;display:flex;flex-direction:column;align-items:flex-start;width:60%;text-align:center&quot;&gt;
  &lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The receptionists at yesterday&amp;#39;s event were famous people &lt;a href=&quot;https://twitter.com/sisidovski?ref_src=twsrc%5Etfw&quot;&gt;@sisidovski&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/kosamari?ref_src=twsrc%5Etfw&quot;&gt;@kosamari&lt;/a&gt; &lt;a href=&quot;https://t.co/AzVL3d6nEL&quot;&gt;pic.twitter.com/AzVL3d6nEL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Eiji Kitamura / えーじ (@agektmr) &lt;a href=&quot;https://twitter.com/agektmr/status/1172862027162800128?ref_src=twsrc%5Etfw&quot;&gt;September 14, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
  &lt;div&gt;豪華受付の方々！ありがとうございました！&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</content><category term="Web Music" /><category term="WebXR" /><category term="Meetup" /><summary></summary></entry><entry><title>パンダエクスプレスのChow Mein（中華風焼きそば）風なレシピを追加！</title><link href="https://ryoyakawai.com/blog/2019/08/04/pandaex-chowmein.html" rel="alternate" type="text/html" title="パンダエクスプレスのChow Mein（中華風焼きそば）風なレシピを追加！" /><published>2019-08-04T00:00:00+09:00</published><updated>2019-08-04T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/08/04/pandaex-chowmein</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/08/04/pandaex-chowmein.html">&lt;div&gt; &lt;/div&gt;

&lt;p&gt;やっと追加のみんな大好きパンダエクスプレスの「&lt;a href=&quot;https://cookpad.com/recipe/5771364&quot;&gt;Chow Mein、やきそば、チョーメン&lt;/a&gt;」！！&lt;br /&gt;
自分で言うのもアレですが、パンダのそれよりも少し上品な味になってるかも😅&lt;br /&gt;
BBQとか定番の「ソース焼きそば」に飽きたら是非！我が家も「焼きそば」は「ソース」だったのが、幅が広がりました！&lt;br /&gt;
（本家パンダエクスプレスの&lt;a href=&quot;https://www.pandaexpress.com/menu/sides/chow-mein&quot;&gt;Chow Meinはこちら&lt;/a&gt;）&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/08/20190804-chowmein_00.jpg&quot; width=&quot;90%&quot; style=&quot;border-radius:4px;&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;焼きそば-chowmein-チョーメン&quot;&gt;焼きそば-ChowMein-チョーメン&lt;/h3&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;script src=&quot;https://widgets.cookpad.com/recipes/5771364.js?k=fcd0a8a9&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/div&gt;</content><category term="Cookpad" /><category term="料理" /><category term="パンダエクスプレス" /><summary></summary></entry><entry><title>AndroidアプリをBitriseでCIする。</title><link href="https://ryoyakawai.com/blog/2019/07/25/ci-android-bitrise-00.html" rel="alternate" type="text/html" title="AndroidアプリをBitriseでCIする。" /><published>2019-07-25T00:00:00+09:00</published><updated>2019-07-25T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/07/25/ci-android-bitrise-00</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/07/25/ci-android-bitrise-00.html">&lt;h2 id=&quot;これは何&quot;&gt;これは何？&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」のCircleCIをBitriseに変更した時のメモです。&lt;br /&gt;
Bitriseの設定のみを書いていこうと思いますので、詳細は「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」を御覧ください。&lt;/p&gt;

&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;
&lt;h3 id=&quot;bitrise&quot;&gt;Bitrise&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://go.bitrise.io/bitrise-japan&quot;&gt;Bitrise&lt;/a&gt;はCircleCIと同じ種類のクラウド型のCIサービスです。
ロンドンと&lt;a href=&quot;https://goo.gl/maps/Yi3Q5G6hDY6qgyAK8&quot;&gt;ブダペスト（ハンガリー）&lt;/a&gt;にオフィスを持っています。シリコンバレーじゃないのが新鮮でした。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;できること&quot;&gt;できること&lt;/h4&gt;
&lt;p&gt;BitriseはiOS、Android、Swift、React Nativeをビルド、テスト、デプロイすることが可能です。本記事では、Androidのビルド、テストをみていきます。&lt;/p&gt;

&lt;h4 id=&quot;価格&quot;&gt;価格&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bitrise.io/pricing/teams&quot;&gt;詳しいテーブルはこちら&lt;/a&gt;です。小さな組織向けとエンタープライズ向けが用意されてます。
小さな組織向けの1部はこんな感です。（2019年7月現在）&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hobby（無料）：複数同時ビルドは不可、ビルド時間は10分、月に200回ビルドまで、使えるのは標準マシーン、追加可能なメンバーは2名&lt;/li&gt;
  &lt;li&gt;Developer（$36/mo）：複数同時ビルドは不可、ビルド時間は45分、ビルド回数は無制限、使えるのは標準マシーン、メンバーの無制限追加可能&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;さっそく使ってみる&quot;&gt;さっそく使ってみる&lt;/h2&gt;
&lt;p&gt;GitHubとBitriseのアカウントが必須ですのでご用意してください。&lt;br /&gt;
この記事では&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/&quot;&gt;このリポジトリのコード&lt;/a&gt;をサンプルとして使いますので、
ForkもしくはCloneしてリポジトリに追加しておいてください。&lt;br /&gt;
それでは追加していきます。&lt;/p&gt;

&lt;h3 id=&quot;アプリを追加する&quot;&gt;アプリを追加する&lt;/h3&gt;
&lt;p&gt;下右図のように、ターゲットになるリポジトリを指定してアプリを追加します。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_00.png&quot; width=&quot;48%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee; margin-right: 5px&quot; /&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_01.png&quot; width=&quot;48%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;workflowの設定画面を表示する&quot;&gt;Workflowの設定画面を表示する&lt;/h3&gt;
&lt;p&gt;アプリの追加が完了すると同時にビルドを走らせてくれます。&lt;br /&gt;
が、取り急ぎWorkflowの設定画面を開いてしまいます。プロジェクト名をクリック（下図(1)）して
次にWorkflowのタブをクリック（下図(2)）して表示します。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_workflow00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;タスクを追加する&quot;&gt;タスクを追加する&lt;/h3&gt;
&lt;p&gt;アプリを追加した状態ではUIテストは追加されませんので、UIテストされるように設定する必要があります。
追加するタスクは以下の2つです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gradle Runner&lt;/li&gt;
  &lt;li&gt;[BETA] Virtual Device Testing for Android&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;赤四角の中の2つを追加する。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190725_bitrise_addtask00.png&quot; width=&quot;30%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;-gradle-runnerの追加&quot;&gt;＞ Gradle Runnerの追加&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Android Unit Test&lt;/strong&gt; のアイコンの直下にある「＋」ボタン（下図（1））をクリックして、「Gradle Runner」で検索すると絞込まれて表示されますので
クリックして追加します。（下図(2)）&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_gradlerunner00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;追加すると設定画面が表示されますので以下の2つの四角を変更します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gradle task to run&lt;/strong&gt; ： &lt;code class=&quot;highlighter-rouge&quot;&gt;assembleDebug assembleDebugAndroidTest&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;gradlew file path&lt;/strong&gt; ： &lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_gradlerunner01.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;-beta-virtual-device-testing-for-androidの追加&quot;&gt;＞ [BETA] Virtual Device Testing for Androidの追加&lt;/h4&gt;
&lt;p&gt;先程追加した&lt;strong&gt;Gradle Runner&lt;/strong&gt; の次に追加しますので、直下にある「＋」ボタン（下図（1））をクリックして、「[BETA] Virtual」で検索します。すると絞込まれて表示されますので
クリックして追加します。（下図(2)）&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_virtualdevice00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;追加すると設定画面が表示されますので以下の2つの四角を変更します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Test devices&lt;/strong&gt; ： &lt;code class=&quot;highlighter-rouge&quot;&gt;Pixel2,28,en,portrait&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test type&lt;/strong&gt; ： &lt;code class=&quot;highlighter-rouge&quot;&gt;instrumentation&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_virtualdevice01.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;なお、&lt;strong&gt;Test devices&lt;/strong&gt; はサンプルアプリに &lt;code class=&quot;highlighter-rouge&quot;&gt;minSdkVersion 26&lt;/code&gt; と指定しているので26以上に設定しています。&lt;br /&gt;
また、先程変更した &lt;strong&gt;Gradle Runner&lt;/strong&gt; の &lt;strong&gt;Gradle task to run&lt;/strong&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;assembleDebug assembleDebugAndroidTest&lt;/code&gt; がデフォルトの &lt;code class=&quot;highlighter-rouge&quot;&gt;assemble&lt;/code&gt; のままになっていると
テスト用のAPK(&lt;code class=&quot;highlighter-rouge&quot;&gt;app-debug-androidTest.apk&lt;/code&gt;)が作成されず、&lt;strong&gt;API path&lt;/strong&gt; で使う環境変数の &lt;strong&gt;$BITRISE_APK_PATH&lt;/strong&gt; に &lt;code class=&quot;highlighter-rouge&quot;&gt;app-release-unsigned.apk&lt;/code&gt;等に指定あれてしまい
&lt;strong&gt;[BETA] Virtual Device Testing for Android&lt;/strong&gt; が動作できずエラーになりますので、確実に変更するようにしてください。&lt;/p&gt;

&lt;p&gt;ちなみに、この &lt;strong&gt;[BETA] Virtual Device Testing for Android&lt;/strong&gt; は「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/16/ci-android-firebase-00.html&quot;&gt;Firebase Test LabでUI Testを実行する&lt;/a&gt;」
でも紹介しているのと同じくGCPコマンドから &lt;a href=&quot;https://console.cloud.google.com/marketplace/details/google/testing.googleapis.com&quot;&gt;Cloud Testing API(Firebase Test Lab)&lt;/a&gt; をラップして使っているようです。&lt;/p&gt;

&lt;h3 id=&quot;実行する&quot;&gt;実行する&lt;/h3&gt;
&lt;p&gt;以上でUI Testまで実行できるようになったはずなので画面内にある &lt;strong&gt;[Start/Schedule a Build]&lt;/strong&gt; ボタンをクリックしてビルドを実行します。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_start_button00.png&quot; width=&quot;30%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;ガガっとリポジトリを読んで、設定作ってくれるところは楽チンでよかったですが、
&lt;strong&gt;Gradle Runner&lt;/strong&gt; の &lt;strong&gt;Gradle task to run&lt;/strong&gt;  環境変数 &lt;strong&gt;$BITRISE_APK_PATH&lt;/strong&gt; の設定で
ハマりました。Firebase Test Labからのエラーメッセージ見られると良いかもな〜、と感じています。&lt;/p&gt;

&lt;h4 id=&quot;今回のbitriseyml&quot;&gt;今回の&lt;code class=&quot;highlighter-rouge&quot;&gt;bitrise.yml&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;今回できあがった &lt;code class=&quot;highlighter-rouge&quot;&gt;bitrise.yml&lt;/code&gt; もココに貼っておきます。参考になれば幸いです。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;format_version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8&#39;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;default_step_lib_source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/bitrise-io/bitrise-steplib.git&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;project_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;trigger_map&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;push_branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;workflow&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;primary&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pull_request_source_branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;workflow&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;primary&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;workflows&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;activate-ssh-key@4.0.3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;run_if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git-clone@4.0.14&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cache-pull@2.0.1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;script@1.1.5&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Do anything with Script step&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;install-missing-android-tools@2.3.5&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gradlew_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION/gradlew&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;change-android-versioncode-and-versionname@1.1.1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build_gradle_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION/$MODULE/build.gradle&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android-lint@0.9.6&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;project_location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$MODULE&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$VARIANT&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android-unit-test@0.11.1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;project_location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$MODULE&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$VARIANT&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android-build@0.10.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;project_location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$MODULE&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$VARIANT&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sign-apk@1.3.1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;run_if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy-to-bitrise-io@1.6.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cache-push@2.2.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;activate-ssh-key@4.0.3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;run_if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git-clone@4.0.14&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cache-pull@2.0.1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;script@1.1.5&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Do anything with Script step&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;install-missing-android-tools@2.3.5&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gradlew_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION/gradlew&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android-lint@0.9.6&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;project_location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$MODULE&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$VARIANT&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android-unit-test@0.11.1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;project_location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$MODULE&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$VARIANT&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gradle-runner@1.9.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gradlew_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./gradlew&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gradle_task&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;assembleDebug assembleDebugAndroidTest&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;virtual-device-testing-for-android@1.0.5&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;instrumentation&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test_devices&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pixel2,28,en,portrait&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy-to-bitrise-io@1.6.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cache-push@2.2.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;envs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;is_expand&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;PROJECT_LOCATION&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;is_expand&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;MODULE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;is_expand&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;VARIANT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><category term="Android" /><category term="Espresso" /><category term="Bitrise" /><category term="Firebase Test Lab" /><summary>これは何？
「AndroidアプリをCircleCIでCIする。」のCircleCIをBitriseに変更した時のメモです。
Bitriseの設定のみを書いていこうと思いますので、詳細は「AndroidアプリをCircleCIでCIする。」を御覧ください。</summary></entry><entry><title>Espresso, UI AutomatorでAndroidのUI Testを書く</title><link href="https://ryoyakawai.com/blog/2019/07/18/ci-android-espresso-00.html" rel="alternate" type="text/html" title="Espresso, UI AutomatorでAndroidのUI Testを書く" /><published>2019-07-18T00:00:00+09:00</published><updated>2019-07-18T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/07/18/ci-android-espresso-00</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/07/18/ci-android-espresso-00.html">&lt;h2 id=&quot;これは何&quot;&gt;これは何？&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」のUI Testの書き方について説明した記事です。
具体的には&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android&quot;&gt;サンプルアプリ&lt;/a&gt;の&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/MainActivityInstrumentedTest.kt&quot;&gt;UI Testであるこれ&lt;/a&gt;の説明です。&lt;/p&gt;

&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;
&lt;h3 id=&quot;androidでui-testを書く&quot;&gt;AndroidでUI Testを書く&lt;/h3&gt;
&lt;p&gt;Androidが公式にサポートしているUI Testのツールは &lt;a href=&quot;https://developer.android.com/training/testing/espresso&quot;&gt;Espresso&lt;/a&gt;、
&lt;a href=&quot;https://developer.android.com/training/testing/ui-automator&quot;&gt;UI Automator&lt;/a&gt; の2種類あります。
それぞれ以下の特徴がありますので「どちらを使うか？」については「どちらも併用して使う」のがいいように感じています。&lt;/p&gt;

&lt;h4 id=&quot;espresso&quot;&gt;Espresso&lt;/h4&gt;
&lt;p&gt;「to write concise, beautiful, and reliable Android UI tests」と公式サイトには説明されています。特定のアプリのUIに対してのスクリプトで動作をさせることを可能にするテストフレームワークです。単一のアプリの操作を自動化する場合に使うとよいでしょう。Google社が開発していますので、Anroidの公式のテストツールと言ってよいでしょう。&lt;br /&gt;
サンプルアプリではアプリの操作のすべてをEspressoで書いています。&lt;/p&gt;

&lt;h4 id=&quot;ui-automator&quot;&gt;UI Automator&lt;/h4&gt;
&lt;p&gt;「suitable for cross-app functional UI testing across system and installed apps.」と公式サイトに説明されている通りで、Espressoと比べると、よりAndroidのOSに近い側に位置しているテストフレームワークで、複数アプリを行き来するよう動作をスクリプトで定義することの可能です。Espressoとは違い、複数のアプリの操作を自動化する場合に使うとよいでしょう。こちらもEspressoと同じくGoogle社が開発していますので、Anroidの公式のテストツールと言ってよいでしょう。&lt;br /&gt;
サンプルアプリではスクリーンショットの撮影、Permissionリクエストのウィンドウの操作の2つをUI Automatorで書いています。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-uitesttool_00.png&quot; width=&quot;50%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;espressoui-automatorでtestを書く準備をする&quot;&gt;Espresso、UI AutomatorでTestを書く準備をする&lt;/h3&gt;
&lt;p&gt;以下の2つのファイルに追加して準備完了です。&lt;/p&gt;

&lt;h4 id=&quot;-buildgradle-に以下を追加&quot;&gt;＞ &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; に以下を追加&lt;/h4&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;allprojects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matching&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testLogging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;passed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;skipped&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;-appbuildgradle-に以下を追加&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;＞ app/build.gradle&lt;/code&gt; に以下を追加&lt;/h4&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// for connected Android test
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;androidTestUtil&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orchestrator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;androidTestImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;androidTestImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;espresso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;espresso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;androidTestImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;espresso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;espresso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;androidTestImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiautomator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiautomator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;androidTestImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;androidTestImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4.12&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;テストを書く&quot;&gt;テストを書く&lt;/h3&gt;
&lt;p&gt;テストは&lt;code class=&quot;highlighter-rouge&quot;&gt;app/src/androidTest/[Package名]&lt;/code&gt;以下に書いていきます。&lt;br /&gt;
今回のパッケージ名は &lt;code class=&quot;highlighter-rouge&quot;&gt;com.example.uitestsample&lt;/code&gt; 
ですので &lt;a href=&quot;app/src/androidTest/java/com/example/uitestsample/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/src/androidTest/java/com/example/uitestsample/&lt;/code&gt;&lt;/a&gt;
以下にコードを書いていきます。&lt;br /&gt;
ファイル作成の粒度はActivity毎、Fragment毎、機能毎等、自由にまとめてしまって問題ありません。
サンプルアプリではActivity毎でまとめて&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/MainActivityInstrumentedTest.kt&quot;&gt;MainActivityInstrumentedTest.kt&lt;/a&gt;に書いています。&lt;/p&gt;

&lt;h4 id=&quot;前準備&quot;&gt;前準備&lt;/h4&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidJUnit4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;@SdkSuppress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;@LargeTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivityInstrumentedTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;_packageName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.example.uitestsample&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UiTestUtils&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UiTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ^^^ ツールをインスタンス化 ^^^
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;@Rule&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;@JvmField&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mActivityTestRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActivityTestRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ActivityTestRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Rule&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;@JvmField&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;cGrantPermissionRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GrantPermissionRule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GrantPermissionRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Manifest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WRITE_EXTERNAL_STORAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ^^^ スクリーンショット保存の為にSTORAGEへのアクセスを強制的に許可 ^^^
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;@Rule&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;@JvmField&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;screenshotRule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScreenshotTakingRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ^^^ Test失敗時をスクリーンショットを撮影するように指定 ^^^
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mActivityTestRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@After&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;teardown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;「Test失敗時をスクリーンショット」の動作は &lt;code class=&quot;highlighter-rouge&quot;&gt;uitestutils/UiTestUtils.kt&lt;/code&gt; の最後に定義されています。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ScreenshotTakingRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UiTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestWatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mUTs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenShot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FAIL-$description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt; !!! TEST FAILED !!! &amp;lt;&amp;lt;&amp;lt; ScreenShot Taken method=[$description] filename=[$path]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;テストケース&quot;&gt;テストケース&lt;/h4&gt;
&lt;p&gt;サンプルアプリではテストケースは以下の3つです。
「ケースとして足りない！」とかツッコミはありかもしれませんが、UI Testを動かすことを目的としていますのでご容赦ください。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;useAppContext()&lt;/code&gt;：テストしているアプリのパッケージ名を確認&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;checkTextHelloWorld()&lt;/code&gt;：アプリ起動時、中心の「Hello World!」の表示を確認&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;checkButtonIncrementFloating()&lt;/code&gt;：画面右下のボタンをタップすると表示している数字がカウントアップしSnackbarが表示され、またメニューからResetするとゼロになることを確認&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;checkButtonIncrementFloating()&lt;/code&gt; のポイントをインラインで説明します。&lt;br /&gt;
&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/MainActivityInstrumentedTest.kt&quot;&gt;Testのコード全体はこちら&lt;/a&gt;になりますので合わせて御覧ください。&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkButtonIncrementFloating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// false にすることでTestが成功した場合でもスクリーンショットを残せます。
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// デフォルトでは、Testが成功するとスクリーンショットは全削除となります。
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepareScreenShot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;willTap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 右下の赤色のFabを指定
&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;incrementButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment_fab_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// カウンターを増加させて表示が想定通りであるか確認する
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;willTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// スクリーンショットを撮影
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenShot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BEFORE &amp;gt;&amp;gt;&amp;gt; カウンター：インクリメント IDX=[$i]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 指定した赤色のFabをタップ
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;onView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incrementButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Permissionリクエストが出てたら許可（このテスト中は出ないはず）
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowPermissionsIfNeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// スクリーンショットを撮影
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenShot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AFTER &amp;gt;&amp;gt;&amp;gt; カウンター：インクリメント IDX=[$i]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 要素内の文字列を取得
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;actualCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main_content_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ログを残す
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[Counter SEQ] 🍏🍎 expected=[$i] actual=[$actualCount]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 文字列をAssert
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[Counter SEQ] 🍏🍎&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Snackbarの文言チェック
&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;snackBarTapped&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snackbar_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tapped $i times.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Snackbarがから消えるのを待つ
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;waitForSnackbarDisappear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snackBarTapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Sleepする
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SHR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// this.mUTs.prepareScreenShot() に false をセットしていなければ
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// スクリーンショットを削除する（）
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removeSuccessScreenShots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;idが指定されていないエレメントの指定方法&quot;&gt;IDが指定されていないエレメントの指定方法&lt;/h3&gt;
&lt;p&gt;エレメントに対してIDが振られている場合は大抵の場合そのIDを使うことで指定することが可能ですが、
指定されていない場合は &lt;strong&gt;Layout Inspector&lt;/strong&gt; （&lt;a href=&quot;https://developer.android.com/studio/debug/layout-inspector&quot;&gt;公式ドキュメント&lt;/a&gt;）で階層構造を取得
して解析をしてから、以下のように指定を行います。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190718-layoutinspector-00.png&quot; width=&quot;90%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Fragmentの重なり方が操作によって変化する場合があり、表示は同じでも階層が違う場合が多々発生します。
ですので、Layout Inspectorで階層構造を取得するときはUI Testでのシナリオ通りに一度画面を遷移させて、それから取得すると良いでしょう。&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;iOS標準のUI Testツールである&lt;a href=&quot;https://developer.apple.com/documentation/xctest&quot;&gt;XCTest&lt;/a&gt;に比べると
癖が少し強いです。とっつきにくいところもありますが、そこまで難しくはないので気になっている場合は挑戦してみてください。&lt;br /&gt;
自分の作ったアプリが自動で動くのを見るのも楽しいと思います。&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/testing/espresso&quot;&gt;Espresso -  Android Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/testing/ui-automator&quot;&gt;UI Automator - Android Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Android" /><category term="UI Test" /><category term="Espresso" /><category term="UI Automator" /><summary>これは何？
「AndroidアプリをCircleCIでCIする。」のUI Testの書き方について説明した記事です。
具体的にはサンプルアプリのUI Testであるこれの説明です。</summary></entry><entry><title>Firebase Test LabでUI Testを実行する</title><link href="https://ryoyakawai.com/blog/2019/07/16/ci-android-firebase-00.html" rel="alternate" type="text/html" title="Firebase Test LabでUI Testを実行する" /><published>2019-07-16T00:00:00+09:00</published><updated>2019-07-16T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/07/16/ci-android-firebase-00</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/07/16/ci-android-firebase-00.html">&lt;h2 id=&quot;これは何&quot;&gt;これは何？&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」のUI TestをCircleCIから実行する方法について説明した記事です。
&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android&quot;&gt;サンプルアプリ&lt;/a&gt;のUI Testを走らせるFirebase Test Lab（UI Testを実行するインフラ）について解説していきます。&lt;/p&gt;

&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;
&lt;h3 id=&quot;ciの流れでui-testが実行されている箇所&quot;&gt;Ciの流れでUI Testが実行されている箇所&lt;/h3&gt;
&lt;p&gt;「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」のCIの流れでは &lt;strong&gt;(3) UI Test&lt;/strong&gt; でUI Testを実行、
&lt;strong&gt;(4) Report&lt;/strong&gt; でレポートアップロードしています。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-circleci_firebase_00.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;ここで使うコードは以下の通りです。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/tree/master/app/src/test/java/com/example/uitestsample&quot;&gt;サンプルアプリのリポジトリ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;UI Testのスクリプト：&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/MainActivityInstrumentedTest.kt&quot;&gt;MainActivityInstrumentedTest.kt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ポイント条件など&quot;&gt;ポイント、条件など&lt;/h3&gt;
&lt;p&gt;CIで使うCircleCIは2.0からAndroidのエミュレータを動かすことができなくなったことから、
CircleCI単体でのUI Testの実行が不可能になりました。（&lt;a href=&quot;https://support.circleci.com/hc/en-us/articles/360000028928-Testing-with-Android-emulator-on-CircleCI-2-0&quot;&gt;公式ドキュメント&lt;/a&gt;）
ですので、UI Testを含めるとすると、AndroidアプリのCIは外部サービスを利用することが必須となっています。&lt;/p&gt;

&lt;p&gt;今回は&lt;a href=&quot;https://support.circleci.com/hc/en-us/articles/360000028928-Testing-with-Android-emulator-on-CircleCI-2-0&quot;&gt;公式ドキュメント&lt;/a&gt;にオススメされている
Firebase Test Labを使うことにしました。&lt;/p&gt;

&lt;h3 id=&quot;firebase-test-labとは&quot;&gt;Firebase Test Labとは&lt;/h3&gt;
&lt;p&gt;Firebase Test LabはFirebaseがのサービスの1つとして提供しているクラウドでUI Testを行うプラットフォームです。Android(Espresso、UI Automator)、iOS(XCTest)で書かれたテストの実行に対応しています。&lt;/p&gt;

&lt;p&gt;（詳しくは「AndroidアプリをCircleCIでCIする。」の&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html#aboutfirebasetestlab&quot;&gt;Firebase Test Labとは&lt;/a&gt;を御覧ください。）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://firebase.google.com/docs/test-lab&quot;&gt;公式ドキュメントはこちら&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;それではアカウント等の準備を説明します。&lt;/p&gt;

&lt;h4 id=&quot;料金体系2019年7月現在&quot;&gt;料金体系（2019年7月現在）&lt;/h4&gt;
&lt;p&gt;料金は無料枠が、物理デバイスでのテスト実行5回まで、Virtual（仮想）デバイスでのテスト実行10回まで。&lt;br /&gt;
無料枠を超えると、物理デバイス1台1時間$5、Virtual（仮想）デバイス1台1時間$1となります。
また、テスト実行時間の上限もあり、物理デバイスが30分、Virtual（仮想）デバイスが60分と決められていますので、
Firebase Test Labでテストを実行する場合はそこに収まるようにテストケースを考えましょう。&lt;br /&gt;
この時間はデフォルトでは物理デバイスもVirtual（仮想）デバイスも同じく15分で設定されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://firebase.google.com/pricing&quot;&gt;詳細はここのTest Lab&lt;/a&gt;の項目を御覧ください。&lt;/p&gt;

&lt;h4 id=&quot;-firebaseのアカウントの準備&quot;&gt;＞ Firebaseのアカウントの準備&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://console.firebase.google.com&quot;&gt;console.firebase.google.com&lt;/a&gt;からアカウントを作成します。&lt;/p&gt;

&lt;h3 id=&quot;-gcpのアカウントとプロジェクトを準備&quot;&gt;＞ GCPのアカウントとプロジェクトを準備&lt;/h3&gt;
&lt;p&gt;Circle CIからは gcloud コマンドを使って Firebase Test Lab 実行するので、GCPのアカウントも必須となります。
またプロジェクトの必要となりますので作成していきます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.cloud.google.com&quot;&gt;console.firebase.google.com&lt;/a&gt; からGCPのアカウントを作成&lt;/li&gt;
  &lt;li&gt;GCPの &lt;a href=&quot;https://console.cloud.google.com/projectcreate&quot;&gt;新規プロジェクトを作成する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;引き続きGCPで &lt;a href=&quot;https://console.cloud.google.com/marketplace/details/google/testing.googleapis.com&quot;&gt;Cloud Testing API&lt;/a&gt;と&lt;a href=&quot;https://console.cloud.google.com/marketplace/details/google/toolresults.googleapis.com&quot;&gt;Cloud Tool Results API&lt;/a&gt; を有効にする（下図左：画面上部でプロジェクトの選択を忘れずに！）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.cloud.google.com&quot;&gt;console.firebase.google.com&lt;/a&gt; に戻りGCPのプロジェクトとリンクする。画像内の(1)からプロジェクトを選択する。（下図右）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190717-gcp-activateapi-00.png&quot; width=&quot;47%&quot; style=&quot;margin-right:15px;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190717-firebase-linkproject-00.png&quot; width=&quot;47%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;続いて、gcloud コマンドは&lt;a href=&quot;https://cloud.google.com/sdk/downloads&quot;&gt;この公式ドキュメント&lt;/a&gt;の通りインストールを行ってください。&lt;br /&gt;
最後にAndroidのBuild環境をセットアップしてください。&lt;a href=&quot;https://developer.android.com/studio/install&quot;&gt;Android Studioをインストール&lt;/a&gt;するのがよいと思います。&lt;/p&gt;

&lt;h3 id=&quot;-コマンドから動かしてみる&quot;&gt;＞ コマンドから動かしてみる&lt;/h3&gt;

&lt;p&gt;まずは、ターゲットのプロジェクトを指定を行います。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# コマンドラインでGCPにログイン&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud auth;

&lt;span class=&quot;c&quot;&gt;# 設定可能なプロジェクトをリストする&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud projects list;
PROJECT_ID                 NAME                   PROJECT_NUMBER
my-test-project-00-2xxxx5  My-Test-Project-00     6xxxx4xxxxx6

&lt;span class=&quot;c&quot;&gt;# 「my-test-project-00-24690」をプロジェクトとして指定する&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;project my-test-project-00-2xxxx5;

&lt;span class=&quot;c&quot;&gt;# 設定内容を確認する(account, projectが指定した内容であるか確認)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud config list;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;compute]
region &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; us-central1
zone &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; us-central1-c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;core]
account &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; xxxxx.xxxx.xxxx.xxxx@example.com
disable_usage_reporting &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; True
project &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; my-test-project-00-2xxxx5

Your active configuration is: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;default]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;-ローカルで動作させてみる&quot;&gt;＞ ローカルで動作させてみる&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# コードをCloneする&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/ryoyakawai/uitest_sample_android.git;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;uitest_sample_android/;

&lt;span class=&quot;c&quot;&gt;# Build&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Emulatorが動作していない場合エラーとなりますが、以下の2つが生成されていればOKです。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - app/build/outputs/apk/debug/app-debug.apk&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./gradlew connectedAndroidTest;

&lt;span class=&quot;c&quot;&gt;# 環境変数を指定する&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOOGLE_PROJECT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-test-project-00-2xxxx5&quot;&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BK_OBJ_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOOGLE_PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/uitest-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s2&quot;&gt;&quot;+%Y%m%d_%H%M&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;;

&lt;span class=&quot;c&quot;&gt;# コマンドを改行するときは末尾のスペースを忘れずに入れてください。&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud firebase &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;android run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --type instrumentation &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --app ./app/build/outputs/apk/debug/app-debug.apk &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --test ./app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --test-targets &lt;span class=&quot;s2&quot;&gt;&quot;class com.example.uitestsample.MainActivityInstrumentedTest&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --results-dir &lt;span class=&quot;nv&quot;&gt;$BK_OBJ_NAME&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --results-bucket cloud-test-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOOGLE_PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --directories-to-pull /sdcard/uitest/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --device &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Pixel2,version&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;26,locale&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_US,orientation&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;portrait &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --use-orchestrator &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --timeout 120s;

&lt;span class=&quot;c&quot;&gt;# 無事に開始されると以下が出力さる&lt;/span&gt;
Have questions, feedback, or issues? Get support by visiting:
  https://firebase.google.com/support/

Uploading &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;./app/build/outputs/apk/debug/app-debug.apk] to Firebase Test Lab...
Uploading &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;./app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk] to Firebase Test Lab...
Raw results will be stored &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;your GCS bucket at &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.developers.google.com/storage/browser/cloud-test-my-test-project-00-2xxxx5/my-test-project-00-2xxxx5/uitest-20190716_1603/]

Test &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;matrix-1gpbgxrsx8fag] has been created &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the Google Cloud.
Firebase Test Lab will execute your instrumentation &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;on 1 device&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
Creating individual &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;executions...done.

Test results will be streamed to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.firebase.google.com/project/my-test-project-00-2xxxx5/testlab/histories/bh.xxxxxxxxxxxx/matrices/8xxxxxxxxxxxx11].
16:17:55 Test is Pending
16:18:23 Starting attempt 1.
16:18:23 Test is Running
16:19:17 Started logcat recording.
16:19:17 Preparing device.
16:19:52 Logging &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;to Google account on device.
16:19:52 Installing apps.
16:20:06 Retrieving Pre-Test Package Stats information from the device.
16:20:06 Retrieving Performance Environment information from the device.
16:20:06 Started crash detection.
16:20:06 Started crash monitoring.
16:20:06 Started performance monitoring.
16:20:19 Started video recording.
16:20:19 Starting instrumentation test.
16:20:53 Completed instrumentation test.
16:21:07 Stopped performance monitoring.
16:21:14 Stopped crash monitoring.
16:21:14 Stopped logcat recording.
16:21:14 Retrieving Post-test Package Stats information from the device.
16:21:14 Logging out of Google account on device.
16:21:21 Done. Test &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 36 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;secs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
16:21:21 Starting results processing. Attempt: 1
16:21:28 Completed results processing. Time taken &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;secs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
16:21:28 Test is Finished

Instrumentation testing complete.

More details are available at &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.firebase.google.com/project/my-test-project-00-2xxxx5/testlab/histories/bh.xxxxxxxxxxxx/matrices/8xxxxxxxxxxxx11].
┌─────────┬──────────────────────────┬─────────────────────┐
│ OUTCOME │     TEST_AXIS_VALUE      │     TEST_DETAILS    │
├─────────┼──────────────────────────┼─────────────────────┤
│ Passed  │ Pixel2-26-en_US-portrait │ 3 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;cases passed │
└─────────┴──────────────────────────┴─────────────────────┘

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;コマンドに出力されるFirebaseのURLにアクセスすると結果が見られます。以下の1行のように表示されているはずで、ブラウザからアクセスすると下図が表示されます。&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Test results will be streamed to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.firebase.google.com/project/my-test-project-00-2xxxx5/testlab/histories/bh.xxxxxxxxxxxx/matrices/8xxxxxxxxxxxx11]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190717-firebase-result-00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;静止画、動画を一覧で表示することができるので、テストで何がされていたかも後から確認することが可能です。
ちなみに、デフォルトで動画は撮影してくれる設定になっていますが、静止画に関しては自前で撮影する処理を書き、タイミングを決めてテストスクリプトに埋め込む必要があります。
テスト失敗時の静止画も自前で設定する必要がありますが、今回の&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/uitestutils/UiTestUtils.kt&quot;&gt;サンプルアプリのUiTestUtils&lt;/a&gt;に含んでいますので試してみたい場合は利用してみてください。&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;CIの流れの中ではもちろん、また「日々の開発と並行してテストしたい場合にローカルで環境を用意する」ことはコスト的に厳しかったり、
「他端末の実デバイスを使ってまずはテストを動かしてみたい」というのも同じくコスト的に厳しいことが少なくないと思います。
全ては無理かもしれませんが、そんなときに心配の塊の1部だけでも取り除くべきFirebase Test Labを使う、というのもとても有効だと思います。&lt;br /&gt;
気になっている方は使ってみてはいかがでしょうか？&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://firebase.google.com/docs/test-lab/android/command-line&quot;&gt;Get started with Firebase Test Lab from the gcloud Command Line&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/sdk/gcloud/reference/firebase/test/android/run&quot;&gt;gcloud firebase test android run(Cloud SDK:Google Cloud)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Android" /><category term="Firebase Test Lab" /><category term="UI Test" /><summary>これは何？
「AndroidアプリをCircleCIでCIする。」のUI TestをCircleCIから実行する方法について説明した記事です。
サンプルアプリのUI Testを走らせるFirebase Test Lab（UI Testを実行するインフラ）について解説していきます。</summary></entry><entry><title>AndroidアプリでのUnit Testについての解説</title><link href="https://ryoyakawai.com/blog/2019/07/10/ci-android-unittest-00.html" rel="alternate" type="text/html" title="AndroidアプリでのUnit Testについての解説" /><published>2019-07-10T00:00:00+09:00</published><updated>2019-07-10T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/07/10/ci-android-unittest-00</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/07/10/ci-android-unittest-00.html">&lt;h2 id=&quot;これは何&quot;&gt;これは何？&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」のUnit Testを説明した記事です。
&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android&quot;&gt;サンプルアプリ&lt;/a&gt;のUnit Testについて解説していきます。&lt;/p&gt;

&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;
&lt;h3 id=&quot;ciの流れでunit-testが実行されている箇所&quot;&gt;CIの流れでUnit Testが実行されている箇所&lt;/h3&gt;
&lt;p&gt;「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」のCIの流れでは &lt;strong&gt;(2) Build&lt;/strong&gt; で実行されています。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-circleci_firebase_00.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;ここで使うコードは以下の通りです。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/tree/master/app/src/test/java/com/example/uitestsample&quot;&gt;サンプルアプリのリポジトリ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/test/java/com/example/uitestsample/MainActivityUnitTest.kt&quot;&gt;Unit Testのスクリプト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/training/testing/unit-testing/local-unit-tests&quot;&gt;公式ドキュメントはこれ&lt;/a&gt;です。&lt;/p&gt;

&lt;h3 id=&quot;ポイント条件など&quot;&gt;ポイント、条件など&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html#aboutunittest&quot;&gt;Unit Testについて（AndroidアプリをCircleCIでCIする。）&lt;/a&gt;にも書いていますがポイントは以下です。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MVP（Model-View-Presenter）のアーキテクチャに対してのUnit Testを実行する&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://junit.org/junit4/&quot;&gt;JUnit&lt;/a&gt;を使ってUnit Testを実行する&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://site.mockito.org/&quot;&gt;Mockito&lt;/a&gt;でViewをモックする&lt;/li&gt;
  &lt;li&gt;HTTPでのアクセスをモックする&lt;/li&gt;
  &lt;li&gt;テストする場所は以下の図の &lt;strong&gt;Point for Unit Testing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-mvp-diagram-00.png&quot; width=&quot;90%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;アーキテクチャはMVPに限っている訳ではありませんが、Interfaceを定義しているとテストを書くのが楽になることから
ここではMVPを採用しています。&lt;/p&gt;

&lt;h3 id=&quot;テストのシナリオ&quot;&gt;テストのシナリオ&lt;/h3&gt;
&lt;p&gt;アプリの機能としては無駄に実装された&lt;a href=&quot;https://jsonplaceholder.typicode.com/&quot;&gt;JSONPlaceholder&lt;/a&gt;
のREST APIに接続をしてJSONを取得し、Viewに反映させる部分の動作に関してテストを実施します。&lt;br /&gt;
具体的に説明すると上図の &lt;strong&gt;Data Interaction&lt;/strong&gt; をモックしてJSONを固定し、&lt;strong&gt;UI Behavior&lt;/strong&gt; をモックして
指定されている振る舞いを行うか、を確認します。
&lt;br /&gt;
よって、今回はこのシナリオを確認する為に以下の2つのテストのケースを用意しました。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTTPレスポンスコード200でJSONを正しく受け取った場合の値の確認とViewに対する動作確認&lt;/li&gt;
  &lt;li&gt;HTTPレスポンスコード500を受け取った場合のViewに対する動作確認&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;準備&quot;&gt;準備&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;に追記、&lt;code class=&quot;highlighter-rouge&quot;&gt;org.mockito.plugins.MockMaker&lt;/code&gt; の作成の2つが必要です。&lt;/p&gt;

&lt;h4 id=&quot;-buildgradleに追記&quot;&gt;＞ &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;に追記&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/build.gradle&lt;/code&gt; に以下を追記します。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Unit and UI Test
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4.12&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.jetbrains.kotlin:kotlin-reflect:$kotlin_version&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.android.support:support-annotations:${android.defaultConfig.targetSdkVersion}&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;robolectric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;robolectric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nhaarman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kt1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squareup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrofit2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moshi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squareup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrofit2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squareup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;okhttp3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockwebserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3.10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; に以下が書かれていることが前提です。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kotlin_version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;-orgmockitopluginsmockmaker-を作成&quot;&gt;＞ &lt;code class=&quot;highlighter-rouge&quot;&gt;org.mockito.plugins.MockMaker&lt;/code&gt; を作成&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker&lt;/code&gt; を新規で作成して、以下の1行を書き込みます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mock-maker-inline
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;unit-testを書く&quot;&gt;Unit Testを書く&lt;/h3&gt;

&lt;h4 id=&quot;-rest-apiをモックして出力を固定する&quot;&gt;＞ REST APIをモックして出力を固定する&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Data Interaction&lt;/strong&gt; の部分をモックして出力を固定します。具体的には&lt;a href=&quot;https://jsonplaceholder.typicode.com/&quot;&gt;JSONPlaceholder&lt;/a&gt;のREST APIの出力を固定する為に
HTTPのクライアント&lt;a href=&quot;https://square.github.io/okhttp/&quot;&gt;OkHttp&lt;/a&gt;をモックします。
扱いやすいように、 &lt;strong&gt;Unit Test本体&lt;/strong&gt; と、 &lt;strong&gt;モック&lt;/strong&gt; を1つのファイルにまとめちゃっています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/test/java/com/example/uitestsample/MainActivityUnitTest.kt&quot;&gt;MainActivityUnitTest.kt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MockServerDispatcher&lt;/code&gt;のクラスがそれになります。&lt;br /&gt;
ここでは、&lt;code class=&quot;highlighter-rouge&quot;&gt;Resp200&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Resp400&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Resp500&lt;/code&gt; の3つのClassを定義することで、以下の用に出力を固定します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Resp200&lt;/code&gt;：正常系の場合で、JSONを返す&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Resp400&lt;/code&gt;：異常系で、HTTP Statusの400を返す&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Resp500&lt;/code&gt;：異常系で、HTTP Statusの500を返す&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;-unit-testを書く&quot;&gt;＞ Unit Testを書く&lt;/h4&gt;
&lt;p&gt;2つのテストケースのうちの「HTTPレスポンスコード200でJSONを正しく受け取った場合の値の確認とViewに対する動作の確認」
の説明を、以下にインラインで行います。。
以下は、&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivityUnitTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mMockTestUtils&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnitTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sampleUnitDataFetchSuccessTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// vvv 正常系でJSONを返すよう指定
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mMockTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockServerBehaviorSwitcher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MockServerDispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resp200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;expectedResponse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockServerDispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedResponse&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mMainActivityPresenter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainActivityPresenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// vvv Viewに対する動作の確認の為にMainActivityViewContract()のClassをモック
&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mMainActivityViewContract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivityViewContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// vvv PresentorにモックしたMainActivityViewContract()を叩かせるようにセット
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mMainActivityPresenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mMainActivityViewContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// vvv 非同期での処理を同期で動作させるように変更
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mMockTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepareRxForTesting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// vvv ここでMockしたサーバを起動する
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mMockTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startMockServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// vvv 以下の2行で、サンプルアプリの接続先をMockしたサーバに入れ替える
&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mApiConnection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMockTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setupMockServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mApiConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// vvv PresenterのMethodを叩いて、動作させる
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mMainActivityPresenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getJsonSampleResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// vvv MainActivityViewContractのhandleSuccess()が叩かれれ、
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 固定したデータ（JSON）の取得ができているかを確認
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;argumentCaptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SinglePostResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mMainActivityViewContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handleSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mMockTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertDataClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// vvv ここでMockしたサーバを停止
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mMockTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shutdownMockServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;実行してみる&quot;&gt;実行してみる&lt;/h3&gt;
&lt;p&gt;実行方法には「コマンドラインから」、また「Android Studioから」の2つがあります。&lt;/p&gt;

&lt;h4 id=&quot;-コマンドラインから実行&quot;&gt;&amp;gt; コマンドラインから実行&lt;/h4&gt;

&lt;p&gt;Unit Testの全てを実行する&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./gradlew testDebugUnitTest;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;指定したClass、MethodのUnit Testを実行る&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Classを指定
// --tests のパラメータとして &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Package Name].[Class Name] を指定
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./gradlew testDebugUnitTest --tests com.example.uitestsample.MainActivityUnitTest;

// ClassとMethodを指定
// --tests のパラメータとして &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Package Name].[Class Name].[Method Name] を指定
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./gradlew testDebugUnitTest --tests com.example.uitestsample.MainActivityUnitTest.sampleUnitDataFetchSuccessTest;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;-android-studioから&quot;&gt;&amp;gt; Android Studioから&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Test&lt;/code&gt;のアノテーションかを書くとTestとして認識されます。
するとAndroid Studioだと下図の赤丸のように、その左側に &lt;span style=&quot;color:green&quot;&gt;▶︎&lt;/span&gt;（再生マーク）が表示されるので、
それをクリックすると実行することが可能です。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190710-unittest-androidstudio-00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;「Cloneしたらすぐに試せる」を目標に書きましたので、興味を持たれた方は試してみていただえると嬉しいです。&lt;br /&gt;
間違ってる！とかありましたらPR、またご指摘ください。&lt;/p&gt;</content><category term="Android" /><category term="Unit Test" /><summary>これは何？
「AndroidアプリをCircleCIでCIする。」のUnit Testを説明した記事です。
サンプルアプリのUnit Testについて解説していきます。</summary></entry><entry><title>AndroidアプリをCircleCIでCIする。</title><link href="https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html" rel="alternate" type="text/html" title="AndroidアプリをCircleCIでCIする。" /><published>2019-07-03T00:00:00+09:00</published><updated>2019-07-03T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/07/03/ci-android-00</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html">&lt;h2 id=&quot;これは何&quot;&gt;これは何？&lt;/h2&gt;
&lt;p&gt;AndroidアプリのCI（継続的インテグレーション）環境を作って運用をしたときの経験を書き出したものです。
2019年7月時点でのものになりますので、時間経過によっては動作しない可能性もありますので予めご了承ください。&lt;/p&gt;

&lt;h4 id=&quot;更新履歴&quot;&gt;更新履歴&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;2019/7/18 関連記事「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/16/ci-android-espresso-00.html&quot;&gt;Espresso, UI AutomatorでAndroidのUI Testを書く&lt;/a&gt;」を公開&lt;/li&gt;
  &lt;li&gt;2019/7/16 関連記事「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/16/ci-android-firebase-00.html&quot;&gt;Firebase Test LabでUI Testを実行する&lt;/a&gt;」を公開&lt;/li&gt;
  &lt;li&gt;2019/7/12 関連記事「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/10/ci-android-unittest-00.html&quot;&gt;AndroidアプリでのUnit Testについての解説&lt;/a&gt;」を公開&lt;/li&gt;
  &lt;li&gt;2019/7/7 DeployGateのローカル環境からの配信を追記&lt;/li&gt;
  &lt;li&gt;2019/7/6 公開&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;
&lt;p&gt;AndroidアプリのGitHubへのPushから、CircleCIでビルド、単体テスト、UIテスト（UI Animator &amp;amp; Espresso on Firebase Test Lab）、
そしてDeployGateへアプリをデプロイする、までの一連の流れの雛形のようなものだと考えてください。&lt;br /&gt;
また記事の内容は以下のように分割して書いていく予定です。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;テストケース、詳細ははともあれ、CircleCIでCIを回してみる&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/10/ci-android-unittest-00.html&quot;&gt;AndroidアプリでのUnit Testについての解説&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/16/ci-android-espresso-00.html&quot;&gt;Espresso, UI AutomatorでAndroidのUI Testを書く&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/16/ci-android-firebase-00.html&quot;&gt;Firebase Test LabでUI Testを実行する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事は「テストケース、詳細ははともあれ、CircleCIでCIを回してみる」についてとなります。&lt;br /&gt;
動作に必須な設定等の説明をして、ローカル環境（手元のPC）からコマンドを使って手動で動作させ正常に動作するかすかの確認を行い、
その後に一連のビルドのプロセスをCircleCIで動かす、というの流れで説明します。&lt;/p&gt;

&lt;h2 id=&quot;ビルドの流れとインフラ&quot;&gt;ビルドの流れとインフラ&lt;/h2&gt;
&lt;p&gt;以下の図の流れでビルドからデプロイまで行います。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-circleci_firebase_00.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;開発者がGitHubにコードをCommitしPushする&lt;/li&gt;
  &lt;li&gt;CircleCIでビルドのプロセスが開始され、Unitテストが実行される&lt;/li&gt;
  &lt;li&gt;UIテスト実行の為、CicleCIがFirebaseに向けてアプリ、テストケースを配信しUIテストを実行する&lt;/li&gt;
  &lt;li&gt;Firebase Test LabでUIテストが実行が完了したらレポートをCircleCIに配信する&lt;/li&gt;
  &lt;li&gt;DeployGateに向けてアプリを配信する&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;利用するインフラ&quot;&gt;利用するインフラ&lt;/h3&gt;
&lt;p&gt;上記のプロセスを実行する為に、以下のインフラを利用します。おなじみの名前ばかりかもしれませんが・・・&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p style=&quot;font-weight:bold;margin:0;&quot;&gt;&lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;Gitで操作するリポジトリを提供するクラウドサービス&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p style=&quot;font-weight:bold;margin:0;&quot;&gt;&lt;a href=&quot;https://circleci.com/&quot;&gt;CircleCI&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;CIを行ってくれるクラウドサービス&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p style=&quot;font-weight:bold;margin:0;&quot;&gt;&lt;a href=&quot;https://console.firebase.google.com/&quot;&gt;Firebase Test Lab&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;Google社が提供するmBaaSが提供するサービスの1つで、UIテスト（Espresso、UI Automator 2.0、XCTest）をクラウドで行うサービス&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p style=&quot;font-weight:bold;margin:0;&quot;&gt;&lt;a href=&quot;https://deploygate.com/&quot;&gt;Deploy Gate&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;ストア（Google Play、App Store）を通さないアプリ配布を実現するサービス（ベータテスト等に利用できる）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;今回利用するandroidのサンプルアプリ&quot;&gt;今回利用するAndroidのサンプルアプリ&lt;/h3&gt;

&lt;h4 id=&quot;-サンプルアプリのコード&quot;&gt;＞ サンプルアプリのコード&lt;/h4&gt;
&lt;p&gt;Unit Test、UI Testを行う為に強引に実装している部分があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android&quot;&gt;UI Test Sample App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;-機能の説明&quot;&gt;＞ 機能の説明&lt;/h4&gt;
&lt;p&gt;サンプルアプリの機能は以下の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;画面右下の赤色のFabをタップするとデバイスへのファイル書き込みの許可を求められる。&lt;/li&gt;
  &lt;li&gt;デバイスへのファイル書き込みの許可の状態に関係なく、画面中央の文字列「Hello World!!」が「1」に変化する&lt;/li&gt;
  &lt;li&gt;更に、画面右下の赤色のFabをタップすると、タップ毎に1つづつインクリメントされた数字が表示される&lt;/li&gt;
  &lt;li&gt;画面右上の3点リーダをタップすると「Reset Counter」のボタンが出現し、タップするとカウンタが「0」に変化する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こんな↓動作をするアプリです。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-uitestsampleapp_00.png&quot; style=&quot;border-radius:8px&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;サンプルアプリの実装のアーキテクチャ&quot;&gt;サンプルアプリの実装のアーキテクチャ&lt;/h2&gt;
&lt;p&gt;サンプルアプリのアーキテクチャはMVP(Model-View-Presenter)で構成されていて、Activityは1つです。&lt;br /&gt;
また今回のサンプルアプリの仕様（上記）ですと、Model（DB、API等のデータソース）が必要のないアプリになってしまいますが、
Unit Testの為、外部のREST APIへ接続を行い、データを取得しConsole出力をするロジックが無駄に実装しています。&lt;br /&gt;
アーキテクチャは図にすると以下のような構成です。図内では、Classが1つのブロックになっていて、ブロックの上部に白文字はInterfaceです。
例えば、MainActivityPresenterはMainActivityPresenterContractのInterfaceで構成されたClass、
よって、MainActivityInteractorはInterfaceを規定していないClassであることを表しています。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-mvp-diagram-00.png&quot; width=&quot;90%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;それでは、できるだけサクッとCircleCIでCIを回してみましょう。&lt;/p&gt;

&lt;h2 id=&quot;事前準備リポジトリを作成する&quot;&gt;事前準備：リポジトリを作成する&lt;/h2&gt;
&lt;p&gt;実際に動作させる場合は、上記のURLのコードをFork等をして自前で専用のリポジトリGitHubにご用意ください。&lt;/p&gt;

&lt;h2 id=&quot;unit-testについて&quot;&gt;&lt;a name=&quot;aboutunittest&quot;&gt;Unit Testについて&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;（関連記事「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/10/ci-android-unittest-00.html&quot;&gt;AndroidアプリでのUnit Testについての解説&lt;/a&gt;」）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://junit.org/junit4/&quot;&gt;JUnit&lt;/a&gt;を使ってUnit Testを実行します。AndroidでのUnit Testの定番です。
モックは&lt;a href=&quot;https://site.mockito.org/&quot;&gt;Mockito&lt;/a&gt;を使います。
サンプルアプリのUnit TestはPresenterとやり取りを横取りする形で行います。
上の図の &lt;strong&gt;「Point for Unit Testing」&lt;/strong&gt; と書かれた矢印のポイントがそこです。&lt;/p&gt;

&lt;h3 id=&quot;unit-testの概要&quot;&gt;Unit Testの概要&lt;/h3&gt;
&lt;p&gt;コードは&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/tree/master/app/src/test/java/com/example/uitestsample&quot;&gt;このディレクトリ&lt;/a&gt;に配置しています。&lt;/p&gt;

&lt;p&gt;Unit Testのスクリプトはこのファイルです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/test/java/com/example/uitestsample/MainActivityUnitTest.kt&quot;&gt;MainActivityUnitTest.kt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;共通で使うであろう機能をMethod化して集めたClassがこちら。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/test/java/com/example/uitestsample/unittestuitls/UnitTestUitls.kt&quot;&gt;unittestuitls/UnitTestUitls.kt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;テストとしては、先程説明したModelにアプリの動作に対しては無駄に実装したREST APIへ接続するロジックを使います。
REST APIからデータを取得し、取得したデータを元に正しくViewに反映される動作をするかの確認を行うのが目的です。&lt;br /&gt;
サンプルアプリの接続先REST APIは&lt;a href=&quot;https://jsonplaceholder.typicode.com/&quot;&gt;JSONPlaceholder&lt;/a&gt;です。接続するURLは&lt;a href=&quot;https://jsonplaceholder.typicode.com/comments?postId=1&quot;&gt;/comments?postId=1&lt;/a&gt;で、&lt;code class=&quot;highlighter-rouge&quot;&gt;postId&lt;/code&gt;が同一であれば常に同じ値のJSONを返してくれます。常に同じJSONを返してくれるとはいえ、Unit Testではより確実性を高めたい、つまり、相手のサーバの状態に関係なく確実に同じJSONを取得できることを保証したいです。ですので、このUnit Testでは&lt;a href=&quot;https://site.mockito.org/&quot;&gt;Mockito&lt;/a&gt;を使ってJSONPlaceholderのAPIをMock（モック）することで確実に同一のJSONを受け取れるようにしています。&lt;br /&gt;
&lt;br /&gt;
テストのケースは2つです。その内容は以下の通りです。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTTPレスポンスコード200でJSONを正しく受け取った場合の値の確認とViewに対する動作の確認&lt;/li&gt;
  &lt;li&gt;HTTPレスポンスコード500を受け取った場合のViewに対する動作確認&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお、Unit Testの書き方（お作法）、テストケース詳細は別エントリの&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/10/ci-android-unittest-00.html&quot;&gt;AndroidアプリでのUnit Testについての解説&lt;/a&gt;で説明しています。&lt;/p&gt;

&lt;h3 id=&quot;unit-testをローカル環境で動作させてみる&quot;&gt;Unit Testをローカル環境で動作させてみる&lt;/h3&gt;
&lt;p&gt;手元で動作させてみましょう。Terminalでコードのトップに移動して以下のコマンドを実行すると、こんな出力が出てくるはずです。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;https://ryoyakawai.com/blog/gradlew :app:testDebugUnitTest;

&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;Task :app:testDebugUnitTest
com.example.uitestsample.MainActivityUnitTest &amp;gt; sampleUnit500ServerErrorTest PASSED
com.example.uitestsample.MainActivityUnitTest &amp;gt; sampleUnitDataFetchSuccessTest PASSED
com.example.uitestsample.MainActivityUnitTest &amp;gt; sampleUnit400BadRequestTest PASSED

&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;Task :app:testReleaseUnitTest
com.example.uitestsample.MainActivityUnitTest &amp;gt; sampleUnit500ServerErrorTest PASSED
com.example.uitestsample.MainActivityUnitTest &amp;gt; sampleUnitDataFetchSuccessTest PASSED
com.example.uitestsample.MainActivityUnitTest &amp;gt; sampleUnit400BadRequestTest PASSED

BUILD SUCCESSFUL &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;8s
40 actionable tasks: 10 executed, 30 up-to-date
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;「BUILD SUCCESSFUL in XXs」&lt;/strong&gt; が出たら &lt;strong&gt;Unit TestはテストケースをすべてSuccessで終了した&lt;/strong&gt; という意味になります。また、ここでWarning等のメッセージが出た場合、できる限り修正してメッセージが表示されないようにすることをオススメします。&lt;br /&gt;
これでUnit Testの準備は完了です。&lt;/p&gt;

&lt;h2 id=&quot;ui-testについて&quot;&gt;UI Testについて&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/training/testing/espresso&quot;&gt;Espresso&lt;/a&gt;、&lt;a href=&quot;https://developer.android.com/training/testing/ui-automator&quot;&gt;UI Automator&lt;/a&gt;を使っています。それぞれの特徴は以下の通りです。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-uitesttool_00.png&quot; width=&quot;50%&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;espresso&quot;&gt;Espresso&lt;/h4&gt;
&lt;p&gt;「to write concise, beautiful, and reliable Android UI tests」と公式サイトには説明されています。特定のアプリのUIに対してのスクリプトで動作をさせることを可能にするテストフレームワークです。単一のアプリの操作を自動化する場合に使うとよいでしょう。Google社が開発していますので、Anroidの公式のテストツールと言ってよいでしょう。&lt;/p&gt;

&lt;h4 id=&quot;ui-automator&quot;&gt;UI Automator&lt;/h4&gt;
&lt;p&gt;「suitable for cross-app functional UI testing across system and installed apps.」と公式サイトに説明されている通りで、Espressoと比べると、よりAndroidのOSに近い側に位置しているテストフレームワークで、複数アプリを行き来するよう動作をスクリプトで定義することの可能です。Espressoとは違い、複数のアプリの操作を自動化する場合に使うとよいでしょう。こちらもEspressoと同じくGoogle社が開発していますので、Anroidの公式のテストツールと言ってよいでしょう。&lt;/p&gt;

&lt;h3 id=&quot;ui-testの概要&quot;&gt;UI Testの概要&lt;/h3&gt;
&lt;p&gt;コードは&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/tree/master/app/src/androidTest/java/com/example/uitestsample&quot;&gt;このディレクトリ&lt;/a&gt;に配置しています。&lt;/p&gt;

&lt;p&gt;UI Testのスクリプトはこのファイルです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/MainActivityInstrumentedTest.kt&quot;&gt;MainActivityInstrumentedTest.kt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;共通で使うであろう機能をMethod化して集めたClassがこちら。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/uitestutils/UiTestUtils.kt&quot;&gt;uitestutils/UiTestUtils.kt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;テストのケースは3つです。その内容は以下の通りです。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;パッケージ名を確認する&lt;/li&gt;
  &lt;li&gt;アプリ起動時の画面の文字列の確認をする&lt;/li&gt;
  &lt;li&gt;アプリ起動後、各ボタンが正しく機能し、画面表示が仕様通り更新されるかを確認する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお、UI Test（Espresso、UI AUtomator）の書き方（お作法）、テストケース詳細は別エントリの「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/16/ci-android-espresso-00.html&quot;&gt;Espresso, UI Automator„ÅßAndroid„ÅÆUI Test„ÇíÊõ∏„Åè&lt;/a&gt;」で説明していますので合わせて御覧ください。&lt;/p&gt;

&lt;h3 id=&quot;ui-testをローカル環境で動作させてみる&quot;&gt;UI Testをローカル環境で動作させてみる&lt;/h3&gt;
&lt;p&gt;手元で動作させてみましょう。Terminalのコマンドラインからコードのトップディレクトリに移動して以下のコマンドを実行すると、こんな↓が出力が出てくるはずです。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./gradlew :app:connectedAndroidTest; // ← ./gradlew cAT でもOK

&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;Task :app:connectedDebugAndroidTest
01:52:09 V/ddms: execute: running am get-config
01:52:09 V/ddms: execute &lt;span class=&quot;s1&quot;&gt;&#39;am get-config&#39;&lt;/span&gt; on &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt; : EOF hit. Read: -1
01:52:09 V/ddms: execute: returning
01:52:09 D/app-debug.apk: Uploading app-debug.apk onto device &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt;
01:52:09 D/Device: Uploading file onto device &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt;
....
01:52:13 V/ddms: execute: running pm install -r -t &lt;span class=&quot;s2&quot;&gt;&quot;/data/local/tmp/test-services-1.0.2.apk&quot;&lt;/span&gt;
01:52:13 V/ddms: execute &lt;span class=&quot;s1&quot;&gt;&#39;pm install -r -t &quot;/data/local/tmp/test-services-1.0.2.apk&quot;&#39;&lt;/span&gt; on &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt; : EOF hit. Read: -1
01:52:13 V/ddms: execute: returning
01:52:13 V/ddms: execute: running rm &lt;span class=&quot;s2&quot;&gt;&quot;/data/local/tmp/test-services-1.0.2.apk&quot;&lt;/span&gt;
01:52:13 V/ddms: execute &lt;span class=&quot;s1&quot;&gt;&#39;rm &quot;/data/local/tmp/test-services-1.0.2.apk&quot;&#39;&lt;/span&gt; on &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt; : EOF hit. Read: -1
01:52:13 V/ddms: execute: returning
01:52:13 D/app-debug-androidTest.apk: Uploading app-debug-androidTest.apk onto device &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt;
01:52:13 D/Device: Uploading file onto device &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt;
....
androidx.test.internal.runner.junit3.DelegatingFilterableTestSuite &amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;API_27_Pixel_2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AVD&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; - 8.1.0] SKIPPED
01:52:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS_CODE: -3
01:52:21 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;androidx.test.internal.runner.junit3.DelegatingTestSuite
01:52:21 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: &lt;span class=&quot;nv&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3
01:52:21 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;AndroidJUnitRunner
01:52:21 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: &lt;span class=&quot;nv&quot;&gt;numtests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8
....
01:53:07 V/InstrumentationResultParser: Time: 48.21
01:53:07 V/InstrumentationResultParser:
01:53:07 V/InstrumentationResultParser: OK &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3 tests&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
....
01:53:07 V/ddms: execute: returning
01:53:07 V/ddms: execute: running pm uninstall com.example.uitestsample.test
01:53:07 V/ddms: execute &lt;span class=&quot;s1&quot;&gt;&#39;pm uninstall com.example.uitestsample.test&#39;&lt;/span&gt; on &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt; : EOF hit. Read: -1
01:53:07 V/ddms: execute: returning
01:53:07 V/ddms: execute: running pm uninstall com.example.uitestsample
01:53:07 V/ddms: execute &lt;span class=&quot;s1&quot;&gt;&#39;pm uninstall com.example.uitestsample&#39;&lt;/span&gt; on &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt; : EOF hit. Read: -1
01:53:07 V/ddms: execute: returning

BUILD SUCCESSFUL &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;1m 1s
51 actionable tasks: 10 executed, 41 up-to-date
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Unit Testのときと同じく、&lt;strong&gt;「BUILD SUCCESSFUL in XXs」&lt;/strong&gt; が出たら &lt;strong&gt;UI TestはテストケースをすべてSuccessで終了した&lt;/strong&gt; という意味になります。また、ここもUnit Testのときと同様にWarning等のメッセージが出てきたら、でいる限り修正することをオススメします。&lt;/p&gt;

&lt;h2 id=&quot;firebase-test-labでテストを行う&quot;&gt;Firebase Test Labでテストを行う&lt;/h2&gt;

&lt;h3 id=&quot;firebase-test-labとは&quot;&gt;&lt;a name=&quot;aboutfirebasetestlab&quot;&gt;Firebase Test Labとは&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Firebase Test LabはFirebaseがの1つのサービスとして提供されているクラウドでUI Testを行うプラットフォームです。Android(Espresso、UI Automator)、iOS(XCTest)で書かれたテストの実行に対応しています。操作は以下の2つの方法が提供されています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.firebase.google.com/&quot;&gt;ブラウザから操作を行う&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Google Cloud SDKのCLIを利用してコマンドラインから&lt;a href=&quot;https://console.cloud.google.com/marketplace/details/google/testing.googleapis.com?project=uitest-sample-android&amp;amp;folder=&amp;amp;organizationId=&quot;&gt;Cloud Testing API&lt;/a&gt;で動作させる方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どちらもの方法を使っても結果はブラウザ上で動作している&lt;a href=&quot;console.firebase.google.com&quot;&gt;FirebaseのConsole&lt;/a&gt;（下図↓）から閲覧が可能になります。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-console-firebasetestlab_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;ここではGoogle Cloud SDKのCLIからCloud Testing APIを使う方法で実行します。
Google Cloud SDKのCLIから使う場合は以下の2つのAPIを有効にする必須です。必ず以下のリンクから利用するプロジェクトで有効にしてください。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.cloud.google.com/marketplace/details/google/testing.googleapis.com&quot;&gt;Cloud Testing API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.cloud.google.com/marketplace/details/google/toolresults.googleapis.com&quot;&gt;Cloud Tool Results API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（Firebase Test Labの設定については「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/16/ci-android-firebase-00.html&quot;&gt;Firebase Test LabでUI Testを実行する&lt;/a&gt;」で詳しく説明しています。）&lt;/p&gt;

&lt;h3 id=&quot;firebase-test-labをローカル環境で動作させてみる&quot;&gt;Firebase Test Labをローカル環境で動作させてみる&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://firebase.google.com/docs/test-lab&quot;&gt;FirebaseでのProjectの設定&lt;/a&gt;、GCPのアカウントの準備、&lt;a href=&quot;https://cloud.google.com/sdk/downloads&quot;&gt;Google Cloud SDKのCLIは準備&lt;/a&gt;は済んでいると仮定します。&lt;br /&gt;
また既にローカルでUIテストの動作確認も済んでいますので、早速UIテストをFirebase Test Labで動かしてみます。&lt;br /&gt;
（&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/16/ci-android-firebase-00.html&quot;&gt;Firebase Test LabでUI Testを実行する&lt;/a&gt;」でも詳しく説明しています。）&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Cloud Testing APIを有効にしたアカウントでログインし、CLIの向き先Projectを切替える
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud auth;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;project &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PROJECT ID];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;続いて、Cloud Testing APIでUIテストを実行する為に以下をコンソールで実行します。&lt;br /&gt;
環境変数で変数を指定して実行していますが、ここではテキストを入力してもOKです。
CircleCIでは環境変数で指定することが望ましいのでそれに習っています。
この記事内の他の項目でも環境変数を使う理由は同一です。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s2&quot;&gt;&quot;+%Y%m%d_%H%M&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BK_OBJ_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[保存するバケットのディレクトリ名]/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TIME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[今回のテストを保存するディレクトリ]&quot;&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOOGLE_PROJECT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[PROJECT ID]&quot;&lt;/span&gt;;

// コマンドを改行するときは末尾のスペースを忘れずに入れてください。
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud firebase &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;android run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --type instrumentation &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --app ./app/build/outputs/apk/debug/app-debug.apk &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --test ./app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --test-targets &lt;span class=&quot;s2&quot;&gt;&quot;class com.example.uitestsample.MainActivityInstrumentedTest&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --results-dir &lt;span class=&quot;nv&quot;&gt;$BK_OBJ_NAME&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --results-bucket cloud-test-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOOGLE_PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --directories-to-pull /sdcard/uitest/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --device &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Pixel2,version&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;26,locale&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_US,orientation&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;portrait &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --use-orchestrator &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --timeout 120s;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;実行開始が成功するとFirebaseのConsoleにこんな形↓で1行追加されます。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-firebase-begin-test_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;テストが終了しするとこのような出力がコンソールにされます。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Have questions, feedback, or issues? Get support by visiting:
  https://firebase.google.com/support/

Uploading &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;./app/build/outputs/apk/debug/app-debug.apk] to Firebase Test Lab...
Uploading &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;./app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk] to Firebase Test Lab...
Raw results will be stored &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;your GCS bucket at &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.developers.google.com/storage/browser/[PROJECT ID]/cloud-test-uitest-sample-android/20190705-xxxxxx02/]

Test &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;matrix-3dp8juo0wx533] has been created &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the Google Cloud.
Firebase Test Lab will execute your instrumentation &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;on 1 device&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
Creating individual &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;executions...done.

Test results will be streamed to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.firebase.google.com/project/[PROJECT ID]/testlab/histories/bh.xxxxxxxxx/matrices/918190477175429xxxx].
16:25:19 Test is Pending
16:25:40 Starting attempt 1.
16:25:40 Test is Running
16:26:42 Started logcat recording.
16:26:42 Preparing device.
16:27:15 Logging &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;to Google account on device.
16:27:15 Installing apps.
16:27:28 Retrieving Pre-Test Package Stats information from the device.
16:27:28 Retrieving Performance Environment information from the device.
16:27:28 Started crash detection.
16:27:28 Started crash monitoring.
16:27:28 Started performance monitoring.
16:27:42 Started video recording.
16:27:42 Starting instrumentation test.
16:28:21 Completed instrumentation test.
16:28:34 Stopped performance monitoring.
16:28:41 Stopped crash monitoring.
16:28:47 Stopped logcat recording.
16:28:47 Retrieving Post-test Package Stats information from the device.
16:28:47 Logging out of Google account on device.
16:28:53 Done. Test &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 51 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;secs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
16:28:53 Starting results processing. Attempt: 1
16:29:00 Completed results processing. Time taken &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;secs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
16:29:00 Test is Finished

Instrumentation testing complete.

More details are available at &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.firebase.google.com/project/[PROJECT ID]/testlab/histories/bh.xxxxxxxxx/matrices/918190477175429xxxx].
┌─────────┬──────────────────────────┬─────────────────────┐
│ OUTCOME │     TEST_AXIS_VALUE      │     TEST_DETAILS    │
├─────────┼──────────────────────────┼─────────────────────┤
│ Passed  │ Pixel2-26-en_US-portrait │ 3 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;cases passed │
└─────────┴──────────────────────────┴─────────────────────┘
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;出力されている &lt;strong&gt;GCS bucket&lt;/strong&gt;、&lt;strong&gt;More details are availabl at&lt;/strong&gt; として表示されているURLにアクセスするとテスト結果が書き出されているはずです。閲覧はブラウザから可能です。&lt;/p&gt;

&lt;h2 id=&quot;deploygateを準備する&quot;&gt;DeployGateを準備する&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.deploygate.com/docs/quickstart#section--&quot;&gt;ここ&lt;/a&gt;を参考に、&lt;strong&gt;サインアップ&lt;/strong&gt;、&lt;strong&gt;アプリをアップロード&lt;/strong&gt; まで済ませましょう。&lt;/p&gt;

&lt;h3 id=&quot;deploygateにローカル環境から配信してみる&quot;&gt;DeployGateにローカル環境から配信してみる&lt;/h3&gt;
&lt;h4 id=&quot;deplotgateのapi-keyを取得&quot;&gt;&lt;a name=&quot;deploygateapikey&quot;&gt;DeplotGateのAPI keyを取得&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;DeployGateのサイトにログインをして&lt;a href=&quot;https://deploygate.com/settings&quot;&gt;https://deploygate.com/settings&lt;/a&gt;の最下段に表示されています。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-deploygate_key_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;これを環境変数として設定します。
ついでにユーザID（DeployGateのユーザーID）とAPKへのPathも環境変数に設定してしまいましょう。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEPLOYGATE_API_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[取得したAPI key]&quot;&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[DeployGateのユーザID]&quot;&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APK_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;app/build/outputs/apk/debug/app-debug.apk;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;deploygateに配信する&quot;&gt;&lt;a name=&quot;deploytodeploygate&quot;&gt;DeployGateに配信する&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;以下のコマンドで配信します。メッセージをリッチにするために環境変数を少々追加しています。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s2&quot;&gt;&quot;+%Y/%m/%d %H:%M&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;COMMIT_HASH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git log --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%H&quot;&lt;/span&gt; -n 1 | cut -c 1-8&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -F &lt;span class=&quot;s2&quot;&gt;&quot;file=@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APK_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -F &lt;span class=&quot;s2&quot;&gt;&quot;token=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEPLOYGATE_API_KEY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -F &lt;span class=&quot;s2&quot;&gt;&quot;message=Build by CircleCI &amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;COMMIT_HASH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt; (&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TIME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt; https://deploygate.com/api/users/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/apps
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;このような出力されるはずです。&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;error&quot;:false&lt;/code&gt;と表示されていたら配信成功です。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;:false,&lt;span class=&quot;s2&quot;&gt;&quot;results&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;UITest Sample App&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;package_name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.example.uitestsample&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;labels&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;os_name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Android&quot;&lt;/span&gt;,..../secure.gravatar.com/avatar/410d1a2cc20ac9675664df7de253156b?s&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;218&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0026d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mm&lt;span class=&quot;s2&quot;&gt;&quot;}}}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;DeployGateのウェブ管理コンソール（URLは&lt;code class=&quot;highlighter-rouge&quot;&gt;https://deploygate.com/users/[DeployGateのユーザID]/apps/[アプリのPackage名]&lt;/code&gt;）では、以下のように赤四角のリストにアイテムが追加されているはずです。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-deploygateadminconsole_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
ビルドのプロセスをローカル環境から手動で回すことの確認まで行いましたので、CircleCI上で動かしてみます。&lt;/p&gt;

&lt;h2 id=&quot;circleciの設定をする&quot;&gt;CircleCIの設定をする&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/.circleci/config.yml&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.circleci/config.yml&lt;/code&gt;&lt;/a&gt;が設定ファイルになります。&lt;br /&gt;
動作させるには環境変数として&lt;code class=&quot;highlighter-rouge&quot;&gt;DEPLOYGATE_API_KEY&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GCLOUD_SERVICE_KEY&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GOOGLE_PROJECT_ID&lt;/code&gt;の設定が必須です。
それぞれの値の取得方法は以下になります。&lt;/p&gt;

&lt;h3 id=&quot;deploygate_api_key&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DEPLOYGATE_API_KEY&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;DeployGateのサイトにログインをして&lt;a href=&quot;https://deploygate.com/settings&quot;&gt;https://deploygate.com/settings&lt;/a&gt;の最下段に表示されています。
（上記 &lt;strong&gt;&lt;a href=&quot;#deploygateapikey&quot;&gt;「DeplotGateのAPI keyを取得」&lt;/a&gt;&lt;/strong&gt; の項目で説明しているAPI keyと同じです）&lt;/p&gt;

&lt;h3 id=&quot;google_project_idgcloud_service_key&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GOOGLE_PROJECT_ID&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GCLOUD_SERVICE_KEY&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GOOGLE_PROJECT_ID&lt;/code&gt;はJSON形式のファイルの内容をbase64にした値です。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;下↓の左図のように(1)でPROJECT_IDを選択し（ここで選択した文字列が&lt;code class=&quot;highlighter-rouge&quot;&gt;GOOGLE_PROJECT_ID&lt;/code&gt;となります）、(2)のように [IAM &amp;amp; admin] &amp;gt; [Service account] を選択してアカウントを作成します&lt;/li&gt;
  &lt;li&gt;次に[IAM &amp;amp; admin]を表示し、下↓の右図のように先程作成したアカウントの右側の鉛筆マークをクリックして、&lt;strong&gt;Firebase Test Lab Admin&lt;/strong&gt; を追加します&lt;/li&gt;
  &lt;li&gt;再度[IAM &amp;amp; admin] &amp;gt; [Service account]を表示して、作成したアカウントの右側にある3点リーダをクリックしてJSONフォーマットのキーを作成しダウンロードします&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-serviceaccount_00.png&quot; width=&quot;40%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee; margin-right: 10px&quot; /&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-serviceaccount_01.png&quot; width=&quot;55%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;そしてダウンロードしたJSONフォーマットのキーをbase64形式に書き出します。この文字列をCircleCIに環境変数&lt;code class=&quot;highlighter-rouge&quot;&gt;GCLOUD_SERVICE_KEY&lt;/code&gt;として登録してください。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;base64 -i &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PATH TO JSON FILE];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;cicleciに環境変数として登録&quot;&gt;CicleCIに環境変数として登録&lt;/h2&gt;
&lt;p&gt;取得した3つの値を&lt;code class=&quot;highlighter-rouge&quot;&gt;DEPLOYGATE_API_KEY&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GOOGLE_PROJECT_ID&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GCLOUD_SERVICE_KEY&lt;/code&gt;を以下の図のように登録します。&lt;br /&gt;
対象のプロジェクトを選択し[Settings]を表示して、左ペインのメニューから[BUILD SETTINGS] &amp;gt; [Environment Variables]に保存します。完了すると以下の図のようになります。
画面上は指定した値の最後の4文字のみ表示された状態となります。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-circleci-stting_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;リポジトリにpushしてcircleci上でbuildを動かす&quot;&gt;リポジトリにPushしてCircleCI上でBuildを動かす&lt;/h2&gt;

&lt;p&gt;設定は完了しましたので、準備したリポジトリのMasterブランチにコードをPushします。&lt;br /&gt;
PushするとCircleCI上でBuildのプロセスが動き始めます。今後はMasterにPush、またはMergeするとBuildプロセスが走るようになります。&lt;/p&gt;

&lt;h3 id=&quot;実行結果のレポートを閲覧する&quot;&gt;実行結果のレポートを閲覧する&lt;/h3&gt;
&lt;p&gt;ビルドの結果はCircleCIのサイトから確認することが可能です。成功すると以下のようになるでしょう。&lt;br /&gt;
また、Unit Testの結果は &lt;strong&gt;Artifacts&lt;/strong&gt; のタブから確認することが可能です。（下図）&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-circleci-result_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;UI Testのも確認は可能です。Successの場合はそれでよいのですが、Failしている場合の詳細結果は下図のようにFirebaseのConsoleから確認してください。また、下図の赤丸内の &lt;strong&gt;Test Result&lt;/strong&gt; をクリックするとその他のデータが閲覧可能となっています。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-firebase-access-to-gcp_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;deploygateへの配信を確認&quot;&gt;DeployGateへの配信を確認&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;#deploytodeploygate&quot;&gt;「DeployGateに配信する」&lt;/a&gt;&lt;/strong&gt; の項目での結果のようにリストにアイテムが追加されているはずです。&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;AndroidアプリをCircleCI上でCIする流れを説明してきました。この流れでCIを回していきます。長くなってしまいましたが、いかがでしたでしょうか？&lt;br /&gt;
この流れを作るのに多くのサイトにお世話になりました。この記事をご覧になっている方々がサクっとCI環境を作成することができることで、
世界を変えるであろう素晴らしいアプリの開発に時間を注ぐことに少しでもお力になれたら嬉しいです。&lt;br /&gt;
なお、今回のUI Testはネットワークアクセスに依存する部分が少なかったのですが、そうでない場合は結果が不安定になりがちですので、通信中なのか、通信は完了しているのかについての何らかの目印をつける、だったりその他の工夫が必要になります。そういったところも何らかの形で共有していきたいと思っています。&lt;/p&gt;

&lt;p&gt;それでは、引き続き詳細な解説についてもがんばって書いていきますのでよろしくお願いします。&lt;/p&gt;</content><category term="Android" /><category term="Espresso" /><category term="CircleCI" /><category term="Firebase Test Lab" /><category term="DeployGate" /><summary>これは何？
AndroidアプリのCI（継続的インテグレーション）環境を作って運用をしたときの経験を書き出したものです。
2019年7月時点でのものになりますので、時間経過によっては動作しない可能性もありますので予めご了承ください。</summary></entry><entry><title>アメリカン中華の代表格？のバーボンチキンを作ってみた</title><link href="https://ryoyakawai.com/blog/2019/06/29/bourbon-chicken.html" rel="alternate" type="text/html" title="アメリカン中華の代表格？のバーボンチキンを作ってみた" /><published>2019-06-29T20:00:00+09:00</published><updated>2019-06-29T20:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/06/29/bourbon-chicken</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/06/29/bourbon-chicken.html">&lt;div&gt; &lt;/div&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
  &lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/06/20190629-bourbonchicken.jpg&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;アメリカン中華の代表格かな？って思ってるバーボンチキン。微妙に焦がすのがポイントな料理。たまに無性に食べたくなるので作ってみました。&lt;br /&gt;
&lt;a href=&quot;http://bit.ly/31S62b4&quot;&gt;もとネタのレシピ&lt;/a&gt;から調味料（特に、砂糖の量！）をアレンジしています。&lt;br /&gt;
もしよかったら作ってみてください！白いご飯に載せて食べると美味しいです😋&lt;/p&gt;

&lt;h3 id=&quot;バーボンチキンアメリカン中華&quot;&gt;バーボンチキン（アメリカン中華？）&lt;/h3&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;script src=&quot;https://widgets.cookpad.com/recipes/5719021.js?k=5ba150f3&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/div&gt;</content><category term="Cookpad" /><category term="料理" /><summary></summary></entry></feed>
