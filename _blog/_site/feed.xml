<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="../feed.xml" rel="self" type="application/atom+xml" /><link href="../" rel="alternate" type="text/html" /><updated>2019-07-12T17:35:55+09:00</updated><id>../</id><title>Delicious Days</title><subtitle>Life is delicious every day.</subtitle><entry><title>AndroidアプリでのUnit Testについての解説</title><link href="../2019/07/10/ci-android-unittest-00.html" rel="alternate" type="text/html" title="AndroidアプリでのUnit Testについての解説" /><published>2019-07-10T00:00:00+09:00</published><updated>2019-07-10T00:00:00+09:00</updated><id>../2019/07/10/ci-android-unittest-00</id><content type="html" xml:base="../2019/07/10/ci-android-unittest-00.html">&lt;h2 id=&quot;これは何&quot;&gt;これは何？&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&quot;./2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」のUnit Testを説明した記事です。
&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android&quot;&gt;サンプルアプリ&lt;/a&gt;のUnit Testについて解説していきます。&lt;/p&gt;

&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;
&lt;h3 id=&quot;ciの流れでunit-testが実行されている箇所&quot;&gt;CIの流れでUnit Testが実行されている箇所&lt;/h3&gt;
&lt;p&gt;「&lt;a href=&quot;./2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」のCIの流れでは &lt;strong&gt;(2) Build&lt;/strong&gt; で実行されています。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-circleci_firebase_00.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;ここで使うコードは以下の通りです。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/tree/master/app/src/test/java/com/example/uitestsample&quot;&gt;サンプルアプリのリポジトリ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/test/java/com/example/uitestsample/MainActivityUnitTest.kt&quot;&gt;Unit Testのスクリプト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/training/testing/unit-testing/local-unit-tests&quot;&gt;公式ドキュメントはこれ&lt;/a&gt;です。&lt;/p&gt;

&lt;h3 id=&quot;ポイント条件など&quot;&gt;ポイント、条件など&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;./2019/07/03/ci-android-00.html#aboutunittest&quot;&gt;Unit Testについて（AndroidアプリをCircleCIでCIする。）&lt;/a&gt;にも書いていますがポイントは以下です。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MVP（Model-View-Presenter）のアーキテクチャに対してのUnit Testを実行する&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://junit.org/junit4/&quot;&gt;JUnit&lt;/a&gt;を使ってUnit Testを実行する&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://site.mockito.org/&quot;&gt;Mockito&lt;/a&gt;でViewをモックする&lt;/li&gt;
  &lt;li&gt;HTTPでのアクセスをモックする&lt;/li&gt;
  &lt;li&gt;テストする場所は以下の図の &lt;strong&gt;Point for Unit Testing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-mvp-diagram-00.png&quot; width=&quot;90%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;アーキテクチャはMVPに限っている訳ではありませんが、Interfaceを定義しているとテストを書くのが楽になることから
ここではMVPを採用しています。&lt;/p&gt;

&lt;h3 id=&quot;テストのシナリオ&quot;&gt;テストのシナリオ&lt;/h3&gt;
&lt;p&gt;アプリの機能としては無駄に実装された&lt;a href=&quot;https://jsonplaceholder.typicode.com/&quot;&gt;JSONPlaceholder&lt;/a&gt;
のREST APIに接続をしてJSONを取得し、Viewに反映させる部分の動作に関してテストを実施します。&lt;br /&gt;
具体的に説明すると上図の &lt;strong&gt;Data Interaction&lt;/strong&gt; をモックしてJSONを固定し、&lt;strong&gt;UI Behavior&lt;/strong&gt; をモックして
指定されている振る舞いを行うか、を確認します。
&lt;br /&gt;
よって、今回はこのシナリオを確認する為に以下の2つのテストのケースを用意しました。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTTPレスポンスコード200でJSONを正しく受け取った場合の値の確認とViewに対する動作確認&lt;/li&gt;
  &lt;li&gt;HTTPレスポンスコード500を受け取った場合のViewに対する動作確認&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;準備&quot;&gt;準備&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;に追記、&lt;code class=&quot;highlighter-rouge&quot;&gt;org.mockito.plugins.MockMaker&lt;/code&gt; の作成の2つが必要です。&lt;/p&gt;

&lt;h4 id=&quot;-buildgradleに追記&quot;&gt;＞ &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;に追記&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/build.gradle&lt;/code&gt; に以下を追記します。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Unit and UI Test
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4.12&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.jetbrains.kotlin:kotlin-reflect:$kotlin_version&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.android.support:support-annotations:${android.defaultConfig.targetSdkVersion}&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;robolectric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;robolectric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nhaarman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kt1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squareup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrofit2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moshi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squareup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrofit2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squareup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;okhttp3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockwebserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3.10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; に以下が書かれていることが前提です。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kotlin_version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;-orgmockitopluginsmockmaker-を作成&quot;&gt;＞ &lt;code class=&quot;highlighter-rouge&quot;&gt;org.mockito.plugins.MockMaker&lt;/code&gt; を作成&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker&lt;/code&gt; を新規で作成して、以下の1行を書き込みます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mock-maker-inline
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;unit-testを書く&quot;&gt;Unit Testを書く&lt;/h3&gt;

&lt;h4 id=&quot;-rest-apiをモックして出力を固定する&quot;&gt;＞ REST APIをモックして出力を固定する&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Data Interaction&lt;/strong&gt; の部分をモックして出力を固定します。具体的には&lt;a href=&quot;https://jsonplaceholder.typicode.com/&quot;&gt;JSONPlaceholder&lt;/a&gt;のREST APIの出力を固定する為に
HTTPのクライアント&lt;a href=&quot;https://square.github.io/okhttp/&quot;&gt;OkHttp&lt;/a&gt;をモックします。
扱いやすいように、 &lt;strong&gt;Unit Test本体&lt;/strong&gt; と、 &lt;strong&gt;モック&lt;/strong&gt; を1つのファイルにまとめちゃっています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/test/java/com/example/uitestsample/MainActivityUnitTest.kt&quot;&gt;MainActivityUnitTest.kt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MockServerDispatcher&lt;/code&gt;のクラスがそれになります。&lt;br /&gt;
ここでは、&lt;code class=&quot;highlighter-rouge&quot;&gt;Resp200&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Resp400&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Resp500&lt;/code&gt; の3つのClassを定義することで、以下の用に出力を固定します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Resp200&lt;/code&gt;：正常系の場合で、JSONを返す&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Resp400&lt;/code&gt;：異常系で、HTTP Statusの400を返す&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Resp500&lt;/code&gt;：異常系で、HTTP Statusの500を返す&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;-unit-testを書く&quot;&gt;＞ Unit Testを書く&lt;/h4&gt;
&lt;p&gt;2つのテストケースのうちの「HTTPレスポンスコード200でJSONを正しく受け取った場合の値の確認とViewに対する動作の確認」
の説明を、以下にインラインで行います。。
以下は、&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivityUnitTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mMockTestUtils&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnitTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sampleUnitDataFetchSuccessTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// vvv 正常系でJSONを返すよう指定
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mMockTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockServerBehaviorSwitcher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MockServerDispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resp200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;expectedResponse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockServerDispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedResponse&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mMainActivityPresenter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainActivityPresenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// vvv Viewに対する動作の確認の為にMainActivityViewContract()のClassをモック
&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mMainActivityViewContract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivityViewContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// vvv PresentorにモックしたMainActivityViewContract()を叩かせるようにセット
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mMainActivityPresenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mMainActivityViewContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// vvv 非同期での処理を同期で動作させるように変更
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mMockTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepareRxForTesting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// vvv ここでMockしたサーバを起動する
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mMockTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startMockServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// vvv 以下の2行で、サンプルアプリの接続先をMockしたサーバに入れ替える
&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mApiConnection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMockTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setupMockServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mApiConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// vvv PresenterのMethodを叩いて、動作させる
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mMainActivityPresenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getJsonSampleResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// vvv MainActivityViewContractのhandleSuccess()が叩かれれ、
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 固定したデータ（JSON）の取得ができているかを確認
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;argumentCaptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SinglePostResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mMainActivityViewContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handleSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mMockTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertDataClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// vvv ここでMockしたサーバを停止
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mMockTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shutdownMockServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;実行してみる&quot;&gt;実行してみる&lt;/h3&gt;
&lt;p&gt;実行方法には「コマンドラインから」、また「Android Studioから」の2つがあります。&lt;/p&gt;

&lt;h4 id=&quot;-コマンドラインから実行&quot;&gt;&amp;gt; コマンドラインから実行&lt;/h4&gt;

&lt;p&gt;Unit Testの全てを実行する&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./gradlew testDebugUnitTest;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;指定したClass、MethodのUnit Testを実行る&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Classを指定
// --tests のパラメータとして &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Package Name].[Class Name] を指定
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./gradlew testDebugUnitTest --tests com.example.uitestsample.MainActivityUnitTest;

// ClassとMethodを指定
// --tests のパラメータとして &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Package Name].[Class Name].[Method Name] を指定
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./gradlew testDebugUnitTest --tests com.example.uitestsample.MainActivityUnitTest.sampleUnitDataFetchSuccessTest;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;-android-studioから&quot;&gt;&amp;gt; Android Studioから&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Test&lt;/code&gt;のアノテーションかを書くとTestとして認識されます。
するとAndroid Studioだと下図の赤丸のように、その左側に &lt;span style=&quot;color:green&quot;&gt;▶︎&lt;/span&gt;（再生マーク）が表示されるので、
それをクリックすると実行することが可能です。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190710-unittest-androidstudio-00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;「Cloneしたらすぐに試せる」を目標に書きましたので、興味を持たれた方は試してみていただえると嬉しいです。&lt;br /&gt;
間違ってる！とかありましたらPR、またご指摘ください。&lt;/p&gt;</content><category term="Android" /><category term="CircleCI" /><category term="Firebase Test Lab" /><summary>これは何？
「AndroidアプリをCircleCIでCIする。」のUnit Testを説明した記事です。
サンプルアプリのUnit Testについて解説していきます。</summary></entry><entry><title>AndroidアプリをCircleCIでCIする。</title><link href="../2019/07/03/ci-android-00.html" rel="alternate" type="text/html" title="AndroidアプリをCircleCIでCIする。" /><published>2019-07-03T00:00:00+09:00</published><updated>2019-07-03T00:00:00+09:00</updated><id>../2019/07/03/ci-android-00</id><content type="html" xml:base="../2019/07/03/ci-android-00.html">&lt;h2 id=&quot;これは何&quot;&gt;これは何？&lt;/h2&gt;
&lt;p&gt;AndroidアプリのCI（継続的インテグレーション）環境を作って運用をしたときの経験を書き出したものです。
2019年7月時点でのものになりますので、時間経過によっては動作しない可能性もありますので予めご了承ください。&lt;/p&gt;

&lt;h4 id=&quot;更新履歴&quot;&gt;更新履歴&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;2019/7/12 関連記事「&lt;a href=&quot;./2019/07/10/ci-android-unittest-00.html&quot;&gt;AndroidアプリでのUnit Testについての解説&lt;/a&gt;」を公開&lt;/li&gt;
  &lt;li&gt;2019/7/7 DeployGateのローカル環境からの配信を追記&lt;/li&gt;
  &lt;li&gt;2019/7/6 公開&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;
&lt;p&gt;AndroidアプリのGitHubへのPushから、CircleCIでビルド、単体テスト、UIテスト（UI Animator &amp;amp; Espresso on Firebase Test Lab）、
そしてDeployGateへアプリをデプロイする、までの一連の流れの雛形のようなものだと考えてください。&lt;br /&gt;
また記事の内容は以下のように分割して書いていく予定です。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;テストケース、詳細ははともあれ、CircleCIでCIを回してみる&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./2019/07/10/ci-android-unittest-00.html&quot;&gt;AndroidアプリでのUnit Testについての解説&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;UI Testについて解説（仮）&lt;/li&gt;
  &lt;li&gt;Firebase Test Labを準備する（仮）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事は「テストケース、詳細ははともあれ、CircleCIでCIを回してみる」についてとなります。&lt;br /&gt;
動作に必須な設定等の説明をして、ローカル環境（手元のPC）からコマンドを使って手動で動作させ正常に動作するかすかの確認を行い、
その後に一連のビルドのプロセスをCircleCIで動かす、というの流れで説明します。&lt;/p&gt;

&lt;h2 id=&quot;ビルドの流れとインフラ&quot;&gt;ビルドの流れとインフラ&lt;/h2&gt;
&lt;p&gt;以下の図の流れでビルドからデプロイまで行います。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-circleci_firebase_00.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;開発者がGitHubにコードをCommitしPushする&lt;/li&gt;
  &lt;li&gt;CircleCIでビルドのプロセスが開始され、Unitテストが実行される&lt;/li&gt;
  &lt;li&gt;UIテスト実行の為、CicleCIがFirebaseに向けてアプリ、テストケースを配信しUIテストを実行する&lt;/li&gt;
  &lt;li&gt;Firebase Test LabでUIテストが実行が完了したらレポートをCircleCIに配信する&lt;/li&gt;
  &lt;li&gt;DeployGateに向けてアプリを配信する&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;利用するインフラ&quot;&gt;利用するインフラ&lt;/h3&gt;
&lt;p&gt;上記のプロセスを実行する為に、以下のインフラを利用します。おなじみの名前ばかりかもしれませんが・・・&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p style=&quot;font-weight:bold;margin:0;&quot;&gt;&lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;Gitで操作するリポジトリを提供するクラウドサービス&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p style=&quot;font-weight:bold;margin:0;&quot;&gt;&lt;a href=&quot;https://circleci.com/&quot;&gt;CircleCI&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;CIを行ってくれるクラウドサービス&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p style=&quot;font-weight:bold;margin:0;&quot;&gt;&lt;a href=&quot;https://console.firebase.google.com/&quot;&gt;Firebase Test Lab&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;Google社が提供するmBaaSが提供するサービスの1つで、UIテスト（Espresso、UI Automator 2.0、XCTest）をクラウドで行うサービス&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p style=&quot;font-weight:bold;margin:0;&quot;&gt;&lt;a href=&quot;https://deploygate.com/&quot;&gt;Deploy Gate&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;ストア（Google Play、App Store）を通さないアプリ配布を実現するサービス（ベータテスト等に利用できる）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;今回利用するandroidのサンプルアプリ&quot;&gt;今回利用するAndroidのサンプルアプリ&lt;/h3&gt;

&lt;h4 id=&quot;-サンプルアプリのコード&quot;&gt;＞ サンプルアプリのコード&lt;/h4&gt;
&lt;p&gt;Unit Test、UI Testを行う為に強引に実装している部分があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android&quot;&gt;UI Test Sample App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;-機能の説明&quot;&gt;＞ 機能の説明&lt;/h4&gt;
&lt;p&gt;サンプルアプリの機能は以下の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;画面右下の赤色のFabをタップするとデバイスへのファイル書き込みの許可を求められる。&lt;/li&gt;
  &lt;li&gt;デバイスへのファイル書き込みの許可の状態に関係なく、画面中央の文字列「Hello World!!」が「1」に変化する&lt;/li&gt;
  &lt;li&gt;更に、画面右下の赤色のFabをタップすると、タップ毎に1つづつインクリメントされた数字が表示される&lt;/li&gt;
  &lt;li&gt;画面右上の3点リーダをタップすると「Reset Counter」のボタンが出現し、タップするとカウンタが「0」に変化する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こんな↓動作をするアプリです。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-uitestsampleapp_00.png&quot; style=&quot;border-radius:8px&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;サンプルアプリの実装のアーキテクチャ&quot;&gt;サンプルアプリの実装のアーキテクチャ&lt;/h2&gt;
&lt;p&gt;サンプルアプリのアーキテクチャはMVP(Model-View-Presenter)で構成されていて、Activityは1つです。&lt;br /&gt;
また今回のサンプルアプリの仕様（上記）ですと、Model（DB、API等のデータソース）が必要のないアプリになってしまいますが、
Unit Testの為、外部のREST APIへ接続を行い、データを取得しConsole出力をするロジックが無駄に実装しています。&lt;br /&gt;
アーキテクチャは図にすると以下のような構成です。図内では、Classが1つのブロックになっていて、ブロックの上部に白文字はInterfaceです。
例えば、MainActivityPresenterはMainActivityPresenterContractのInterfaceで構成されたClass、
よって、MainActivityInteractorはInterfaceを規定していないClassであることを表しています。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-mvp-diagram-00.png&quot; width=&quot;90%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;それでは、できるだけサクッとCircleCIでCIを回してみましょう。&lt;/p&gt;

&lt;h2 id=&quot;事前準備リポジトリを作成する&quot;&gt;事前準備：リポジトリを作成する&lt;/h2&gt;
&lt;p&gt;実際に動作させる場合は、上記のURLのコードをFork等をして自前で専用のリポジトリGitHubにご用意ください。&lt;/p&gt;

&lt;h2 id=&quot;unit-testについて&quot;&gt;&lt;a name=&quot;aboutunittest&quot;&gt;Unit Testについて&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;（関連記事「&lt;a href=&quot;./2019/07/10/ci-android-unittest-00.html&quot;&gt;AndroidアプリでのUnit Testについての解説&lt;/a&gt;」）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://junit.org/junit4/&quot;&gt;JUnit&lt;/a&gt;を使ってUnit Testを実行します。AndroidでのUnit Testの定番です。
モックは&lt;a href=&quot;https://site.mockito.org/&quot;&gt;Mockito&lt;/a&gt;を使います。
サンプルアプリのUnit TestはPresenterとやり取りを横取りする形で行います。
上の図の &lt;strong&gt;「Point for Unit Testing」&lt;/strong&gt; と書かれた矢印のポイントがそこです。&lt;/p&gt;

&lt;h3 id=&quot;unit-testの概要&quot;&gt;Unit Testの概要&lt;/h3&gt;
&lt;p&gt;コードは&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/tree/master/app/src/test/java/com/example/uitestsample&quot;&gt;このディレクトリ&lt;/a&gt;に配置しています。&lt;/p&gt;

&lt;p&gt;Unit Testのスクリプトはこのファイルです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/test/java/com/example/uitestsample/MainActivityUnitTest.kt&quot;&gt;MainActivityUnitTest.kt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;共通で使うであろう機能をMethod化して集めたClassがこちら。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/test/java/com/example/uitestsample/unittestuitls/UnitTestUitls.kt&quot;&gt;unittestuitls/UnitTestUitls.kt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;テストとしては、先程説明したModelにアプリの動作に対しては無駄に実装したREST APIへ接続するロジックを使います。
REST APIからデータを取得し、取得したデータを元に正しくViewに反映される動作をするかの確認を行うのが目的です。&lt;br /&gt;
サンプルアプリの接続先REST APIは&lt;a href=&quot;https://jsonplaceholder.typicode.com/&quot;&gt;JSONPlaceholder&lt;/a&gt;です。接続するURLは&lt;a href=&quot;https://jsonplaceholder.typicode.com/comments?postId=1&quot;&gt;/comments?postId=1&lt;/a&gt;で、&lt;code class=&quot;highlighter-rouge&quot;&gt;postId&lt;/code&gt;が同一であれば常に同じ値のJSONを返してくれます。常に同じJSONを返してくれるとはいえ、Unit Testではより確実性を高めたい、つまり、相手のサーバの状態に関係なく確実に同じJSONを取得できることを保証したいです。ですので、このUnit Testでは&lt;a href=&quot;https://site.mockito.org/&quot;&gt;Mockito&lt;/a&gt;を使ってJSONPlaceholderのAPIをMock（モック）することで確実に同一のJSONを受け取れるようにしています。&lt;br /&gt;
&lt;br /&gt;
テストのケースは2つです。その内容は以下の通りです。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTTPレスポンスコード200でJSONを正しく受け取った場合の値の確認とViewに対する動作の確認&lt;/li&gt;
  &lt;li&gt;HTTPレスポンスコード500を受け取った場合のViewに対する動作確認&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお、Unit Testの書き方（お作法）、テストケース詳細は別エントリの&lt;a href=&quot;./2019/07/10/ci-android-unittest-00.html&quot;&gt;AndroidアプリでのUnit Testについての解説&lt;/a&gt;で説明しています。&lt;/p&gt;

&lt;h3 id=&quot;unit-testをローカル環境で動作させてみる&quot;&gt;Unit Testをローカル環境で動作させてみる&lt;/h3&gt;
&lt;p&gt;手元で動作させてみましょう。Terminalでコードのトップに移動して以下のコマンドを実行すると、こんな出力が出てくるはずです。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./gradlew :app:testDebugUnitTest;

&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;Task :app:testDebugUnitTest
com.example.uitestsample.MainActivityUnitTest &amp;gt; sampleUnit500ServerErrorTest PASSED
com.example.uitestsample.MainActivityUnitTest &amp;gt; sampleUnitDataFetchSuccessTest PASSED
com.example.uitestsample.MainActivityUnitTest &amp;gt; sampleUnit400BadRequestTest PASSED

&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;Task :app:testReleaseUnitTest
com.example.uitestsample.MainActivityUnitTest &amp;gt; sampleUnit500ServerErrorTest PASSED
com.example.uitestsample.MainActivityUnitTest &amp;gt; sampleUnitDataFetchSuccessTest PASSED
com.example.uitestsample.MainActivityUnitTest &amp;gt; sampleUnit400BadRequestTest PASSED

BUILD SUCCESSFUL &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;8s
40 actionable tasks: 10 executed, 30 up-to-date
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;「BUILD SUCCESSFUL in XXs」&lt;/strong&gt; が出たら &lt;strong&gt;Unit TestはテストケースをすべてSuccessで終了した&lt;/strong&gt; という意味になります。また、ここでWarning等のメッセージが出た場合、できる限り修正してメッセージが表示されないようにすることをオススメします。&lt;br /&gt;
これでUnit Testの準備は完了です。&lt;/p&gt;

&lt;h2 id=&quot;ui-testについて&quot;&gt;UI Testについて&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/training/testing/espresso&quot;&gt;Espresso&lt;/a&gt;、&lt;a href=&quot;https://developer.android.com/training/testing/ui-automator&quot;&gt;UI Automator&lt;/a&gt;を使っています。それぞれの特徴は以下の通りです。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-uitesttool_00.png&quot; width=&quot;50%&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;espresso&quot;&gt;Espresso&lt;/h4&gt;
&lt;p&gt;「to write concise, beautiful, and reliable Android UI tests」と公式サイトには説明されています。特定のアプリのUIに対してのスクリプトで動作をさせることを可能にするテストフレームワークです。単一のアプリの操作を自動化する場合に使うとよいでしょう。Google社が開発していますので、Anroidの公式のテストツールと言ってよいでしょう。&lt;/p&gt;

&lt;h4 id=&quot;ui-automator&quot;&gt;UI Automator&lt;/h4&gt;
&lt;p&gt;「suitable for cross-app functional UI testing across system and installed apps.」と公式サイトに説明されている通りで、Espressoと比べると、よりAndroidのOSに近い側に位置しているテストフレームワークで、複数アプリを行き来するよう動作をスクリプトで定義することの可能です。Espressoとは違い、複数のアプリの操作を自動化する場合に使うとよいでしょう。こちらもEspressoと同じくGoogle社が開発していますので、Anroidの公式のテストツールと言ってよいでしょう。&lt;/p&gt;

&lt;h3 id=&quot;ui-testの概要&quot;&gt;UI Testの概要&lt;/h3&gt;
&lt;p&gt;コードは&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/tree/master/app/src/androidTest/java/com/example/uitestsample&quot;&gt;このディレクトリ&lt;/a&gt;に配置しています。&lt;/p&gt;

&lt;p&gt;UI Testのスクリプトはこのファイルです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/MainActivityInstrumentedTest.kt&quot;&gt;MainActivityInstrumentedTest.kt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;共通で使うであろう機能をMethod化して集めたClassがこちら。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/uitestutils/UiTestUtils.kt&quot;&gt;uitestutils/UiTestUtils.kt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;テストのケースは3つです。その内容は以下の通りです。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;パッケージ名を確認する&lt;/li&gt;
  &lt;li&gt;アプリ起動時の画面の文字列の確認をする&lt;/li&gt;
  &lt;li&gt;アプリ起動後、各ボタンが正しく機能し、画面表示が仕様通り更新されるかを確認する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお、UI Test（Espresso、UI AUtomator）の書き方（お作法）、テストケース詳細は別エントリの「UI Testについての解説（仮）」で説明する予定です。&lt;/p&gt;

&lt;h3 id=&quot;ui-testをローカル環境で動作させてみる&quot;&gt;UI Testをローカル環境で動作させてみる&lt;/h3&gt;
&lt;p&gt;手元で動作させてみましょう。Terminalのコマンドラインからコードのトップディレクトリに移動して以下のコマンドを実行すると、こんな↓が出力が出てくるはずです。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./gradlew :app:connectedAndroidTest; // ← ./gradlew cAT でもOK

&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;Task :app:connectedDebugAndroidTest
01:52:09 V/ddms: execute: running am get-config
01:52:09 V/ddms: execute &lt;span class=&quot;s1&quot;&gt;&#39;am get-config&#39;&lt;/span&gt; on &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt; : EOF hit. Read: -1
01:52:09 V/ddms: execute: returning
01:52:09 D/app-debug.apk: Uploading app-debug.apk onto device &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt;
01:52:09 D/Device: Uploading file onto device &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt;
....
01:52:13 V/ddms: execute: running pm install -r -t &lt;span class=&quot;s2&quot;&gt;&quot;/data/local/tmp/test-services-1.0.2.apk&quot;&lt;/span&gt;
01:52:13 V/ddms: execute &lt;span class=&quot;s1&quot;&gt;&#39;pm install -r -t &quot;/data/local/tmp/test-services-1.0.2.apk&quot;&#39;&lt;/span&gt; on &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt; : EOF hit. Read: -1
01:52:13 V/ddms: execute: returning
01:52:13 V/ddms: execute: running rm &lt;span class=&quot;s2&quot;&gt;&quot;/data/local/tmp/test-services-1.0.2.apk&quot;&lt;/span&gt;
01:52:13 V/ddms: execute &lt;span class=&quot;s1&quot;&gt;&#39;rm &quot;/data/local/tmp/test-services-1.0.2.apk&quot;&#39;&lt;/span&gt; on &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt; : EOF hit. Read: -1
01:52:13 V/ddms: execute: returning
01:52:13 D/app-debug-androidTest.apk: Uploading app-debug-androidTest.apk onto device &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt;
01:52:13 D/Device: Uploading file onto device &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt;
....
androidx.test.internal.runner.junit3.DelegatingFilterableTestSuite &amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;API_27_Pixel_2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AVD&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; - 8.1.0] SKIPPED
01:52:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS_CODE: -3
01:52:21 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;androidx.test.internal.runner.junit3.DelegatingTestSuite
01:52:21 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: &lt;span class=&quot;nv&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3
01:52:21 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;AndroidJUnitRunner
01:52:21 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: &lt;span class=&quot;nv&quot;&gt;numtests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8
....
01:53:07 V/InstrumentationResultParser: Time: 48.21
01:53:07 V/InstrumentationResultParser:
01:53:07 V/InstrumentationResultParser: OK &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3 tests&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
....
01:53:07 V/ddms: execute: returning
01:53:07 V/ddms: execute: running pm uninstall com.example.uitestsample.test
01:53:07 V/ddms: execute &lt;span class=&quot;s1&quot;&gt;&#39;pm uninstall com.example.uitestsample.test&#39;&lt;/span&gt; on &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt; : EOF hit. Read: -1
01:53:07 V/ddms: execute: returning
01:53:07 V/ddms: execute: running pm uninstall com.example.uitestsample
01:53:07 V/ddms: execute &lt;span class=&quot;s1&quot;&gt;&#39;pm uninstall com.example.uitestsample&#39;&lt;/span&gt; on &lt;span class=&quot;s1&quot;&gt;&#39;emulator-5554&#39;&lt;/span&gt; : EOF hit. Read: -1
01:53:07 V/ddms: execute: returning

BUILD SUCCESSFUL &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;1m 1s
51 actionable tasks: 10 executed, 41 up-to-date
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Unit Testのときと同じく、&lt;strong&gt;「BUILD SUCCESSFUL in XXs」&lt;/strong&gt; が出たら &lt;strong&gt;UI TestはテストケースをすべてSuccessで終了した&lt;/strong&gt; という意味になります。また、ここもUnit Testのときと同様にWarning等のメッセージが出てきたら、でいる限り修正することをオススメします。&lt;/p&gt;

&lt;h2 id=&quot;firebase-test-labでテストを行う&quot;&gt;Firebase Test Labでテストを行う&lt;/h2&gt;

&lt;h3 id=&quot;firebase-test-labとは&quot;&gt;Firebase Test Labとは&lt;/h3&gt;

&lt;p&gt;Firebase Test LabはFirebaseがの1つのサービスとして提供されているクラウドでUI Testを行うプラットフォームです。Android(Espresso、UI Automator)、iOS(XCTest)で書かれたテストの実行に対応しています。操作は以下の2つの方法が提供されています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.firebase.google.com/&quot;&gt;ブラウザから操作を行う&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Google Cloud SDKのCLIを利用してコマンドラインから&lt;a href=&quot;https://console.cloud.google.com/marketplace/details/google/testing.googleapis.com?project=uitest-sample-android&amp;amp;folder=&amp;amp;organizationId=&quot;&gt;Cloud Testing API&lt;/a&gt;で動作させる方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どちらもの方法を使っても結果はブラウザ上で動作している&lt;a href=&quot;console.firebase.google.com&quot;&gt;FirebaseのConsole&lt;/a&gt;（下図↓）から閲覧が可能になります。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-console-firebasetestlab_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;ここではGoogle Cloud SDKのCLIからCloud Testing APIを使う方法で実行します。
Google Cloud SDKのCLIから使う場合は以下の2つのAPIを有効にする必須です。必ず以下のリンクから利用するプロジェクトで有効にしてください。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.cloud.google.com/marketplace/details/google/testing.googleapis.com&quot;&gt;Cloud Testing API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.cloud.google.com/marketplace/details/google/toolresults.googleapis.com&quot;&gt;Cloud Tool Results API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（Firebase Test Labの設定については「Firebase Test Labを準備する（仮）」で詳しく行う予定です。）&lt;/p&gt;

&lt;h3 id=&quot;firebase-test-labをローカル環境で動作させてみる&quot;&gt;Firebase Test Labをローカル環境で動作させてみる&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://firebase.google.com/docs/test-lab&quot;&gt;FirebaseでのProjectの設定&lt;/a&gt;、GCPのアカウントの準備、&lt;a href=&quot;https://cloud.google.com/sdk/downloads&quot;&gt;Google Cloud SDKのCLIは準備&lt;/a&gt;は済んでいると仮定します。&lt;br /&gt;
また既にローカルでUIテストの動作確認も済んでいますので、早速UIテストをFirebase Test Labで動かしてみます。&lt;br /&gt;
（「Firebase Test Labを準備する（仮）」で詳しく説明する予定です。）&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Cloud Testing APIを有効にしたアカウントでログインし、CLIの向き先Projectを切替える
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud auth;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;project &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PROJECT ID];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;続いて、Cloud Testing APIでUIテストを実行する為に以下をコンソールで実行します。&lt;br /&gt;
環境変数で変数を指定して実行していますが、ここではテキストを入力してもOKです。
CircleCIでは環境変数で指定することが望ましいのでそれに習っています。
この記事内の他の項目でも環境変数を使う理由は同一です。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s2&quot;&gt;&quot;+%Y%m%d_%H%M&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BK_OBJ_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[保存するバケットのディレクトリ名]/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TIME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[今回のテストを保存するディレクトリ]&quot;&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOOGLE_PROJECT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[PROJECT ID]&quot;&lt;/span&gt;;

// コマンドを改行するときは末尾のスペースを忘れずに入れてください。
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud firebase &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;android run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --type instrumentation &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --app ./app/build/outputs/apk/debug/app-debug.apk &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --test ./app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --test-targets &lt;span class=&quot;s2&quot;&gt;&quot;class com.example.uitestsample.MainActivityInstrumentedTest&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --results-dir &lt;span class=&quot;nv&quot;&gt;$BK_OBJ_NAME&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --results-bucket cloud-test-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOOGLE_PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --directories-to-pull /sdcard/uitest/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --device &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Pixel2,version&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;26,locale&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_US,orientation&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;portrait &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --use-orchestrator &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --timeout 120s;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;実行開始が成功するとFirebaseのConsoleにこんな形↓で1行追加されます。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-firebase-begin-test_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;テストが終了しするとこのような出力がコンソールにされます。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Have questions, feedback, or issues? Get support by visiting:
  https://firebase.google.com/support/

Uploading &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;./app/build/outputs/apk/debug/app-debug.apk] to Firebase Test Lab...
Uploading &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;./app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk] to Firebase Test Lab...
Raw results will be stored &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;your GCS bucket at &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.developers.google.com/storage/browser/[PROJECT ID]/cloud-test-uitest-sample-android/20190705-xxxxxx02/]

Test &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;matrix-3dp8juo0wx533] has been created &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the Google Cloud.
Firebase Test Lab will execute your instrumentation &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;on 1 device&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
Creating individual &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;executions...done.

Test results will be streamed to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.firebase.google.com/project/[PROJECT ID]/testlab/histories/bh.xxxxxxxxx/matrices/918190477175429xxxx].
16:25:19 Test is Pending
16:25:40 Starting attempt 1.
16:25:40 Test is Running
16:26:42 Started logcat recording.
16:26:42 Preparing device.
16:27:15 Logging &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;to Google account on device.
16:27:15 Installing apps.
16:27:28 Retrieving Pre-Test Package Stats information from the device.
16:27:28 Retrieving Performance Environment information from the device.
16:27:28 Started crash detection.
16:27:28 Started crash monitoring.
16:27:28 Started performance monitoring.
16:27:42 Started video recording.
16:27:42 Starting instrumentation test.
16:28:21 Completed instrumentation test.
16:28:34 Stopped performance monitoring.
16:28:41 Stopped crash monitoring.
16:28:47 Stopped logcat recording.
16:28:47 Retrieving Post-test Package Stats information from the device.
16:28:47 Logging out of Google account on device.
16:28:53 Done. Test &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 51 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;secs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
16:28:53 Starting results processing. Attempt: 1
16:29:00 Completed results processing. Time taken &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;secs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
16:29:00 Test is Finished

Instrumentation testing complete.

More details are available at &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.firebase.google.com/project/[PROJECT ID]/testlab/histories/bh.xxxxxxxxx/matrices/918190477175429xxxx].
┌─────────┬──────────────────────────┬─────────────────────┐
│ OUTCOME │     TEST_AXIS_VALUE      │     TEST_DETAILS    │
├─────────┼──────────────────────────┼─────────────────────┤
│ Passed  │ Pixel2-26-en_US-portrait │ 3 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;cases passed │
└─────────┴──────────────────────────┴─────────────────────┘
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;出力されている &lt;strong&gt;GCS bucket&lt;/strong&gt;、&lt;strong&gt;More details are availabl at&lt;/strong&gt; として表示されているURLにアクセスするとテスト結果が書き出されているはずです。閲覧はブラウザから可能です。&lt;/p&gt;

&lt;h2 id=&quot;deploygateを準備する&quot;&gt;DeployGateを準備する&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.deploygate.com/docs/quickstart#section--&quot;&gt;ここ&lt;/a&gt;を参考に、&lt;strong&gt;サインアップ&lt;/strong&gt;、&lt;strong&gt;アプリをアップロード&lt;/strong&gt; まで済ませましょう。&lt;/p&gt;

&lt;h3 id=&quot;deploygateにローカル環境から配信してみる&quot;&gt;DeployGateにローカル環境から配信してみる&lt;/h3&gt;
&lt;h4 id=&quot;deplotgateのapi-keyを取得&quot;&gt;&lt;a name=&quot;deploygateapikey&quot;&gt;DeplotGateのAPI keyを取得&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;DeployGateのサイトにログインをして&lt;a href=&quot;https://deploygate.com/settings&quot;&gt;https://deploygate.com/settings&lt;/a&gt;の最下段に表示されています。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-deploygate_key_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;これを環境変数として設定します。
ついでにユーザID（DeployGateのユーザーID）とAPKへのPathも環境変数に設定してしまいましょう。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEPLOYGATE_API_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[取得したAPI key]&quot;&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[DeployGateのユーザID]&quot;&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APK_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;app/build/outputs/apk/debug/app-debug.apk;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;deploygateに配信する&quot;&gt;&lt;a name=&quot;deploytodeploygate&quot;&gt;DeployGateに配信する&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;以下のコマンドで配信します。メッセージをリッチにするために環境変数を少々追加しています。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s2&quot;&gt;&quot;+%Y/%m/%d %H:%M&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;COMMIT_HASH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git log --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%H&quot;&lt;/span&gt; -n 1 | cut -c 1-8&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -F &lt;span class=&quot;s2&quot;&gt;&quot;file=@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APK_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -F &lt;span class=&quot;s2&quot;&gt;&quot;token=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEPLOYGATE_API_KEY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -F &lt;span class=&quot;s2&quot;&gt;&quot;message=Build by CircleCI &amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;COMMIT_HASH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt; (&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TIME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt; https://deploygate.com/api/users/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/apps
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;このような出力されるはずです。&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;error&quot;:false&lt;/code&gt;と表示されていたら配信成功です。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;:false,&lt;span class=&quot;s2&quot;&gt;&quot;results&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;UITest Sample App&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;package_name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.example.uitestsample&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;labels&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;os_name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Android&quot;&lt;/span&gt;,..../secure.gravatar.com/avatar/410d1a2cc20ac9675664df7de253156b?s&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;218&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0026d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mm&lt;span class=&quot;s2&quot;&gt;&quot;}}}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;DeployGateのウェブ管理コンソール（URLは&lt;code class=&quot;highlighter-rouge&quot;&gt;https://deploygate.com/users/[DeployGateのユーザID]/apps/[アプリのPackage名]&lt;/code&gt;）では、以下のように赤四角のリストにアイテムが追加されているはずです。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-deploygateadminconsole_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
ビルドのプロセスをローカル環境から手動で回すことの確認まで行いましたので、CircleCI上で動かしてみます。&lt;/p&gt;

&lt;h2 id=&quot;circleciの設定をする&quot;&gt;CircleCIの設定をする&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/.circleci/config.yml&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.circleci/config.yml&lt;/code&gt;&lt;/a&gt;が設定ファイルになります。&lt;br /&gt;
動作させるには環境変数として&lt;code class=&quot;highlighter-rouge&quot;&gt;DEPLOYGATE_API_KEY&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GCLOUD_SERVICE_KEY&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GOOGLE_PROJECT_ID&lt;/code&gt;の設定が必須です。
それぞれの値の取得方法は以下になります。&lt;/p&gt;

&lt;h3 id=&quot;deploygate_api_key&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DEPLOYGATE_API_KEY&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;DeployGateのサイトにログインをして&lt;a href=&quot;https://deploygate.com/settings&quot;&gt;https://deploygate.com/settings&lt;/a&gt;の最下段に表示されています。
（上記 &lt;strong&gt;&lt;a href=&quot;#deploygateapikey&quot;&gt;「DeplotGateのAPI keyを取得」&lt;/a&gt;&lt;/strong&gt; の項目で説明しているAPI keyと同じです）&lt;/p&gt;

&lt;h3 id=&quot;google_project_idgcloud_service_key&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GOOGLE_PROJECT_ID&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GCLOUD_SERVICE_KEY&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GOOGLE_PROJECT_ID&lt;/code&gt;はJSON形式のファイルの内容をbase64にした値です。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;下↓の左図のように(1)でPROJECT_IDを選択し（ここで選択した文字列が&lt;code class=&quot;highlighter-rouge&quot;&gt;GOOGLE_PROJECT_ID&lt;/code&gt;となります）、(2)のように [IAM &amp;amp; admin] &amp;gt; [Service account] を選択してアカウントを作成します&lt;/li&gt;
  &lt;li&gt;次に[IAM &amp;amp; admin]を表示し、下↓の右図のように先程作成したアカウントの右側の鉛筆マークをクリックして、&lt;strong&gt;Firebase Test Lab Admin&lt;/strong&gt; を追加します&lt;/li&gt;
  &lt;li&gt;再度[IAM &amp;amp; admin] &amp;gt; [Service account]を表示して、作成したアカウントの右側にある3点リーダをクリックしてJSONフォーマットのキーを作成しダウンロードします&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-serviceaccount_00.png&quot; width=&quot;40%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee; margin-right: 10px&quot; /&gt;
&lt;img src=&quot;../images/2019/07/20190703-serviceaccount_01.png&quot; width=&quot;55%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;そしてダウンロードしたJSONフォーマットのキーをbase64形式に書き出します。この文字列をCircleCIに環境変数&lt;code class=&quot;highlighter-rouge&quot;&gt;GCLOUD_SERVICE_KEY&lt;/code&gt;として登録してください。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;base64 -i &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PATH TO JSON FILE];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;cicleciに環境変数として登録&quot;&gt;CicleCIに環境変数として登録&lt;/h2&gt;
&lt;p&gt;取得した3つの値を&lt;code class=&quot;highlighter-rouge&quot;&gt;DEPLOYGATE_API_KEY&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GOOGLE_PROJECT_ID&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GCLOUD_SERVICE_KEY&lt;/code&gt;を以下の図のように登録します。&lt;br /&gt;
対象のプロジェクトを選択し[Settings]を表示して、左ペインのメニューから[BUILD SETTINGS] &amp;gt; [Environment Variables]に保存します。完了すると以下の図のようになります。
画面上は指定した値の最後の4文字のみ表示された状態となります。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-circleci-stting_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;リポジトリにpushしてcircleci上でbuildを動かす&quot;&gt;リポジトリにPushしてCircleCI上でBuildを動かす&lt;/h2&gt;

&lt;p&gt;設定は完了しましたので、準備したリポジトリのMasterブランチにコードをPushします。&lt;br /&gt;
PushするとCircleCI上でBuildのプロセスが動き始めます。今後はMasterにPush、またはMergeするとBuildプロセスが走るようになります。&lt;/p&gt;

&lt;h3 id=&quot;実行結果のレポートを閲覧する&quot;&gt;実行結果のレポートを閲覧する&lt;/h3&gt;
&lt;p&gt;ビルドの結果はCircleCIのサイトから確認することが可能です。成功すると以下のようになるでしょう。&lt;br /&gt;
また、Unit Testの結果は &lt;strong&gt;Artifacts&lt;/strong&gt; のタブから確認することが可能です。（下図）&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-circleci-result_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;UI Testのも確認は可能です。Successの場合はそれでよいのですが、Failしている場合の詳細結果は下図のようにFirebaseのConsoleから確認してください。また、下図の赤丸内の &lt;strong&gt;Test Result&lt;/strong&gt; をクリックするとその他のデータが閲覧可能となっています。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/07/20190703-firebase-access-to-gcp_00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;deploygateへの配信を確認&quot;&gt;DeployGateへの配信を確認&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;#deploytodeploygate&quot;&gt;「DeployGateに配信する」&lt;/a&gt;&lt;/strong&gt; の項目での結果のようにリストにアイテムが追加されているはずです。&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;AndroidアプリをCircleCI上でCIする流れを説明してきました。この流れでCIを回していきます。長くなってしまいましたが、いかがでしたでしょうか？&lt;br /&gt;
この流れを作るのに多くのサイトにお世話になりました。この記事をご覧になっている方々がサクっとCI環境を作成することができることで、
世界を変えるであろう素晴らしいアプリの開発に時間を注ぐことに少しでもお力になれたら嬉しいです。&lt;br /&gt;
なお、今回のUI Testはネットワークアクセスに依存する部分が少なかったのですが、そうでない場合は結果が不安定になりがちですので、通信中なのか、通信は完了しているのかについての何らかの目印をつける、だったりその他の工夫が必要になります。そういったところも何らかの形で共有していきたいと思っています。&lt;/p&gt;

&lt;p&gt;それでは、引き続き詳細な解説についてもがんばって書いていきますのでよろしくお願いします。&lt;/p&gt;</content><category term="Android" /><category term="Espresso" /><category term="CircleCI" /><category term="Firebase Test Lab" /><category term="DeployGate" /><summary>これは何？
AndroidアプリのCI（継続的インテグレーション）環境を作って運用をしたときの経験を書き出したものです。
2019年7月時点でのものになりますので、時間経過によっては動作しない可能性もありますので予めご了承ください。</summary></entry><entry><title>アメリカン中華の代表格？のバーボンチキンを作ってみた</title><link href="../2019/06/29/bourbon-chicken.html" rel="alternate" type="text/html" title="アメリカン中華の代表格？のバーボンチキンを作ってみた" /><published>2019-06-29T20:00:00+09:00</published><updated>2019-06-29T20:00:00+09:00</updated><id>../2019/06/29/bourbon-chicken</id><content type="html" xml:base="../2019/06/29/bourbon-chicken.html">&lt;div&gt; &lt;/div&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
  &lt;img src=&quot;../images/2019/06/20190629-bourbonchicken.jpg&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;アメリカン中華の代表格かな？って思ってるバーボンチキン。微妙に焦がすのがポイントな料理。たまに無性に食べたくなるので作ってみました。&lt;br /&gt;
&lt;a href=&quot;http://bit.ly/31S62b4&quot;&gt;もとネタのレシピ&lt;/a&gt;から調味料（特に、砂糖の量！）をアレンジしています。&lt;br /&gt;
もしよかったら作ってみてください！白いご飯に載せて食べると美味しいです😋&lt;/p&gt;

&lt;h3 id=&quot;バーボンチキンアメリカン中華&quot;&gt;バーボンチキン（アメリカン中華？）&lt;/h3&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;script src=&quot;https://widgets.cookpad.com/recipes/5719021.js?k=5ba150f3&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/div&gt;</content><category term="Cookpad" /><category term="料理" /><summary></summary></entry><entry><title>Sonic Boom! (Google I/O’19)</title><link href="../2019/05/15/sonicboom-googleio.html" rel="alternate" type="text/html" title="Sonic Boom! (Google I/O&#39;19)" /><published>2019-05-15T00:00:00+09:00</published><updated>2019-05-15T00:00:00+09:00</updated><id>../2019/05/15/sonicboom-googleio</id><content type="html" xml:base="../2019/05/15/sonicboom-googleio.html">&lt;p&gt;&lt;br /&gt;
2019年5月7〜9日まで、毎年Google社が米国カリフォルニア州で開催している開発者会議「Google I/O」に参加してきました。&lt;br /&gt;
&lt;br /&gt;
その中でも&lt;strong&gt;「これは！！」&lt;/strong&gt;と感じたセッションを紹介していこうと思います。
&lt;br /&gt;&lt;br /&gt;
第一弾は&lt;strong&gt;「&lt;a href=&quot;https://events.google.com/io/schedule/events/ad90afc2-bf1f-4318-abc0-d7e8df67bf07&quot;&gt;Sonic Boom! Audio Programming on Android and Chrome&lt;/a&gt;」&lt;/strong&gt;です。&lt;br /&gt;
「Step by StepでAndroid、Webでのコーディング方法を追うことができる」という意味で、開発を行うのには非常に参考になると思っています。&lt;br /&gt;
（&lt;a href=&quot;https://www.digitalhearts.com/&quot;&gt;デジタルハーツ&lt;/a&gt;所属としての参加なのに、アプリケーションテストの内容でなくてごめんなさい😅）
&lt;br /&gt;&lt;br /&gt;
セッションの動画は↓です。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot; style=&quot;box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/-GaD0RCp-Q0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;セッションの概要&quot;&gt;セッションの概要&lt;/h2&gt;
&lt;p&gt;端的に説明すると、UIパーツはそれぞれのプラットフォーム（AndroidとWeb）で開発するものの、オーディオエンジンはC++で書かれたコードを共有して同じアプリを
ライブコーディングで作ってしまう、という内容です。&lt;br /&gt;
C++で書かれたオーディオエンジンを走らせる部分を技術用語で表現すると、&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Android：&lt;a href=&quot;https://ja.wikipedia.org/wiki/Native_development_Kit&quot;&gt;NDK（Native Development Kit）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Web（Chrome）：&lt;a href=&quot;https://ja.wikipedia.org/wiki/WebAssembly&quot;&gt;WebAssembly(WASM)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で実行することになります。&lt;/p&gt;

&lt;p&gt;それでは、内容を説明してきます。（動画のタイムラインと前後する部分があります）&lt;/p&gt;

&lt;h2 id=&quot;プレゼンター&quot;&gt;プレゼンター&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://events.google.com/io/schedule/events/speakers/6f16d338-6253-4322-a12c-bef1ffb12d0e&quot;&gt;Magnus Berger&lt;/a&gt;：CTO at Propellerhead Software&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://events.google.com/io/schedule/events/speakers/ec237b6e-e701-464f-933e-a3a11324231d&quot;&gt;Hongchan Choi&lt;/a&gt;：Software Engineer(Chrome) at Google&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://events.google.com/io/schedule/events/speakers/364a11ff-ba21-423c-9730-5aa9347c2c29&quot;&gt;Don Turner&lt;/a&gt;：Developer Advocate(Android) at Google&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;背景など&quot;&gt;背景など&lt;/h2&gt;
&lt;p&gt;AndroidとChromeの話を同時にするのは少し奇妙だが以下のような同じ構造だったり、背景があるとのことです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;システム：Callbackを基本としたオーディオを再生する仕組みを持っている&lt;/li&gt;
  &lt;li&gt;遅延：Audio Latency（往復の）が約20ミリ秒（Pixelデバイス）&lt;/li&gt;
  &lt;li&gt;MIDIサポート：AndroidはMidiManagerAPI、またAndroid QからはハイパフォーマンスなAMidiが搭載され、Chromeでは2015年からWeb MIDI APIでサポートされている&lt;/li&gt;
  &lt;li&gt;Activeユーザー：AndroidもChromeもそれぞれ20億人以上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そしてこれらの利点を活かしている1つの良い例が&lt;a href=&quot;https://www.bandlab.com/&quot;&gt;BandLab&lt;/a&gt;というマルチプラットフォームで提供されている音楽制作アプリっとのことで
紹介されています。（2:49）&lt;br /&gt;
BandLabはSocial Music Platformで、クロスプラットフォーム（スマホ、Web向け）に提供しており、録音、編集の作業を物理的な場所、プラットフォームを問わず
どこでも行うことが可能。そして作成したデータはクラウドに保存される仕組みです。現在&lt;strong&gt;700万のユーザ&lt;/strong&gt;が登録しており、&lt;strong&gt;200万の曲が毎月&lt;/strong&gt;がこのプラットフォームに
保存されているそうです。&lt;br /&gt;
BandLabが目指す世界は、&lt;strong&gt;どこにいても物理的場所、デバイス、時間等の境界を考えることなく音楽を作ることのできる環境を提供し、
音楽制作を更に民主化すること&lt;/strong&gt;、とのこと。&lt;/p&gt;

&lt;h2 id=&quot;ライブコーディング&quot;&gt;ライブコーディング&lt;/h2&gt;
&lt;p&gt;実装する対象の条件はは以下の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;オーディオエンジンはC++のコード&lt;a href=&quot;https://github.com/google/oboe&quot;&gt;Oboe&lt;/a&gt;を利用&lt;/li&gt;
  &lt;li&gt;MIDIで操作できるように実装&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、プラットフォームはAndroidとWeb（Chrome）です。&lt;/p&gt;

&lt;p&gt;実装完了しているコードではありませんが、コードが&lt;a href=&quot;https://github.com/googlesamples/io19-sonic-boom&quot;&gt;GitHub&lt;/a&gt;に公開されていますので、
細かく説明するよりもコードを片手に動画を見たほうがわかりやすいと思うので時間を記録していきます。&lt;/p&gt;

&lt;h3 id=&quot;-android側のコーディング&quot;&gt;＊ Android側のコーディング&lt;/h3&gt;
&lt;p&gt;オーディオエンジンを実装 (7:05 - )&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/googlesamples/io19-sonic-boom/blob/master/Android/app/src/main/cpp/AudioEngine.h&quot;&gt;[Android/app/src/main/cpp/AudioEngine.h]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/googlesamples/io19-sonic-boom/blob/master/Android/app/src/main/cpp/AudioEngine.cpp&quot;&gt;[Android/app/src/main/cpp/AudioEngine.cpp]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MIDIデバイスと接続 (27:27 - )&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/googlesamples/io19-sonic-boom/blob/master/Android/app/src/main/cpp/AudioEngine.cpp&quot;&gt;[Android/app/src/main/cpp/AudioEngine.cpp]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/googlesamples/io19-sonic-boom/blob/master/Android/app/src/main/java/com/example/io19/sonicboom/MainActivity.java&quot;&gt;[Android/app/src/main/java/com/example/io19/sonicboom/MainActivity.java]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-ブラウザ側の説明とコーディング&quot;&gt;＊ ブラウザ側の説明とコーディング&lt;/h3&gt;
&lt;p&gt;ここでブラウザとC++で何が起こるのか？についての説明が入ります。(12:15 - )&lt;br /&gt;
先程Android側で実装した&lt;code class=&quot;highlighter-rouge&quot;&gt;Synthesizer.h&lt;/code&gt;を使うけど、これをLLVMベースのコンパイラであるEmscriptenにコンパイルしWeb Assemblyの&lt;code class=&quot;highlighter-rouge&quot;&gt;synthesizer.wasm.js&lt;/code&gt;を生成する。
この&lt;code class=&quot;highlighter-rouge&quot;&gt;synthesizer.wasm.js&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;Synthesizer.h&lt;/code&gt;で公開メソッドとして持っていた&lt;code class=&quot;highlighter-rouge&quot;&gt;synth.noteOn()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;synth.noteOff()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;synth.render()&lt;/code&gt;を同じく
公開メソッドとしてして持つことになるが、残念ながらここだけは自動では生成してくれないので&lt;a href=&quot;https://github.com/googlesamples/io19-sonic-boom/blob/master/Chrome/wasm/synth_bind.cc&quot;&gt;EmscriptenでAPIをバインドするC++のコード&lt;/a&gt;を1つ追加することになります。&lt;br /&gt;
&lt;br /&gt;
続いてブラウザ側で鳴らす方法、それはJavaSciptからWeb Audio APIでAudioレンダリングを可能にするAudio Workletを使います。
なお、このAudio Workletはブラウザのメインスレッド上で動作はしないが、メインスレッドと同調して動作するスレッドです。&lt;br /&gt;
具体的には以下の流れで動作をさせることになります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;synthesizer.wasm.js&lt;/code&gt;をAudio Worklet ProcessorでWrap&lt;/li&gt;
  &lt;li&gt;Audioスレッドで動作している↑とメインスレッドとはPortと呼ばれる仕組みでデータのやり取りを行いブラウザで発声&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
ここからがコーディング。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Wrapしてコンパイル (15:04 - ) &lt;a href=&quot;https://github.com/googlesamples/io19-sonic-boom/blob/master/Chrome/wasm/synth_bind.cc&quot;&gt;[Synthesizer.hをバインドするC++]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Audio Workletの実装 (17:20 - ) &lt;a href=&quot;https://github.com/googlesamples/io19-sonic-boom/blob/master/Chrome/SynthProcessor.js&quot;&gt;[SynthProcessor.js]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;メインファイルの実装 (20:39 - ) &lt;a href=&quot;https://github.com/googlesamples/io19-sonic-boom/blob/master/Chrome/index.js&quot;&gt;[index.js]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MIDIデバイスと接続する (23:31 - ) &lt;a href=&quot;https://github.com/googlesamples/io19-sonic-boom/blob/master/Chrome/index.js&quot;&gt;[index.js]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;出来上がったところでセッション&quot;&gt;出来上がったところでセッション&lt;/h2&gt;
&lt;p&gt;同じオーディオエンジンで作製したAndroidとWebのアプリでのセッション。(32:05 - )&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/05/20190515_io19_02.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;事例の紹介&quot;&gt;事例の紹介&lt;/h2&gt;
&lt;p&gt;物理的場所を問わず、どこからでも、誰でも、また共有前提として利用できるプラットフォームであるWeb、
そしてそのプラットフォーム上の音楽制作ツール、とてつもなく大きなコミュニティを持つAndroidが音楽という国境のないツールに対して
音楽制作、またハイエンド・オーディオの分野でどれだけのポテンシャルを持っているか、の裏付けの説明が主でした。&lt;/p&gt;

&lt;h3 id=&quot;propellerhead&quot;&gt;・Propellerhead&lt;/h3&gt;
&lt;p&gt;25年間、音楽向けのアプリを作っている会社でReasonがもっとも知られているソフトウェア。WindowsとmacOS向けのソフトウェアがあり、このソフトウェアシンセサイザをWeb Assenblyを使ってブラウザ上で動作するように移植した。
ブラウザで動くことによって、より多くの人が音を使って自らを表現する機会が増えるといいな、というのが希望がPropellerheadにはあるとのこと。&lt;/p&gt;

&lt;h3 id=&quot;izotopr&quot;&gt;・IZOTOPR&lt;/h3&gt;
&lt;p&gt;信号処理のプラグインを開発する会社であるが、Spire Studioという&lt;strong&gt;モバイルの録音デバイス&lt;/strong&gt;を発売した。
このデバイス向けのAndroidアプリも公開したところ40％売上が上がった。この事実からもAndroidユーザがハイエンドのオーディオハードウェアを手にすることを
求めていることが分かると思う。&lt;/p&gt;

&lt;h3 id=&quot;music-world-media&quot;&gt;・Music World Media&lt;/h3&gt;
&lt;p&gt;数年前にパリで生まれたとても小さい（tiny）Startupで、いろいろなアプリを作っている。
その結果として過去12ヶ月間で235カ国の4500万のAndroidユーザに新規でリーチすることができた。
このことからもAndroidには音楽業界においても多くのユーザにリーチできるポテンシャルを持っていることが証明できていると思う。&lt;/p&gt;

&lt;h3 id=&quot;ableton&quot;&gt;・Ableton&lt;/h3&gt;
&lt;p&gt;Web上での音楽制作ツールは増えてきている。そしてAbletonは&lt;a href=&quot;learningmusic.ableton.com&quot;&gt;音楽制作の教育ツール&lt;/a&gt;を公開している。
ここから市販の制作ツールであるAbleton Liveも学ぶことができる。&lt;/p&gt;

&lt;h2 id=&quot;終わりに&quot;&gt;終わりに&lt;/h2&gt;
&lt;p&gt;まとめです。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;AndroidもWeb（Chrome）の両方がリアルタイムオーディオレンダリング、そしてMIDIサポートが可能&lt;/li&gt;
  &lt;li&gt;AndroidとChromeで同じソースコードを使うことが可能&lt;/li&gt;
  &lt;li&gt;商業的にも、Android、そしてWebから多くのユーザにリーチすることが可能&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;音楽には国境はない。どこにいようとも、文化背景・経済状態がどうであろうとも境界はなく、だからこそ人々が境界なく対話することが可能&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;皆さんのプログラミングスキルでどんな音楽を作ることだってサポートすることが可能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということから、聞くだけでなく、それを使ってコミュニケーションをすることをしてきましょう！と締めています。&lt;/p&gt;

&lt;h2 id=&quot;個人的な感想&quot;&gt;個人的な感想&lt;/h2&gt;
&lt;p&gt;C++のコードからWeb Assemblyに移植するのにはヒトテマ必要であることはライブコーディングからは分かりました。
そして「Web Audioでは音楽アプリはレイテンシーが・・・」と指摘されている部分にWeb Assemblyは一石を投じるのも遠い未来ではないように感じる、
同時にWeb Assemblyを使うことは、そこまで難しいことでもないことを感じることができたセッションであった、
という意味では非常に意味のあるセッションだったと感じています。&lt;br /&gt;
&lt;br /&gt;
さてセッションの主役のWeb Assenbly、Web Audio/MIDIの仕様を決めるW3C、その年次会議である&lt;a href=&quot;https://www.w3.org/2019/09/TPAC/&quot;&gt;TPACの2019年開催は日本の福岡&lt;/a&gt;です。
その前後にいろいろなイベントが日本で開催されるかもで、今からワクワクしちゃいますね！&lt;/p&gt;</content><category term="Web Audio API" /><category term="Web MIDI API" /><category term="Web Music" /><category term="Android" /><category term="Google I/O 2019" /><summary>2019年5月7〜9日まで、毎年Google社が米国カリフォルニア州で開催している開発者会議「Google I/O」に参加してきました。

その中でも「これは！！」と感じたセッションを紹介していこうと思います。

第一弾は「Sonic Boom! Audio Programming on Android and Chrome」です。
「Step by StepでAndroid、Webでのコーディング方法を追うことができる」という意味で、開発を行うのには非常に参考になると思っています。
（デジタルハーツ所属としての参加なのに、アプリケーションテストの内容でなくてごめんなさい😅）

セッションの動画は↓です。</summary></entry><entry><title>もやしと豆苗のガパオ風炒め</title><link href="../2019/03/31/gapaohuu-itame.html" rel="alternate" type="text/html" title="もやしと豆苗のガパオ風炒め" /><published>2019-03-31T00:00:00+09:00</published><updated>2019-03-31T00:00:00+09:00</updated><id>../2019/03/31/gapaohuu-itame</id><content type="html" xml:base="../2019/03/31/gapaohuu-itame.html">&lt;div&gt; &lt;/div&gt;

&lt;p&gt;ガパオごはんを作ったときに「この味で野菜炒めにしても美味しいんじゃないかな？」と思い立って作ったらやっぱり美味しかったので、Cookpadにメモりました。
ちょっとエスニックな野菜炒め、という感じかな。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cookpad.com/recipe/5581338&quot;&gt;「もやしと豆苗のガパオ風炒め」のレシピ&lt;/a&gt;はこちらです。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/03/20190331-gapao.jpg&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;a href=&quot;https://cookpad.com/recipe/5581338&quot;&gt;
&lt;script src=&quot;https://widgets.cookpad.com/recipes/5581338.js?k=6c91e56d&amp;amp;fit_width=1&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;番外編&quot;&gt;番外編&lt;/h2&gt;

&lt;p&gt;ここからはCookpadには載せていませんが、、、&lt;br /&gt;
米国で蕎麦を炒めた料理とかあったけどだいたい微妙な味だけど「この野菜炒めならイケるんじゃないか？」と思って混ぜたのがこちら↓。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;../images/2019/03/20190331-soba.jpg&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;味は、、、おすすめ出来ませんww&lt;br /&gt;
食べてて、「蕎麦を炒める」だなんてなんて米国的発想をしてるんだ、、、と自分にビックリでした😅&lt;/p&gt;</content><category term="Cookpad" /><category term="料理" /><summary></summary></entry><entry><title>x-webmidiをES6 Modulesに変更しxwebmidi.jsにしました</title><link href="../2019/03/21/update-xwebmidi.html" rel="alternate" type="text/html" title="x-webmidiをES6 Modulesに変更しxwebmidi.jsにしました" /><published>2019-03-21T00:00:00+09:00</published><updated>2019-03-21T00:00:00+09:00</updated><id>../2019/03/21/update-xwebmidi</id><content type="html" xml:base="../2019/03/21/update-xwebmidi.html">&lt;div&gt; &lt;/div&gt;

&lt;p&gt;x-webmidiとして公開していたPolymerのエレメントをES6 Modulesに変更しxwebmidi.jsとすることにました。&lt;br /&gt;
理由は簡単でHTML ImportがChromeから削除されてしまうからです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ryoyakawai/x-webmidi&quot;&gt;コードはGitHub&lt;/a&gt;にあります。&lt;/p&gt;

&lt;p&gt;xwebmidi.jsでできることは以下です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コンピュータに接続されているMIDIデバイスのリスト化&lt;/li&gt;
  &lt;li&gt;接続・切断したMIDIデバイスを自動でデバイスリストから追加・削除&lt;/li&gt;
  &lt;li&gt;MIDI InputデバイスからのMIDIメッセージの受け取り&lt;/li&gt;
  &lt;li&gt;MIDI OutputデバイスへのMIDIメッセージの送信&lt;/li&gt;
  &lt;li&gt;MIDI Messageを自動でParse&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まだあるかもしれませんが、これくらいが主な機能になります。&lt;/p&gt;

&lt;p&gt;できる限り今までのx-webmidiと同じように簡単に実装できるようしています。詳細なREADMEを出来ていませんが、このHTML、JavaScriptを書くとブラウザ上に↑の機能を実装の土台ができあがります。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./xwebmidi.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    INPUT: &lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;midiin&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xwebmidi-select-midi&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
    OUTPUT: &lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;midiout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xwebmidi-select-midi&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/select&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xWebMIDI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./xwebmidi.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xwm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xWebMIDI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xwm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestMIDIAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;xwm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;midiin&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;xwm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;midiout&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

       &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;midiin-event:midiin&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;xwm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendRawMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ということで、快適なWeb Musicな生活を！！！&lt;/p&gt;</content><category term="Web Music" /><category term="Web MIDI API" /><summary></summary></entry><entry><title>Web Bluetooth経由でBluetooth MIDIデバイスを使う</title><link href="../2019/02/20/MIDI-over-webbluetooth.html" rel="alternate" type="text/html" title="Web Bluetooth経由でBluetooth MIDIデバイスを使う" /><published>2019-02-20T00:00:00+09:00</published><updated>2019-02-20T00:00:00+09:00</updated><id>../2019/02/20/MIDI-over-webbluetooth</id><content type="html" xml:base="../2019/02/20/MIDI-over-webbluetooth.html">&lt;div&gt; &lt;/div&gt;

&lt;p&gt;2019年2月19日に&lt;a href=&quot;https://html5j-robot.connpass.com/event/117812/&quot;&gt;「JSで制御するBluetoothと基板の勉強会（html5jロボット部 第11回 勉強会）」&lt;/a&gt;というイベントでBluetooth MIDI機器をWeb Bluetooth経由で利用に関してLTさせていただきました！
久々でとても緊張でしたがデモも無事に動いてホッとしました。制限時間5分のところを1分超過してしまいすみませんでした＞＜&lt;br /&gt;
ありがとうございました！＆スタッフの皆様お疲れ様でした！&lt;/p&gt;

&lt;p&gt;今回の&lt;a href=&quot;https://ryoyakawai.com/apps/midimsgv/&quot;&gt;アプリはこちら&lt;/a&gt;です。&lt;a href=&quot;https://github.com/ryoyakawai/midimessageviewer&quot;&gt;コードはここ&lt;/a&gt;。&lt;br /&gt;
以前作成したアプリをWeb BluetoothでもMIDIに対応してみました。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;a href=&quot;https://ryoyakawai.com/apps/midimsgv/&quot;&gt;
&lt;img src=&quot;../images/2019/02/20190219_webbluetooth.png&quot; width=&quot;100%&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;技術的な詳細は&lt;a href=&quot;https://qiita.com/ryoyakawai/items/200b3b05d8bd0096f68d&quot;&gt;Qiitaに記事としてこちら&lt;/a&gt;にまとめたので、気になる方はそちらを御覧ください！気がついたら結局ライブラリにしていたので公開することにしました。ご自由にお使い下さい。&lt;/p&gt;

&lt;p&gt;日進月歩でブラウザでできることが増えて来て本当にうれしいです。&lt;br /&gt;
ウェブって本当にいいですねっ👍&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/sascacci&quot;&gt;@sascacci&lt;/a&gt;さんありがと〜！&lt;/p&gt;</content><category term="Web Music" /><category term="Web Bluetooth" /><category term="MIDI" /><summary></summary></entry><entry><title>旧所属のお世話になったボス「G-tenさん」の定年のご退職壮行会に呼んでいただいた！</title><link href="../2019/02/01/farewellparty.html" rel="alternate" type="text/html" title="旧所属のお世話になったボス「G-tenさん」の定年のご退職壮行会に呼んでいただいた！" /><published>2019-02-01T00:00:00+09:00</published><updated>2019-02-01T00:00:00+09:00</updated><id>../2019/02/01/farewellparty</id><content type="html" xml:base="../2019/02/01/farewellparty.html">&lt;div&gt; &lt;/div&gt;
&lt;p&gt;「こんにちは」&lt;br /&gt;
という元所属の上司からの1日前のFacebookのメッセンジャから始まった。 &lt;br /&gt;
スクリプトがうまく動かなくて「う〜ん、、、」と頭を抱えながらお昼ご飯を食べているときに気がついたメッセージで、スクリプトから意識を離してもらえたのでその点も本当によかったです。さすが元上司、みたいなw&lt;/p&gt;

&lt;p&gt;そして、そのメッセージを雑にまとめると「明日来ない？」みたいなありがたいお誘い。旧所属の人が20名規模で集まり、上司の上司（当時の部門長）のご定年の壮行会、ということで2つ返事で「参加します！」と即刻返事をして混ぜてもらいました。印象的な期間の1つである部門だったので会場に入った途端にタイムスリップした感がかなりあって、さらには会場のプロジェクタからは選んだかのように「Back to the future -Part1-」が再生されてて、もうなんというかホントに当時のことが頭の中を駆け巡り、控え目に言って楽しかった。そして、あの選択でなくてこういう選択してたらもっと伸びてたかも、とか頭をよぎったり、普段は感じられない貴重で、かつ、不思議な時間が過ぎました。その時間は本当に一瞬で終わってしまいましたけどね。&lt;br /&gt;
さて、今回の壮行会の主役のボスは本当に印象的なボスの1人で&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot; style=&quot;font-weight:bold&quot;&gt;
「成功体験は減価償却せなあかんで。」
&lt;/div&gt;
&lt;p&gt;と、今でも常に心に留めている言葉を教えてくださった関西弁のボスです。今後の変わらぬご活躍を祈念するのと同時に、部下として乗り越える一翼を担えたことを嬉しく思います！ありがとうございました！！&lt;br /&gt;
そして、今回のG-tenさん（ボス）の一言&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot; style=&quot;font-weight:bold&quot;&gt;
「突き詰めていくと、最後は好き嫌いやで。」
&lt;/div&gt;
&lt;p&gt;と、また深いお言葉。何となくしかまだ理解はできていないんだけど「そうなんだよね」、「それでいいんだよね」みたいに感じました。この言葉もこれから心から理解できるように精進していこうと思います。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
  &lt;img src=&quot;../images/2019/02/20190201-groupphoto.jpg&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;そして、今回は1参加者のつもりだったのが、僕まで壮行されれる側にしていただけました。本当にありがとうございました。嬉しかったです。更にこんな素敵などんぶりまで記念品としていただいちゃいました！あの当時なら確実に「白米用」でしたが、これからは「スープ」または「ヨーグルト」用として使わせていただきますっ！ありがとうございます。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
  &lt;img src=&quot;../images/2019/02/20190201-donburi.jpg&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;さて、未来に向けて引き続き一歩一歩着実に前進していくよっ！&lt;/p&gt;</content><category term="壮行会" /><category term="FarewellParty" /><summary>「こんにちは」
という元所属の上司からの1日前のFacebookのメッセンジャから始まった。 
スクリプトがうまく動かなくて「う〜ん、、、」と頭を抱えながらお昼ご飯を食べているときに気がついたメッセージで、スクリプトから意識を離してもらえたのでその点も本当によかったです。さすが元上司、みたいなw

そして、そのメッセージを雑にまとめると「明日来ない？」みたいなありがたいお誘い。旧所属の人が20名規模で集まり、上司の上司（当時の部門長）のご定年の壮行会、ということで2つ返事で「参加します！」と即刻返事をして混ぜてもらいました。印象的な期間の1つである部門だったので会場に入った途端にタイムスリップした感がかなりあって、さらには会場のプロジェクタからは選んだかのように「Back to the future -Part1-」が再生されてて、もうなんというかホントに当時のことが頭の中を駆け巡り、控え目に言って楽しかった。そして、あの選択でなくてこういう選択してたらもっと伸びてたかも、とか頭をよぎったり、普段は感じられない貴重で、かつ、不思議な時間が過ぎました。その時間は本当に一瞬で終わってしまいましたけどね。
さて、今回の壮行会の主役のボスは本当に印象的なボスの1人で

「成功体験は減価償却せなあかんで。」

と、今でも常に心に留めている言葉を教えてくださった関西弁のボスです。今後の変わらぬご活躍を祈念するのと同時に、部下として乗り越える一翼を担えたことを嬉しく思います！ありがとうございました！！
そして、今回のG-tenさん（ボス）の一言

「突き詰めていくと、最後は好き嫌いやで。」

と、また深いお言葉。何となくしかまだ理解はできていないんだけど「そうなんだよね」、「それでいいんだよね」みたいに感じました。この言葉もこれから心から理解できるように精進していこうと思います。</summary></entry><entry><title>パンダエクスプレスメニューのコピーを作ってみた</title><link href="../2019/01/20/pandaexpressrecipe.html" rel="alternate" type="text/html" title="パンダエクスプレスメニューのコピーを作ってみた" /><published>2019-01-20T00:00:00+09:00</published><updated>2019-01-20T00:00:00+09:00</updated><id>../2019/01/20/pandaexpressrecipe</id><content type="html" xml:base="../2019/01/20/pandaexpressrecipe.html">&lt;div&gt; &lt;/div&gt;

&lt;p&gt;たまに食べたくなるパンダエクスプレスメニュー。作ってみたら、けっこう美味しくできたのでCookpadに公開しちゃいました。&lt;br /&gt;
鶏のムネ肉ってパサっとしてしまうので避けがちだけど、そこまでパサつかずで良いかも。&lt;br /&gt;
もしよかったら作ってみてください！&lt;/p&gt;

&lt;h3 id=&quot;鶏ムネ肉とインゲンの中華炒め&quot;&gt;鶏ムネ肉とインゲンの中華炒め&lt;/h3&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;script src=&quot;https://widgets.cookpad.com/recipes/5461774.js?k=f1117d29&amp;amp;fit_width=1&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;h3 id=&quot;鶏ムネ肉のブラックペッパー中華炒め&quot;&gt;鶏ムネ肉のブラックペッパー中華炒め&lt;/h3&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;script src=&quot;https://widgets.cookpad.com/recipes/5461810.js?k=d819bc4f&amp;amp;fit_width=1&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;h3 id=&quot;鶏モモ肉のオイスターソースの中華炒め&quot;&gt;鶏モモ肉のオイスターソースの中華炒め&lt;/h3&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;script src=&quot;https://widgets.cookpad.com/recipes/5461081.js?k=87e2cd10&amp;amp;fit_width=1&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/div&gt;</content><category term="Cookpad" /><category term="料理" /><summary></summary></entry><entry><title>2018年最終日</title><link href="../2018/12/31/endof2018.html" rel="alternate" type="text/html" title="2018年最終日" /><published>2018-12-31T16:30:00+09:00</published><updated>2018-12-31T16:30:00+09:00</updated><id>../2018/12/31/endof2018</id><content type="html" xml:base="../2018/12/31/endof2018.html">&lt;div&gt; &lt;/div&gt;

&lt;p&gt;2018年も最終日。環境も、自分も動いた、動かした1年。お疲れ様でした！！&lt;br /&gt;
転職、というのが一番大きかったけど、ブログを移行したり、FitbitのClock Faceを公開したり、ウェブサイトを最初から作ったり、Cookpadでレシピを公開し始めたり、大きいことから小さなことまでやってたんだな〜、と振り返り中。悩みは多い1年だったけど、よい1年だったかな。体重も維持できてるし。&lt;br /&gt;
来年は今年よりもパフォーマンスが出るように更に精進していこう。&lt;br /&gt;
&lt;br /&gt;
関係ないけど、公開しているClock Faceが300名の方、50カ国で利用してもらえてることが分かった。小さなことだけど、こういうのすごく励みになるね。&lt;br /&gt;
&lt;br /&gt;
本年も多くの方に本当にお世話になりました。ありがとうございました。&lt;br /&gt;
2019年もよろしくおねがいします。&lt;br /&gt;
&lt;br /&gt;
よいお年を！&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;whenever&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myself&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anything_happen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><category term="年末" /><summary></summary></entry></feed>
