<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.6.3">Jekyll</generator><link href="https://ryoyakawai.com/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ryoyakawai.com/blog/" rel="alternate" type="text/html" /><updated>2021-05-23T22:18:15+09:00</updated><id>https://ryoyakawai.com/blog/</id><title>Delicious Days</title><subtitle>Life is delicious every day.</subtitle><entry><title>2020年の振り返り</title><link href="https://ryoyakawai.com/blog/2020/12/31/summary-of-2020.html" rel="alternate" type="text/html" title="2020年の振り返り" /><published>2020-12-31T00:00:00+09:00</published><updated>2020-12-31T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2020/12/31/summary-of-2020</id><content type="html" xml:base="https://ryoyakawai.com/blog/2020/12/31/summary-of-2020.html">&lt;div&gt; &lt;/div&gt;

&lt;h2 id=&quot;2020年&quot;&gt;2020年&lt;/h2&gt;
&lt;p&gt;今年もあと24時間を切りました！&lt;br /&gt;
自分自身の2020年はまとめるとテーマは「食」がキーワードだったように感じています。&lt;br /&gt;
それでは2020年をトピック毎に振り返ってみます。&lt;/p&gt;

&lt;h3 id=&quot;1stay-home--work-from-home&quot;&gt;1：Stay Home &amp;amp; Work From Home&lt;/h3&gt;
&lt;p&gt;2月頃に突然に&lt;a href=&quot;https://www.niid.go.jp/niid/ja/diseases/ka/corona-virus/2019-ncov/2484-idsc/9410-covid-dp-01.html&quot;&gt;豪華客船のニュース&lt;/a&gt;から始まったという印象が強いです。「対岸の火事」で終わればいいな・・・、と思ってたけどそうは問屋が卸しませんでした。残念ながら。そしてこれも残念ながら現在進行形でもあり、悪化の一途をたどりつつあるようにすら感じます。&lt;br /&gt;
3月上旬から「できるだけWFH」というありがたい勤務体系にしていただけけ、子どもたちの学校が休みになった3月2日直後（&lt;a href=&quot;https://www.nikkei.com/article/DGXMZO56131560X20C20A2MM8000&quot;&gt;全国の小中高、3月2日から臨時休校要請　首相&lt;/a&gt;）くらいから勤務も家から、という形をとらせていただき、そして現在の出社頻度は週1回、年明けからは週2回の出社となり徐々に変化している、という感じです。&lt;br /&gt;
WFHの正直な感想は以下です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通勤辛いからなくなって欲しいけど、なくなったらなくなったで出社しないというのが不安になる&lt;/li&gt;
  &lt;li&gt;タスクが決まってる、かつ、1人で進められるタスクであれば自宅のが割り込みが入らなくて良いかも&lt;/li&gt;
  &lt;li&gt;とはいえ、割り込みって気分転換にもなるから実はありがたいイベントなのかも？&lt;/li&gt;
  &lt;li&gt;「便利」はその裏側に実はいろいろな背景を短絡させていて失ってるモノも少なくないかも？&lt;/li&gt;
  &lt;li&gt;料理苦手じゃなくて助かった！（お昼は必ず自炊してます）&lt;/li&gt;
  &lt;li&gt;切り上げればいいのに、キリの良いところまでエンドレスに続けてしまうタスク整理w&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まとめると、勤務はハイブリットがいいな〜、なんて思っています。&lt;/p&gt;

&lt;p&gt;そうそう、週1で出社してますが「できる限りの感染予防」ということで天候が良ければチャリで通勤しています。&lt;a href=&quot;https://www.yamaha-motor.co.jp/pas/lineup/rin/&quot;&gt;Yamaha PAS RIN&lt;/a&gt;に乗って9kmくらい走ってます。電動自転車で26インチ以上だと子供を後ろに乗せることを目的とした形が多いからか、どうしてもママチャリハンドルのばかりなんですけど、このPAS RINは直線に近くとても走りやすいです。納品まで2ヶ月かかったけど選んで良かったです。中〜長距離＆スタイリッシュな26インチ以上の電動自転車を探してる方にはかなりオススメの1台です！&lt;/p&gt;

&lt;h3 id=&quot;2自宅で料理する機会が増えた&quot;&gt;2：自宅で料理する機会が増えた&lt;/h3&gt;
&lt;p&gt;今までもあまり外食はしてなかったのですが、更にその機会も減り、すると「アレ食べたいけど、自分で作れないものか？」と思い立ち調べて作ることが日常化して「買って食べるもの」と信じ込んでいたピザ、餃子、パイも作るようになりました。そして、作るときはまずは基本に忠実に作り、回数を重ねて慣れてきたらアレンジを加え、そのアレンジで美味しくできたものはCookpadで公開するということの繰り返しが多かったです。&lt;/p&gt;

&lt;p&gt;その結果として、2018年から&lt;a href=&quot;https://cookpad.com/kitchen/9689546&quot;&gt;Cookpad&lt;/a&gt;で少しづつレシピを公開していますが、2020年の今年はなんと9個も公開してたみたいです。ありたいことに見てくださってる方も少なくなく、おおよそ平均26,000PV/月を獲得できています。2020年のPVで特徴的なのが4月、5月。2ヶ月の合計で10万PVという異常な数値で世の中のStay Homeっぷりを感じることのできた結果となりました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cookpad.com/recipe/6554204&quot;&gt;手軽で美味しい鶏むね肉のヘルシー餃子&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cookpad.com/recipe/6382021&quot;&gt;無水鍋でカレー：ピーマン＆キュウリ編&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cookpad.com/recipe/6368940&quot;&gt;Staub（無水鍋）で簡単ミートソース&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cookpad.com/recipe/6374078&quot;&gt;鶏もも肉と玉ねぎのケチャップ炒め&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cookpad.com/recipe/6382094&quot;&gt;カレー冷やしうどん＆カレーメシ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cookpad.com/recipe/6360032&quot;&gt;カレー冷やし中華&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cookpad.com/recipe/6283384&quot;&gt;羊羹で作る、簡単インスタントあずきサンド&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cookpad.com/recipe/6230410&quot;&gt;和でも洋でもないドレッシング&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cookpad.com/recipe/6071474&quot;&gt;唐揚げ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2020年にレシピは出し切った感があるので、さらなる自分の中での食開発という意味で2021年はどれだけ公開できるか自分でも楽しみです。&lt;/p&gt;

&lt;p&gt;最後に2020年に買って最も良かった調理器具は&lt;a href=&quot;https://item.rakuten.co.jp/idea-happy-life/10003672/&quot;&gt;ホットサンドメーカー&lt;/a&gt;です。あずきサンドをレシピとして公開していますが、ハム・チーズだけでもホントに美味しいのオススメです。トースターでは出せない、耳のカリカリ感とその他のふわふわ感を一度に楽しめるところが特に好きです。&lt;/p&gt;

&lt;h3 id=&quot;3久々のテントを設営してのキャンプ&quot;&gt;3：久々のテントを設営してのキャンプ&lt;/h3&gt;
&lt;p&gt;できる限り人のいないところ＆殺菌だったりを他人に任せない、の基準で選んだ夏休みが山梨&lt;a href=&quot;https://goo.gl/maps/sYx3j5vzcDf42Cjf7&quot;&gt;CamPica Akeno&lt;/a&gt;へのキャンプでした。暑かったけど、これは楽しかったです。久々のテント持参のキャンプだったけど、子どもたちも設営を手伝えるようになってたので助かりました！&lt;br /&gt;
そして、なんと言ってもキャンプは煙を気にせずモクモクと肉を焼けるのが最高ですねw&lt;/p&gt;

&lt;h3 id=&quot;4フードテックとかオーガニックとか&quot;&gt;4：フードテックとかオーガニックとか&lt;/h3&gt;
&lt;p&gt;トピックとして世の中的にもフードテックは注目されはじめてて例えばバーガーキングが&lt;a href=&quot;https://prtimes.jp/main/html/rd/p/000000073.000038980.html&quot;&gt;「Plant-Based WHOPPER」&lt;/a&gt;、
吉川さんのところの&lt;a href=&quot;https://tokyovegangyoza.com/ja/&quot;&gt;Repubi9社&lt;/a&gt;が&lt;a href=&quot;https://prtimes.jp/main/html/rd/p/000000001.000062505.html&quot;&gt;「東京ヴィーガン餃子」&lt;/a&gt;を発売されたりと、身近なところで目にするようになったり、政府としても&lt;a href=&quot;https://www.maff.go.jp/j/press/kanbo/kihyo01/200925.html&quot;&gt;「フードテック官民協議会」&lt;/a&gt;を設立したりと、フードテックの動きが活発さを肌で感じられる1年でもあったと振り返っています。&lt;/p&gt;

&lt;p&gt;そしてオーガニック。これについても野菜栽培に関して日本の農薬利用の基準では外国の基準を満たしていないことが少なくなく輸出が自由にできない、みたいなトピックが年始くらいからちらほら言われ始めたり、Stay Homeが促進したからなのか「運動をしましょう」というのから、健康志向に注目が移り、そしてオーガニック食材を食べて更に健康に、みたいな流れになっているようにも感じています。（肌感覚で根拠はありません）&lt;br /&gt;
こんな肌感覚から2021年は更にこの界隈でCOVID-19前の2018年までの延長線上では語れない未来にさらに向くのが加速していくだろう、と妄想しています。オーガニックとかは、手間、現在の希少性を考えると当たり前なんだけど、ちょっと値段が高いのが・・・とは思っていますのでそこをなんとかなればな〜、って思います。&lt;/p&gt;

&lt;h2 id=&quot;2021年&quot;&gt;2021年&lt;/h2&gt;
&lt;p&gt;「世の中が2018年以前に戻るには4-5年かかるだろう」と言われてはいますが、2021年に少しでも戻ってほしいな、と願うばかりです。飛行機に乗ってアメリカ行きたいw&lt;br /&gt;
その他、今までと同じように難しいこともあるだろうけど、美味しいものを食べて、元気にやっていこうと思っています。&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;よいお年を🐮！！&lt;/p&gt;</content><category term="2020" /><category term="summary" /><summary></summary></entry><entry><title>GitHub Codespacesを使ってみた。</title><link href="https://ryoyakawai.com/blog/2020/08/05/github-codespaces.html" rel="alternate" type="text/html" title="GitHub Codespacesを使ってみた。" /><published>2020-08-05T00:00:00+09:00</published><updated>2020-08-05T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2020/08/05/github-codespaces</id><content type="html" xml:base="https://ryoyakawai.com/blog/2020/08/05/github-codespaces.html">&lt;div&gt; &lt;/div&gt;

&lt;h2 id=&quot;短いまとめ&quot;&gt;短いまとめ&lt;/h2&gt;
&lt;p&gt;GitHub Codespacesを使ってみた時の感想です。&lt;/p&gt;

&lt;h2 id=&quot;経緯&quot;&gt;経緯&lt;/h2&gt;
&lt;p&gt;いつだったか忘れたけど「ブラウザ上のエディタで修正できりようになるよ〜。まずは招待制で始めるよん。」ってのを聞いてWaiting Listに入りました。
8月5日に「You’re now in the Codespaces beta!」ってメールがGitHubさんから来たのですけど、私自身はメールの本文を読むまでは「なんだっけ？」というレベルの認識度でした。&lt;/p&gt;

&lt;h2 id=&quot;youtubeで説明を聞いてみた&quot;&gt;YouTubeで説明を聞いてみた&lt;/h2&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fQbH3meWNQ8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;ビデオの中で自分で気になったところをまとめるとこんな感じでした。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コンテナ内で動く&lt;/li&gt;
  &lt;li&gt;GitHubのUIから起動できる&lt;/li&gt;
  &lt;li&gt;エディタは今はVS Code（Visual Studio Code）だけだけど今後使えるIDE増やしていく予定&lt;/li&gt;
  &lt;li&gt;Terminalも開ける&lt;/li&gt;
  &lt;li&gt;Terminalからlocalhostとして実行したサーバにもアクセスできる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;何に使おうか&quot;&gt;何に使おうか？&lt;/h2&gt;
&lt;p&gt;「このブログで使ってる&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;のコンパイルもできないかな？」とか考えていじってみました。&lt;/p&gt;

&lt;p&gt;まずはOS何？ってところからで、&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/os-release
&lt;span class=&quot;nv&quot;&gt;PRETTY_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Debian GNU/Linux 9 (stretch)&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Debian GNU/Linux&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;VERSION_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9 (stretch)&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;VERSION_CODENAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;stretch
&lt;span class=&quot;nv&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;debian
&lt;span class=&quot;nv&quot;&gt;HOME_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://www.debian.org/&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUPPORT_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://www.debian.org/support&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BUG_REPORT_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://bugs.debian.org/&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ってことだったので、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;してみて、Rubyをインストール（&lt;a href=&quot;https://qiita.com/ryoyakawai/items/63528990d1624a4a3bb0&quot;&gt;インストール方法&lt;/a&gt;）してみたら、無事に動きましたので、この記事は早速そこで書いてます。&lt;br /&gt;
なお、ネットワークが問題なのかもしれないのだけど、接続が切れて再接続を要求されることがまれに発生しております。&lt;/p&gt;

&lt;p&gt;特に設定してないですが日本語も入力できてます🙂&lt;/p&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;
&lt;p&gt;まだJekyllを動かすくらいでしか試してないけど、使い方によっては便利に使えそう、という感想です。とはいえ、開発環境自体もクラウド側に吸収されると開発者としては楽になる一方で、学ぶ場が減っちゃわない？って心配も浮かびました。&lt;br /&gt;
それからVS Codeで、ここ最近かなり使われてる感があるからVS CodeのExtensionを公開することに対しては未来がありそう、という印象も持ってます。&lt;br /&gt;
何はともあれ今後に期待。というか「emacsだったりviはIDEですか？」って聞いてみたいw
あと、このコンテナっていつまで保持されるんだろう？というのも気になるところですが、追って調査するということにします。&lt;/p&gt;</content><category term="GitHub" /><category term="Tool" /><summary></summary></entry><entry><title>TOEIC受験の為に英語を勉強してみて。</title><link href="https://ryoyakawai.com/blog/2020/08/02/studying-english.html" rel="alternate" type="text/html" title="TOEIC受験の為に英語を勉強してみて。" /><published>2020-08-02T00:00:00+09:00</published><updated>2020-08-02T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2020/08/02/studying-english</id><content type="html" xml:base="https://ryoyakawai.com/blog/2020/08/02/studying-english.html">&lt;div&gt; &lt;/div&gt;

&lt;h2 id=&quot;短いまとめ&quot;&gt;短いまとめ&lt;/h2&gt;
&lt;p&gt;TOEICで880点に達したときの「それまでの道のり」と「何にでも壁ってあるのだな〜」と感想を持ったときのお話です。&lt;/p&gt;

&lt;h2 id=&quot;英語との関わり&quot;&gt;英語との関わり&lt;/h2&gt;
&lt;h3 id=&quot;その1文化交流での留学&quot;&gt;その1：文化交流での留学&lt;/h3&gt;
&lt;p&gt;自分と英語との付き合いの最初は特別なこともなく中学1年生からでした。その後、高専へと進み、御縁があって&lt;a href=&quot;https://www.afs.or.jp/&quot;&gt;AFS(American Field Service)&lt;/a&gt;という「異文化を身を持って体験する」ことを目的とした団体からアメリカのオハイオ州に1年間留学をさせていただいたところから大きく変わったのだと思います。&lt;br /&gt;
当時は耳から入る英語がほぼ分からない状態なのに、日本語が通じない地域にホームステイして相当鍛えられた、のだと思います。&lt;br /&gt;
ただし、帰国後に文法などの追加での勉強はしませんでした。&lt;/p&gt;

&lt;h3 id=&quot;その2社会人での経験&quot;&gt;その2：社会人での経験&lt;/h3&gt;
&lt;p&gt;新卒でヤマハ入社した直後に人生で初のTOEICを受けました。550点、Listning：7割、Reading：4.5割でした。
その後、Globalなプロジェクトに参加させてもらったり、現地法人に1ヶ月程度の出張をさせていただいたりで、以前にも増して自分の中でも「聞く」には慣れてきた感があり、文法も勉強というよりはメールで書く必要があった為にいろいろ調べざるを得なかったことで、英作文チョットデキル感が出た時期だったと思います。&lt;br /&gt;
という時期に、特段対策もせずに受けたTOEIC 700点。Listening：6割、Reading：6割。&lt;br /&gt;
引き続き、英語の関わりは同じ程度の業務をこなし、今度はReadingの対策をちょっとだけして受けたTOEIC 785点。Listening：9割、Reading：7割。&lt;br /&gt;
この試験後には英語は社内での会話だったのがガラっと変わり、社外での会話が中心となり今までにも増して英語を読む、書く、聞く、話す機会が増していました。&lt;/p&gt;

&lt;h3 id=&quot;その3アメリカ駐在&quot;&gt;その3：アメリカ駐在&lt;/h3&gt;
&lt;p&gt;アメリカの駐在となりました。このときには、社外の方とのやりとりも経験後だったこともあり、やっぱり追加での英語の勉強はほとんどしませんでした😅 そしてTOEICも受けることなく2年9ヶ月で帰国します。&lt;/p&gt;

&lt;h3 id=&quot;その4帰国後の淡い期待&quot;&gt;その4：帰国後の淡い期待&lt;/h3&gt;
&lt;p&gt;帰国後の英語といえば、少しは使ってはいたものの、ほとんど機会がないという状態でした。&lt;br /&gt;
そんな中、新型コロナで籠もる生活が世の中的に広がり長期に渡ってTOEICの公開試験も中止となり、そこで&lt;a href=&quot;https://www.iibc-global.org/toeic/support/youtube_test.html&quot;&gt;「#TOEIC公式みんなで模擬受験」&lt;/a&gt;というのが開催されることを知りました。せっかく無料だし受けてみました。正直を言いますと勉強を全くしてないワリに「駐在してたし当然点数は上がってる」という淡い期待もありました。&lt;br /&gt;
自宅で受験したので採点も自己採点を行います。そして、結果はなんと780点。Listening：9.5割、Reading：6.5割、という結果です。駐在してたけどReadingはほぼ上がっていないという結果に愕然としました。が、いいところもありました。Listeningで「えっ、そんな引掛けを答えさせる問題なのか・・・」という感覚が幾度となくあり、これは今までにはなかったListening中の余裕だろう、というところから上達も感じることはできていました。&lt;br /&gt;
問題はReadingのスピードが非常に遅かったことで、これについては活字嫌いの自分としては納得感しかありませんでした。&lt;/p&gt;

&lt;h2 id=&quot;自分で立てた弱点の仮説と対策&quot;&gt;自分で立てた弱点の仮説と対策&lt;/h2&gt;
&lt;h3 id=&quot;仮説&quot;&gt;仮説&lt;/h3&gt;
&lt;p&gt;TOEICの点数の分布と、今までの自分の英語の知識の源泉をたどり、それらをまとめると以下だと分析しました。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;現地生活の経験から死活問題となる生活の会話の読み取りはイケる&lt;/li&gt;
  &lt;li&gt;文法などの座学知識は中学校程度でしかなく、例えば穴埋めの答えの根拠を示せない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これから導き出したのが「英語を感覚として並べることはできるが、その正確性を問われると答えられない」という仮説です。&lt;br /&gt;
日本語にも照らし合わせると、これは「会話はできる、理解できる。けど難しいことを問われると困る。」という小学生レベルの理解度なのだな、と理解しました。次には「中学校で国語って何したっけ？」と思い出し、やっぱ文法の勉強、難しい文章を読んで慣れたのかな、とアタリをつけて、英語でも同じように勉強することにしました。&lt;/p&gt;

&lt;h3 id=&quot;対策&quot;&gt;対策&lt;/h3&gt;
&lt;p&gt;反復練習はどちらかというと得意な方なので「問題集をひたすら解く」を対策にしました。&lt;br /&gt;
弱点の炙り出しと、慣れることが目標にしたのです。そこで購入したのが以下の2冊です。とにかく量の多い問題集をピックアップしています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.co.jp/gp/product/4883196763&quot;&gt;極めろ!リーディング解答力 TOEIC® L &amp;amp; R TEST PART 7 (日本語) 単行本&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.co.jp/gp/product/4866390832&quot;&gt;TOEIC L&amp;amp;Rテスト 文法問題 でる1000問 (日本語) 単行本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2冊で1486問が掲載されているですが、新型コロナの影響もあり毎日自宅作業だったので「通勤時間」になっていた時間を、この問題集をひたすら解く時間にあてたりして時間を裂きました。半月で長文の問題集は1.2通り程度、穴埋めは1.5通り程度くらいをこなしました。以下のようなStepでこなしていきました。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;とにかく解いて、間違った問題は内容を理解した上で、問題に日付をつける&lt;/li&gt;
  &lt;li&gt;前日に間違った問題を復習してから、当日進めるべき問題を解く&lt;/li&gt;
  &lt;li&gt;1通り終わったら、間違ったところのみを復習する&lt;/li&gt;
  &lt;li&gt;テストが近くなったら、正答率が高かったところを解くことで自信をつける（！重要！）&lt;/li&gt;
  &lt;li&gt;テストが近くなったら、TOEICの傾向を意識的に意識するようにする（！重要！）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;このStepを実施することで、弱点の傾向が炙り出され、またTOEICならではの傾向を掴むことができたと思います。炙り出せたのは以下です。&lt;/p&gt;

&lt;h4 id=&quot;自分の弱点の傾向&quot;&gt;自分の弱点の傾向&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;そもそも品詞が曖昧だった&lt;/li&gt;
  &lt;li&gt;修飾語として何を選べばよいのか曖昧だった&lt;/li&gt;
  &lt;li&gt;文型をほとんど忘れていた&lt;/li&gt;
  &lt;li&gt;長文は行間を推測して解く癖があった&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;toeicの問題の傾向&quot;&gt;TOEICの問題の傾向&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;穴埋めの文章は、そのほとんどがプラスの方向の話である&lt;/li&gt;
  &lt;li&gt;穴埋めの文章は、買収、景気回復、改善などのビジネス的な内容も少なくない&lt;/li&gt;
  &lt;li&gt;分からない単語だとしても「文章を成り立たせる単語を必要とするのか」「文章を詳しくするために修飾する単語を必要とするのか」「選択肢の種類から問題の意図を推測する」「前後の単語の品詞のパターンを確認する」「動詞の変化（三単現、過去、受け身）に注意する」を念頭に察すれば正解できる可能性がそこそこ高い&lt;/li&gt;
  &lt;li&gt;長文は結局最初から最後まで読むことになるので、行間は飛ばさずに読む&lt;/li&gt;
  &lt;li&gt;長文は質問内容が前後する場合があるので本文を読みながら、問題も読みながら解きながら進むと良い&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上を克服し、また気をつけることとして試験に臨みました。&lt;/p&gt;

&lt;h3 id=&quot;結果&quot;&gt;結果&lt;/h3&gt;
&lt;p&gt;880点を取ることができました。前回から95点の成長です。贅沢を言うとあと20点取りたかったのですが、満足の点数を取ることができました。&lt;br /&gt;
問題数を解いたことで「英語を読み事」に慣れることができたせいか、見直しができるくらいのスピードが出せるようになっていたのには自分自身も驚きました。&lt;br /&gt;
おそらく弱点の仮説がいい感じで当たっていて、その対策もある程度のレベルで適切だったのろう、と自画自賛しています。そしてホッとしました。&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;全体を通して感じたことは、傾向と対策をしてそこを克服しなかったら点数を上げることはできなかっただろう、というところです。そしてそれこそが「感覚のみでは正解にたどり着けない壁」と表現することにしました。「TOEICには壁がある」といろいろな記事で書かれている意味を理解できたと思います。合わせて「TOEICができたからといって英語ができる訳ではない」というのもよく目にします。これは自分でも共感する部分もありました。しかし、今回の出来事を通じてその意見も間違ってはないと思いしつつも「点数を取れる裏側には英語の理解度のレベル」があって、点数によってその理解度を保証することはできるのだろう、ということを身をもて感じることができたと思います。TOEICもしかりですが、他の資格試験もそういうことなのだろうな〜、と今更ながら感じることができるようになりました。&lt;br /&gt;
あと、最後に今回勉強したことで英語により興味を持つことができたと思います。その中で見つけた良さげな本を紹介して終わろうと思います。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://books.rakuten.co.jp/rb/3654351/&quot;&gt;英語フレーズ4000&lt;/a&gt;：会話に出てくるちょっとした表現が詰まった本です。留学したときに欲しかったと思いましたw&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://books.rakuten.co.jp/rb/4070188/&quot;&gt;TOEICの問題の傾&lt;/a&gt;：イディオム（「句動詞(phrasal verb)」）が詰まった本です。この形でまとめられている本は初めてで新鮮でした。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;蛇足&quot;&gt;蛇足&lt;/h2&gt;
&lt;p&gt;試験の1-2時間前に「Monster Energy」（エナジードリンク）を飲んでドーピングしました。これが集中力を高めるのに効果があったように思います。&lt;br /&gt;
効果には個人差がありますし、また利尿作用が高いので用法、用量を守って正しくご使用ください😅&lt;/p&gt;</content><category term="English" /><category term="TOEIC" /><summary></summary></entry><entry><title>ブラウザで動く「交通系カードリーダアプリ」を作ってみた。</title><link href="https://ryoyakawai.com/blog/2020/05/06/nfccardreader.html" rel="alternate" type="text/html" title="ブラウザで動く「交通系カードリーダアプリ」を作ってみた。" /><published>2020-05-06T00:00:00+09:00</published><updated>2020-05-06T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2020/05/06/nfccardreader</id><content type="html" xml:base="https://ryoyakawai.com/blog/2020/05/06/nfccardreader.html">&lt;div&gt; &lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://w3c.github.io/web-nfc/&quot;&gt;Web NFC&lt;/a&gt;を調べてて、実はWebUSBで&lt;a href=&quot;https://bit.ly/35wE8nl&quot;&gt;Sony PaSoRi（パソリ） RC-S380&lt;/a&gt;を読む為の&lt;a href=&quot;https://www.sony.co.jp/Products/felica/business/products/ICS-DCWC1.html&quot;&gt;ドライバ&lt;/a&gt;があることを知り、せっかく見つけたし、スマホ版のリーダはあるけど、ブラウザから読み取れるのは出会ったことがないので作り始めました。&lt;br /&gt;
以下がアプリへのリンクですが、動作には「Sony PaSoRi（パソリ） RC-S380」が必須です。このリーダは公的認証にも使えるものなので、もしかすると最近は持ってる人は少なくないかも？とか思ってます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ryoyakawai.com/apps/nfccardreader/&quot;&gt;交通系カードリーダ （ブラウザ版）&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;a href=&quot;//ryoyakawai.com/apps/nfccardreader/&quot; target=&quot;_blank&quot; style=&quot;align-items:center; justify-content:center; display:flex;&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2020/05/20200506-nfccardreader-00.png&quot; width=&quot;48%&quot; style=&quot;border-radius:4px; margin-right:2px&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;仕様に関してはSonyさんが多くを公開してくださっていますし、その他はググる、GitHubのスマホアプリのコードを読んだりすることで何とかなりました。&lt;br /&gt;
利用した資料等は以下です。ありがとうございます！！また参考にさせていただきます🙂&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sony.co.jp/Products/felica/business/tech-support/&quot;&gt;技術情報 - Sony Japan - FeliCa &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/codebutler/farebot&quot;&gt;codebutler/farebot: Read data from public transit cards using your NFC Android phone!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/YasuakiNakazawa/items/3109df682af2a7032f8d&quot;&gt;[PASMO] FeliCa から情報を吸い出してみる - FeliCaの仕様編 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSVエクスポートの機能だったり、他のカード、例えばサンフランシスコ周辺で使わるClipperカードを次に挑戦してみようかなと思ってます。&lt;/p&gt;</content><category term="Web Usb" /><category term="Web" /><summary></summary></entry><entry><title>「自家製チャーシュー ちょっと甘め」のレシピを追加！</title><link href="https://ryoyakawai.com/blog/2019/12/22/roasted-pork.html" rel="alternate" type="text/html" title="「自家製チャーシュー ちょっと甘め」のレシピを追加！" /><published>2019-12-22T00:00:00+09:00</published><updated>2019-12-22T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/12/22/roasted-pork</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/12/22/roasted-pork.html">&lt;div&gt; &lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://cookpad.com/recipe/5959089&quot;&gt;「自家製チャーシュー ちょっと甘め」&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大勝軒の自家製チャーシューの作り方のメモ&lt;a href=&quot;https://cookpad.com/recipe/5211424&quot;&gt;「自家製チャーシューの作り方」&lt;/a&gt;を公開してから1年半くらい。&lt;br /&gt;
美味しいけど、ちょっと醤油辛い、出汁がどうしても余るのが気になってたのを改善してできたメニューです😊&lt;br /&gt;
ちょうどいい出汁の量になって、そのままでも醤油辛くもなく、単独でも美味しく、またご飯の上にのせてチャーシュー丼にしてもいけるチャーシューになりました。
お試しいただけると嬉しいです。つくれぽもおまちしております！&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/12/20191222-roasted-pork-00.jpg&quot; width=&quot;48%&quot; style=&quot;border-radius:4px; margin-right:2px&quot; /&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/12/20191222-roasted-pork-01.jpg&quot; width=&quot;48%&quot; style=&quot;border-radius:4px;&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;自家製チャーシュー-ちょっと甘め&quot;&gt;自家製チャーシュー ちょっと甘め&lt;/h3&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;script src=&quot;https://widgets.cookpad.com/recipes/5959089.js?k=38fc25f2&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/div&gt;</content><category term="Cookpad" /><category term="料理" /><summary></summary></entry><entry><title>Immersive Web Meetupを開催したよ！</title><link href="https://ryoyakawai.com/blog/2019/09/13/immersive-web-meetup.html" rel="alternate" type="text/html" title="Immersive Web Meetupを開催したよ！" /><published>2019-09-13T00:00:00+09:00</published><updated>2019-09-13T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/09/13/immersive-web-meetup</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/09/13/immersive-web-meetup.html">&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;/div&gt;

&lt;p&gt;2019年9月13日（金）にメルカリさんで「Immersive Web Meetup」を開催しました。&lt;br /&gt;
9月16日から1週間の日程でTPAC（W3C年次会議）が福岡であり、せっかくの機会なのでTPACに参加されるついでに東京に立ち寄るW3C関係者の方々をお招きして
コミュニティに向けてお話をしていていただきたい！と想いを込めて企画しました。2015年にTPACが札幌であったときにも&lt;a href=&quot;https://dev.classmethod.jp/event/web-music-developer-meetup-sapporo-report/&quot;&gt;Web Music Developer Meetup@札幌&lt;/a&gt;と題して札幌で開催しています。懐かしいです。&lt;/p&gt;

&lt;h2 id=&quot;展示も行いました&quot;&gt;展示も行いました！&lt;/h2&gt;
&lt;p&gt;映像のXRと音楽のAudio、MIDIという区分で切らず、2つを混ぜ合わせたMeetupにすることで「Immersiveな世界はウェブでも実現できる」をより実感していただくことを意識して展示枠も設けました。そして当日は以下の5つの展示をしていただきました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AR切り絵 - AR Clock Tower, 着せ替え天気予報 by &lt;a href=&quot;https://www.twitter.com/kageori_w&quot; target=&quot;_blank&quot;&gt;@kageori_w&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;webARであそぶ！デジタルファッション by &lt;a href=&quot;https://www.twitter.com/saharu54&quot; target=&quot;_blank&quot;&gt;@saharu54&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Web360Square by &lt;a href=&quot;https://www.twitter.com/AtonKish&quot; target=&quot;_blank&quot;&gt;@AtonKish&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sound Engine for Web Based Novel Game by &lt;a href=&quot;https://www.twitter.com/aike1000&quot; target=&quot;_blank&quot;&gt;@aike1000&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;音に反応して動くMIDIコンバータ by &lt;a href=&quot;https://www.twitter.com/sascacci&quot; target=&quot;_blank&quot;&gt;@sascacci&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Web360Square by &lt;a href=&quot;https://www.twitter.com/AtonKish&quot; target=&quot;_blank&quot;&gt;@AtonKish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Meetupでの展示というのは、個人的には初の試みでしたがやはり対象のAPIが「見て、聞いて」という感じるが主体なこともあり、展示場所周辺は人だかりで盛り上がっていました！&lt;br /&gt;
なのですが、非常に残念ながら写真撮影を失念、、、、という大失態。写真でのご紹介ができなくて非常に残念です・・・ごめんなさい。&lt;/p&gt;

&lt;h2 id=&quot;talk-session&quot;&gt;Talk Session&lt;/h2&gt;
&lt;p&gt;お話をしてくださったのは、&lt;a href=&quot;https://twitter.com/hochsays&quot;&gt;Hongchan Choi&lt;/a&gt;、&lt;a href=&quot;https://twitter.com/cwilso&quot;&gt;Chris Wilson&lt;/a&gt;、それから&lt;a href=&quot;https://twitter.com/Mxcn3&quot;&gt;羽賀 流登&lt;/a&gt;さんの3名です。&lt;/p&gt;

&lt;h3 id=&quot;9-years-of-web-audio---hongchan-choi&quot;&gt;「9 Years of Web Audio」 - Hongchan Choi&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1dlZ3ThCDsYqv6QEuDi07tkK0KC3D3IxfNY4uhHa2KPc/&quot;&gt;（スライドはこちら）&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot; style=&quot;display:flex;flex-direction:row;align-items:flex-start; margin-bottom:0&quot;&gt;
&lt;div&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_01.png&quot; width=&quot;180px&quot; style=&quot;margin-top:10px&quot; /&gt;
&lt;/div&gt;
&lt;div style=&quot;margin-left: 20px; width:80%&quot;&gt;
Web Audioが最初に実装された2010年から今までの経緯、そしてこれから議論が始まる &lt;b&gt;Audio Device Client&lt;/b&gt; の紹介と続きました。  
英語ではありますが、スライドにコメントが完璧に書かれているので、詳細はそちらで！
  
身近で見ていたこともあり、自分自身は、現在に至る歴史、W3Cでのプロセスに関する内容を改めて振り返ると、標準化の難しさ、大変さを改めて感じました。
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;webxr-ar-and-vr-on-the-web---chris-wilson&quot;&gt;「WebXR: AR and VR on the Web」 - Chris Wilson&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1ukRQLp1H_gl7NMB5UZR8JMtH-qlcy37-lyNeXtGjyhE/&quot;&gt;（スライドはこちら）&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot; style=&quot;display:flex;flex-direction:row;align-items:flex-start; margin-bottom:0&quot;&gt;
&lt;div&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_02.png&quot; width=&quot;180px&quot; style=&quot;margin-top:10px&quot; /&gt;
&lt;/div&gt;
&lt;div style=&quot;margin-left: 20px; width:80%&quot;&gt;
WebXRのキーとなるピース、そしてウェブでのVR、ARの状況（実装方法も含む）、そしてW3CのでのVR、ARを扱うImmersive Web WGの状況、
そして最後に音がImmersiveを広める大きなキー技術になる。そしてWeb Audioはすでに3Dオーディオが実装されていて、
WebXRを簡単に実装できるThree.jsやA Frame経由でも利用できることが紹介されました。  
  
3Dオーディオも含めて、Three.jsやA Frame経由で手軽に実装できるという点はサクッと作るときにはホントに便利だと感じます。今後、事例が増えることに期待しています。
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;playcanvasで始めるwebxr---羽賀-流登&quot;&gt;「PlayCanvasで始めるWebXR」 - 羽賀 流登&lt;/h3&gt;
&lt;div class=&quot;post-image-center&quot; style=&quot;display:flex;flex-direction:row;align-items:flex-start; margin-bottom:0&quot;&gt;
&lt;div&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_03.png&quot; width=&quot;180px&quot; style=&quot;margin-top:10px&quot; /&gt;
&lt;/div&gt;
&lt;div style=&quot;margin-left: 20px; width:80%&quot;&gt;
WebXRやるならPlayCanvasががとても良い、というお話。実例、またそのデモも含めた内容でした。  
  
第三者が体験しているVRな世界を、各自がもっている端末のブラウザを通して皆で同時に共有して眺めるシステムが非常に印象的で、ここまでできるのか？！とビックリしました。
&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;おわりに&quot;&gt;おわりに&lt;/h1&gt;
&lt;p&gt;Web Audio、WebXRの両面からのTalk Session、また展示を行うことで「Immersiveな世界はウェブでも実現できる」ことに対して更なる可能性を最も感じていたのは自分自身だったのかもしれません。参加いただいたみなさんも、そうであると嬉しいです。そして自分自身は「ウェブはいい」というのを改めて認識することになりました。&lt;br /&gt;
Meetup全体に関しては、WebXRとWebAudio(Music)が一緒にMeetupを行い、展示枠も設けるという初の試みばかりでどうなるのかという心配はありましたが、結果的には「見て、聞いて、感じてもらう」ことが実現できたと感じていてホッとしております。&lt;br /&gt;
こういったクロス・コミュニティでMeetupを行い、未来を感じる、というのはホントによいですね！！また機会がありましたら検討したいと思っています。&lt;/p&gt;

&lt;p&gt;最後になりましたが、今回会場をご提供いただきましたメルカリさん、そして軽食のスポンサーをしていただきましたGoogleさんには心から感謝申し上げます。ありがとうございました。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot; style=&quot;display:flex;flex-direction:row;align-items:flex-start;margin-bottom:0&quot;&gt;
  &lt;div style=&quot;display:flex;flex-direction:column;align-items:flex-start;width:45%;text-align:center&quot;&gt;
    &lt;div&gt;&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_chris_hongchan.jpg&quot; style=&quot;margin-bottom:0px&quot; /&gt;&lt;/div&gt;
    &lt;div&gt;左2人目から、Hongchan、Chris、えーじさん&lt;/div&gt;
  &lt;/div&gt;
  &lt;div style=&quot;width:45%;margin-left:10px&quot;&gt;
    &lt;div&gt;&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_haga.jpg&quot; style=&quot;margin-bottom:0px&quot; /&gt;&lt;/div&gt;
    &lt;div&gt;羽賀さん&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;post-image-center&quot; style=&quot;display:flex;flex-direction:row;align-items:flex-start;margin-bottom:0&quot;&gt;
  &lt;div style=&quot;display:flex;flex-direction:column;align-items:flex-start;width:45%;text-align:center&quot;&gt;
    &lt;div&gt;&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_ikkou_manpuku.jpg&quot; style=&quot;margin-bottom:0px&quot; /&gt;&lt;/div&gt;
    &lt;div&gt;&lt;a href=&quot;https://www.twitter.com/ikkou&quot; target=&quot;_blank&quot;&gt;WebXRの@ikkouさん&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div style=&quot;float:none;width:45%;margin-left:10px&quot;&gt;
    &lt;div&gt;&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/09/20190913_musubi.jpg&quot; style=&quot;margin-bottom:0px&quot; /&gt;&lt;/div&gt;
    &lt;div style=&quot;margin:auto&quot;&gt;オススメの&lt;a href=&quot;http://www.manpukumusubi.com/&quot; target=&quot;_blank&quot;&gt;「まんぷくにぎり」のおむすび&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;post-image-center&quot; style=&quot;display:flex;flex-direction:row;align-items:flex-start;margin-bottom:0&quot;&gt;
  &lt;div style=&quot;display:flex;flex-direction:column;align-items:flex-start;width:60%;text-align:center&quot;&gt;
  &lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The receptionists at yesterday&amp;#39;s event were famous people &lt;a href=&quot;https://twitter.com/sisidovski?ref_src=twsrc%5Etfw&quot;&gt;@sisidovski&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/kosamari?ref_src=twsrc%5Etfw&quot;&gt;@kosamari&lt;/a&gt; &lt;a href=&quot;https://t.co/AzVL3d6nEL&quot;&gt;pic.twitter.com/AzVL3d6nEL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Eiji Kitamura / えーじ (@agektmr) &lt;a href=&quot;https://twitter.com/agektmr/status/1172862027162800128?ref_src=twsrc%5Etfw&quot;&gt;September 14, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
  &lt;div&gt;豪華受付の方々！ありがとうございました！&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</content><category term="Web Music" /><category term="WebXR" /><category term="Meetup" /><summary></summary></entry><entry><title>パンダエクスプレスのChow Mein（中華風焼きそば）風なレシピを追加！</title><link href="https://ryoyakawai.com/blog/2019/08/04/pandaex-chowmein.html" rel="alternate" type="text/html" title="パンダエクスプレスのChow Mein（中華風焼きそば）風なレシピを追加！" /><published>2019-08-04T00:00:00+09:00</published><updated>2019-08-04T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/08/04/pandaex-chowmein</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/08/04/pandaex-chowmein.html">&lt;div&gt; &lt;/div&gt;

&lt;p&gt;やっと追加のみんな大好きパンダエクスプレスの「&lt;a href=&quot;https://cookpad.com/recipe/5771364&quot;&gt;Chow Mein、やきそば、チョーメン&lt;/a&gt;」！！&lt;br /&gt;
自分で言うのもアレですが、パンダのそれよりも少し上品な味になってるかも😅&lt;br /&gt;
BBQとか定番の「ソース焼きそば」に飽きたら是非！我が家も「焼きそば」は「ソース」だったのが、幅が広がりました！&lt;br /&gt;
（本家パンダエクスプレスの&lt;a href=&quot;https://www.pandaexpress.com/menu/sides/chow-mein&quot;&gt;Chow Meinはこちら&lt;/a&gt;）&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/08/20190804-chowmein_00.jpg&quot; width=&quot;90%&quot; style=&quot;border-radius:4px;&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;焼きそば-chowmein-チョーメン&quot;&gt;焼きそば-ChowMein-チョーメン&lt;/h3&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;script src=&quot;https://widgets.cookpad.com/recipes/5771364.js?k=fcd0a8a9&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/div&gt;</content><category term="Cookpad" /><category term="料理" /><category term="パンダエクスプレス" /><summary></summary></entry><entry><title>AndroidアプリをBitriseでCIする。</title><link href="https://ryoyakawai.com/blog/2019/07/25/ci-android-bitrise-00.html" rel="alternate" type="text/html" title="AndroidアプリをBitriseでCIする。" /><published>2019-07-25T00:00:00+09:00</published><updated>2019-07-25T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/07/25/ci-android-bitrise-00</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/07/25/ci-android-bitrise-00.html">&lt;h2 id=&quot;これは何&quot;&gt;これは何？&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」のCircleCIをBitriseに変更した時のメモです。&lt;br /&gt;
Bitriseの設定のみを書いていこうと思いますので、詳細は「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」を御覧ください。&lt;/p&gt;

&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;
&lt;h3 id=&quot;bitrise&quot;&gt;Bitrise&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://go.bitrise.io/bitrise-japan&quot;&gt;Bitrise&lt;/a&gt;はCircleCIと同じ種類のクラウド型のCIサービスです。
ロンドンと&lt;a href=&quot;https://goo.gl/maps/Yi3Q5G6hDY6qgyAK8&quot;&gt;ブダペスト（ハンガリー）&lt;/a&gt;にオフィスを持っています。シリコンバレーじゃないのが新鮮でした。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;できること&quot;&gt;できること&lt;/h4&gt;
&lt;p&gt;BitriseはiOS、Android、Swift、React Nativeをビルド、テスト、デプロイすることが可能です。本記事では、Androidのビルド、テストをみていきます。&lt;/p&gt;

&lt;h4 id=&quot;価格&quot;&gt;価格&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bitrise.io/pricing/teams&quot;&gt;詳しいテーブルはこちら&lt;/a&gt;です。小さな組織向けとエンタープライズ向けが用意されてます。
小さな組織向けの1部はこんな感です。（2019年7月現在）&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hobby（無料）：複数同時ビルドは不可、ビルド時間は10分、月に200回ビルドまで、使えるのは標準マシーン、追加可能なメンバーは2名&lt;/li&gt;
  &lt;li&gt;Developer（$36/mo）：複数同時ビルドは不可、ビルド時間は45分、ビルド回数は無制限、使えるのは標準マシーン、メンバーの無制限追加可能&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;さっそく使ってみる&quot;&gt;さっそく使ってみる&lt;/h2&gt;
&lt;p&gt;GitHubとBitriseのアカウントが必須ですのでご用意してください。&lt;br /&gt;
この記事では&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/&quot;&gt;このリポジトリのコード&lt;/a&gt;をサンプルとして使いますので、
ForkもしくはCloneしてリポジトリに追加しておいてください。&lt;br /&gt;
それでは追加していきます。&lt;/p&gt;

&lt;h3 id=&quot;アプリを追加する&quot;&gt;アプリを追加する&lt;/h3&gt;
&lt;p&gt;下右図のように、ターゲットになるリポジトリを指定してアプリを追加します。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_00.png&quot; width=&quot;48%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee; margin-right: 5px&quot; /&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_01.png&quot; width=&quot;48%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;workflowの設定画面を表示する&quot;&gt;Workflowの設定画面を表示する&lt;/h3&gt;
&lt;p&gt;アプリの追加が完了すると同時にビルドを走らせてくれます。&lt;br /&gt;
が、取り急ぎWorkflowの設定画面を開いてしまいます。プロジェクト名をクリック（下図(1)）して
次にWorkflowのタブをクリック（下図(2)）して表示します。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_workflow00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;タスクを追加する&quot;&gt;タスクを追加する&lt;/h3&gt;
&lt;p&gt;アプリを追加した状態ではUIテストは追加されませんので、UIテストされるように設定する必要があります。
追加するタスクは以下の2つです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gradle Runner&lt;/li&gt;
  &lt;li&gt;[BETA] Virtual Device Testing for Android&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;赤四角の中の2つを追加する。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190725_bitrise_addtask00.png&quot; width=&quot;30%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;-gradle-runnerの追加&quot;&gt;＞ Gradle Runnerの追加&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Android Unit Test&lt;/strong&gt; のアイコンの直下にある「＋」ボタン（下図（1））をクリックして、「Gradle Runner」で検索すると絞込まれて表示されますので
クリックして追加します。（下図(2)）&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_gradlerunner00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;追加すると設定画面が表示されますので以下の2つの四角を変更します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gradle task to run&lt;/strong&gt; ： &lt;code class=&quot;highlighter-rouge&quot;&gt;assembleDebug assembleDebugAndroidTest&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;gradlew file path&lt;/strong&gt; ： &lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_gradlerunner01.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;-beta-virtual-device-testing-for-androidの追加&quot;&gt;＞ [BETA] Virtual Device Testing for Androidの追加&lt;/h4&gt;
&lt;p&gt;先程追加した&lt;strong&gt;Gradle Runner&lt;/strong&gt; の次に追加しますので、直下にある「＋」ボタン（下図（1））をクリックして、「[BETA] Virtual」で検索します。すると絞込まれて表示されますので
クリックして追加します。（下図(2)）&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_virtualdevice00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;追加すると設定画面が表示されますので以下の2つの四角を変更します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Test devices&lt;/strong&gt; ： &lt;code class=&quot;highlighter-rouge&quot;&gt;Pixel2,28,en,portrait&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test type&lt;/strong&gt; ： &lt;code class=&quot;highlighter-rouge&quot;&gt;instrumentation&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_virtualdevice01.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;なお、&lt;strong&gt;Test devices&lt;/strong&gt; はサンプルアプリに &lt;code class=&quot;highlighter-rouge&quot;&gt;minSdkVersion 26&lt;/code&gt; と指定しているので26以上に設定しています。&lt;br /&gt;
また、先程変更した &lt;strong&gt;Gradle Runner&lt;/strong&gt; の &lt;strong&gt;Gradle task to run&lt;/strong&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;assembleDebug assembleDebugAndroidTest&lt;/code&gt; がデフォルトの &lt;code class=&quot;highlighter-rouge&quot;&gt;assemble&lt;/code&gt; のままになっていると
テスト用のAPK(&lt;code class=&quot;highlighter-rouge&quot;&gt;app-debug-androidTest.apk&lt;/code&gt;)が作成されず、&lt;strong&gt;API path&lt;/strong&gt; で使う環境変数の &lt;strong&gt;$BITRISE_APK_PATH&lt;/strong&gt; に &lt;code class=&quot;highlighter-rouge&quot;&gt;app-release-unsigned.apk&lt;/code&gt;等に指定あれてしまい
&lt;strong&gt;[BETA] Virtual Device Testing for Android&lt;/strong&gt; が動作できずエラーになりますので、確実に変更するようにしてください。&lt;/p&gt;

&lt;p&gt;ちなみに、この &lt;strong&gt;[BETA] Virtual Device Testing for Android&lt;/strong&gt; は「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/16/ci-android-firebase-00.html&quot;&gt;Firebase Test LabでUI Testを実行する&lt;/a&gt;」
でも紹介しているのと同じくGCPコマンドから &lt;a href=&quot;https://console.cloud.google.com/marketplace/details/google/testing.googleapis.com&quot;&gt;Cloud Testing API(Firebase Test Lab)&lt;/a&gt; をラップして使っているようです。&lt;/p&gt;

&lt;h3 id=&quot;実行する&quot;&gt;実行する&lt;/h3&gt;
&lt;p&gt;以上でUI Testまで実行できるようになったはずなので画面内にある &lt;strong&gt;[Start/Schedule a Build]&lt;/strong&gt; ボタンをクリックしてビルドを実行します。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190726_bitrise_start_button00.png&quot; width=&quot;30%&quot; style=&quot;border-radius:4px; border:1px solid #eeeeee;&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;ガガっとリポジトリを読んで、設定作ってくれるところは楽チンでよかったですが、
&lt;strong&gt;Gradle Runner&lt;/strong&gt; の &lt;strong&gt;Gradle task to run&lt;/strong&gt;  環境変数 &lt;strong&gt;$BITRISE_APK_PATH&lt;/strong&gt; の設定で
ハマりました。Firebase Test Labからのエラーメッセージ見られると良いかもな〜、と感じています。&lt;/p&gt;

&lt;h4 id=&quot;今回のbitriseyml&quot;&gt;今回の&lt;code class=&quot;highlighter-rouge&quot;&gt;bitrise.yml&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;今回できあがった &lt;code class=&quot;highlighter-rouge&quot;&gt;bitrise.yml&lt;/code&gt; もココに貼っておきます。参考になれば幸いです。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;format_version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;default_step_lib_source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/bitrise-io/bitrise-steplib.git&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;project_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;trigger_map&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;push_branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;primary&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pull_request_source_branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;primary&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;workflows&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;activate-ssh-key@4.0.3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git-clone@4.0.14&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cache-pull@2.0.1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;script@1.1.5&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Do anything with Script step&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;install-missing-android-tools@2.3.5&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gradlew_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION/gradlew&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;change-android-versioncode-and-versionname@1.1.1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;build_gradle_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION/$MODULE/build.gradle&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android-lint@0.9.6&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;project_location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$MODULE&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$VARIANT&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android-unit-test@0.11.1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;project_location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$MODULE&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$VARIANT&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android-build@0.10.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;project_location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$MODULE&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$VARIANT&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sign-apk@1.3.1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy-to-bitrise-io@1.6.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cache-push@2.2.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;activate-ssh-key@4.0.3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git-clone@4.0.14&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cache-pull@2.0.1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;script@1.1.5&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Do anything with Script step&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;install-missing-android-tools@2.3.5&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gradlew_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION/gradlew&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android-lint@0.9.6&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;project_location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$MODULE&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$VARIANT&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android-unit-test@0.11.1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;project_location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$PROJECT_LOCATION&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$MODULE&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$VARIANT&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gradle-runner@1.9.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gradlew_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./gradlew&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gradle_task&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;assembleDebug assembleDebugAndroidTest&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;virtual-device-testing-for-android@1.0.5&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;instrumentation&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test_devices&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pixel2,28,en,portrait&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy-to-bitrise-io@1.6.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cache-push@2.2.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;envs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;is_expand&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;PROJECT_LOCATION&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;is_expand&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;MODULE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;is_expand&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;VARIANT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><category term="Android" /><category term="Espresso" /><category term="Bitrise" /><category term="Firebase Test Lab" /><summary>これは何？
「AndroidアプリをCircleCIでCIする。」のCircleCIをBitriseに変更した時のメモです。
Bitriseの設定のみを書いていこうと思いますので、詳細は「AndroidアプリをCircleCIでCIする。」を御覧ください。</summary></entry><entry><title>Espresso, UI AutomatorでAndroidのUI Testを書く</title><link href="https://ryoyakawai.com/blog/2019/07/18/ci-android-espresso-00.html" rel="alternate" type="text/html" title="Espresso, UI AutomatorでAndroidのUI Testを書く" /><published>2019-07-18T00:00:00+09:00</published><updated>2019-07-18T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/07/18/ci-android-espresso-00</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/07/18/ci-android-espresso-00.html">&lt;h2 id=&quot;これは何&quot;&gt;これは何？&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」のUI Testの書き方について説明した記事です。
具体的には&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android&quot;&gt;サンプルアプリ&lt;/a&gt;の&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/MainActivityInstrumentedTest.kt&quot;&gt;UI Testであるこれ&lt;/a&gt;の説明です。&lt;/p&gt;

&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;
&lt;h3 id=&quot;androidでui-testを書く&quot;&gt;AndroidでUI Testを書く&lt;/h3&gt;
&lt;p&gt;Androidが公式にサポートしているUI Testのツールは &lt;a href=&quot;https://developer.android.com/training/testing/espresso&quot;&gt;Espresso&lt;/a&gt;、
&lt;a href=&quot;https://developer.android.com/training/testing/ui-automator&quot;&gt;UI Automator&lt;/a&gt; の2種類あります。
それぞれ以下の特徴がありますので「どちらを使うか？」については「どちらも併用して使う」のがいいように感じています。&lt;/p&gt;

&lt;h4 id=&quot;espresso&quot;&gt;Espresso&lt;/h4&gt;
&lt;p&gt;「to write concise, beautiful, and reliable Android UI tests」と公式サイトには説明されています。特定のアプリのUIに対してのスクリプトで動作をさせることを可能にするテストフレームワークです。単一のアプリの操作を自動化する場合に使うとよいでしょう。Google社が開発していますので、Anroidの公式のテストツールと言ってよいでしょう。&lt;br /&gt;
サンプルアプリではアプリの操作のすべてをEspressoで書いています。&lt;/p&gt;

&lt;h4 id=&quot;ui-automator&quot;&gt;UI Automator&lt;/h4&gt;
&lt;p&gt;「suitable for cross-app functional UI testing across system and installed apps.」と公式サイトに説明されている通りで、Espressoと比べると、よりAndroidのOSに近い側に位置しているテストフレームワークで、複数アプリを行き来するよう動作をスクリプトで定義することの可能です。Espressoとは違い、複数のアプリの操作を自動化する場合に使うとよいでしょう。こちらもEspressoと同じくGoogle社が開発していますので、Anroidの公式のテストツールと言ってよいでしょう。&lt;br /&gt;
サンプルアプリではスクリーンショットの撮影、Permissionリクエストのウィンドウの操作の2つをUI Automatorで書いています。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-uitesttool_00.png&quot; width=&quot;50%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;espressoui-automatorでtestを書く準備をする&quot;&gt;Espresso、UI AutomatorでTestを書く準備をする&lt;/h3&gt;
&lt;p&gt;以下の2つのファイルに追加して準備完了です。&lt;/p&gt;

&lt;h4 id=&quot;-buildgradle-に以下を追加&quot;&gt;＞ &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; に以下を追加&lt;/h4&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;allprojects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matching&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testLogging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;passed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;skipped&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;-appbuildgradle-に以下を追加&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;＞ app/build.gradle&lt;/code&gt; に以下を追加&lt;/h4&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// for connected Android test
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;androidTestUtil&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orchestrator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;androidTestImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;androidTestImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;espresso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;espresso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;androidTestImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;espresso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;espresso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;androidTestImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiautomator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiautomator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;androidTestImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;androidTestImplementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4.12&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;テストを書く&quot;&gt;テストを書く&lt;/h3&gt;
&lt;p&gt;テストは&lt;code class=&quot;highlighter-rouge&quot;&gt;app/src/androidTest/[Package名]&lt;/code&gt;以下に書いていきます。&lt;br /&gt;
今回のパッケージ名は &lt;code class=&quot;highlighter-rouge&quot;&gt;com.example.uitestsample&lt;/code&gt; 
ですので &lt;a href=&quot;app/src/androidTest/java/com/example/uitestsample/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/src/androidTest/java/com/example/uitestsample/&lt;/code&gt;&lt;/a&gt;
以下にコードを書いていきます。&lt;br /&gt;
ファイル作成の粒度はActivity毎、Fragment毎、機能毎等、自由にまとめてしまって問題ありません。
サンプルアプリではActivity毎でまとめて&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/MainActivityInstrumentedTest.kt&quot;&gt;MainActivityInstrumentedTest.kt&lt;/a&gt;に書いています。&lt;/p&gt;

&lt;h4 id=&quot;前準備&quot;&gt;前準備&lt;/h4&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidJUnit4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;@SdkSuppress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;@LargeTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivityInstrumentedTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;_packageName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.example.uitestsample&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UiTestUtils&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UiTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ^^^ ツールをインスタンス化 ^^^
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;@Rule&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;@JvmField&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mActivityTestRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActivityTestRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ActivityTestRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Rule&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;@JvmField&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;cGrantPermissionRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GrantPermissionRule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GrantPermissionRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Manifest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WRITE_EXTERNAL_STORAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ^^^ スクリーンショット保存の為にSTORAGEへのアクセスを強制的に許可 ^^^
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;@Rule&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;@JvmField&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;screenshotRule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScreenshotTakingRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ^^^ Test失敗時をスクリーンショットを撮影するように指定 ^^^
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mActivityTestRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@After&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;teardown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;「Test失敗時をスクリーンショット」の動作は &lt;code class=&quot;highlighter-rouge&quot;&gt;uitestutils/UiTestUtils.kt&lt;/code&gt; の最後に定義されています。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ScreenshotTakingRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UiTestUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestWatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mUTs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenShot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FAIL-$description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt; !!! TEST FAILED !!! &amp;lt;&amp;lt;&amp;lt; ScreenShot Taken method=[$description] filename=[$path]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;テストケース&quot;&gt;テストケース&lt;/h4&gt;
&lt;p&gt;サンプルアプリではテストケースは以下の3つです。
「ケースとして足りない！」とかツッコミはありかもしれませんが、UI Testを動かすことを目的としていますのでご容赦ください。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;useAppContext()&lt;/code&gt;：テストしているアプリのパッケージ名を確認&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;checkTextHelloWorld()&lt;/code&gt;：アプリ起動時、中心の「Hello World!」の表示を確認&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;checkButtonIncrementFloating()&lt;/code&gt;：画面右下のボタンをタップすると表示している数字がカウントアップしSnackbarが表示され、またメニューからResetするとゼロになることを確認&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;checkButtonIncrementFloating()&lt;/code&gt; のポイントをインラインで説明します。&lt;br /&gt;
&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/MainActivityInstrumentedTest.kt&quot;&gt;Testのコード全体はこちら&lt;/a&gt;になりますので合わせて御覧ください。&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkButtonIncrementFloating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// false にすることでTestが成功した場合でもスクリーンショットを残せます。
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// デフォルトでは、Testが成功するとスクリーンショットは全削除となります。
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepareScreenShot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;willTap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 右下の赤色のFabを指定
&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;incrementButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment_fab_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// カウンターを増加させて表示が想定通りであるか確認する
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;willTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// スクリーンショットを撮影
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenShot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BEFORE &amp;gt;&amp;gt;&amp;gt; カウンター：インクリメント IDX=[$i]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 指定した赤色のFabをタップ
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;onView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incrementButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Permissionリクエストが出てたら許可（このテスト中は出ないはず）
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowPermissionsIfNeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// スクリーンショットを撮影
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenShot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AFTER &amp;gt;&amp;gt;&amp;gt; カウンター：インクリメント IDX=[$i]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 要素内の文字列を取得
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;actualCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main_content_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ログを残す
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[Counter SEQ] 🍏🍎 expected=[$i] actual=[$actualCount]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 文字列をAssert
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[Counter SEQ] 🍏🍎&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Snackbarの文言チェック
&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;snackBarTapped&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snackbar_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tapped $i times.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Snackbarがから消えるのを待つ
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;waitForSnackbarDisappear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snackBarTapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Sleepする
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SHR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// this.mUTs.prepareScreenShot() に false をセットしていなければ
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// スクリーンショットを削除する（）
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUTs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removeSuccessScreenShots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;idが指定されていないエレメントの指定方法&quot;&gt;IDが指定されていないエレメントの指定方法&lt;/h3&gt;
&lt;p&gt;エレメントに対してIDが振られている場合は大抵の場合そのIDを使うことで指定することが可能ですが、
指定されていない場合は &lt;strong&gt;Layout Inspector&lt;/strong&gt; （&lt;a href=&quot;https://developer.android.com/studio/debug/layout-inspector&quot;&gt;公式ドキュメント&lt;/a&gt;）で階層構造を取得
して解析をしてから、以下のように指定を行います。&lt;/p&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190718-layoutinspector-00.png&quot; width=&quot;90%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Fragmentの重なり方が操作によって変化する場合があり、表示は同じでも階層が違う場合が多々発生します。
ですので、Layout Inspectorで階層構造を取得するときはUI Testでのシナリオ通りに一度画面を遷移させて、それから取得すると良いでしょう。&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;iOS標準のUI Testツールである&lt;a href=&quot;https://developer.apple.com/documentation/xctest&quot;&gt;XCTest&lt;/a&gt;に比べると
癖が少し強いです。とっつきにくいところもありますが、そこまで難しくはないので気になっている場合は挑戦してみてください。&lt;br /&gt;
自分の作ったアプリが自動で動くのを見るのも楽しいと思います。&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/testing/espresso&quot;&gt;Espresso -  Android Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/testing/ui-automator&quot;&gt;UI Automator - Android Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Android" /><category term="UI Test" /><category term="Espresso" /><category term="UI Automator" /><summary>これは何？
「AndroidアプリをCircleCIでCIする。」のUI Testの書き方について説明した記事です。
具体的にはサンプルアプリのUI Testであるこれの説明です。</summary></entry><entry><title>Firebase Test LabでUI Testを実行する</title><link href="https://ryoyakawai.com/blog/2019/07/16/ci-android-firebase-00.html" rel="alternate" type="text/html" title="Firebase Test LabでUI Testを実行する" /><published>2019-07-16T00:00:00+09:00</published><updated>2019-07-16T00:00:00+09:00</updated><id>https://ryoyakawai.com/blog/2019/07/16/ci-android-firebase-00</id><content type="html" xml:base="https://ryoyakawai.com/blog/2019/07/16/ci-android-firebase-00.html">&lt;h2 id=&quot;これは何&quot;&gt;これは何？&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」のUI TestをCircleCIから実行する方法について説明した記事です。
&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android&quot;&gt;サンプルアプリ&lt;/a&gt;のUI Testを走らせるFirebase Test Lab（UI Testを実行するインフラ）について解説していきます。&lt;/p&gt;

&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;
&lt;h3 id=&quot;ciの流れでui-testが実行されている箇所&quot;&gt;Ciの流れでUI Testが実行されている箇所&lt;/h3&gt;
&lt;p&gt;「&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html&quot;&gt;AndroidアプリをCircleCIでCIする。&lt;/a&gt;」のCIの流れでは &lt;strong&gt;(3) UI Test&lt;/strong&gt; でUI Testを実行、
&lt;strong&gt;(4) Report&lt;/strong&gt; でレポートアップロードしています。&lt;/p&gt;
&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190703-circleci_firebase_00.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;ここで使うコードは以下の通りです。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/tree/master/app/src/test/java/com/example/uitestsample&quot;&gt;サンプルアプリのリポジトリ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;UI Testのスクリプト：&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/MainActivityInstrumentedTest.kt&quot;&gt;MainActivityInstrumentedTest.kt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ポイント条件など&quot;&gt;ポイント、条件など&lt;/h3&gt;
&lt;p&gt;CIで使うCircleCIは2.0からAndroidのエミュレータを動かすことができなくなったことから、
CircleCI単体でのUI Testの実行が不可能になりました。（&lt;a href=&quot;https://support.circleci.com/hc/en-us/articles/360000028928-Testing-with-Android-emulator-on-CircleCI-2-0&quot;&gt;公式ドキュメント&lt;/a&gt;）
ですので、UI Testを含めるとすると、AndroidアプリのCIは外部サービスを利用することが必須となっています。&lt;/p&gt;

&lt;p&gt;今回は&lt;a href=&quot;https://support.circleci.com/hc/en-us/articles/360000028928-Testing-with-Android-emulator-on-CircleCI-2-0&quot;&gt;公式ドキュメント&lt;/a&gt;にオススメされている
Firebase Test Labを使うことにしました。&lt;/p&gt;

&lt;h3 id=&quot;firebase-test-labとは&quot;&gt;Firebase Test Labとは&lt;/h3&gt;
&lt;p&gt;Firebase Test LabはFirebaseがのサービスの1つとして提供しているクラウドでUI Testを行うプラットフォームです。Android(Espresso、UI Automator)、iOS(XCTest)で書かれたテストの実行に対応しています。&lt;/p&gt;

&lt;p&gt;（詳しくは「AndroidアプリをCircleCIでCIする。」の&lt;a href=&quot;https://ryoyakawai.com/blog/2019/07/03/ci-android-00.html#aboutfirebasetestlab&quot;&gt;Firebase Test Labとは&lt;/a&gt;を御覧ください。）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://firebase.google.com/docs/test-lab&quot;&gt;公式ドキュメントはこちら&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;それではアカウント等の準備を説明します。&lt;/p&gt;

&lt;h4 id=&quot;料金体系2019年7月現在&quot;&gt;料金体系（2019年7月現在）&lt;/h4&gt;
&lt;p&gt;料金は無料枠が、物理デバイスでのテスト実行5回まで、Virtual（仮想）デバイスでのテスト実行10回まで。&lt;br /&gt;
無料枠を超えると、物理デバイス1台1時間$5、Virtual（仮想）デバイス1台1時間$1となります。
また、テスト実行時間の上限もあり、物理デバイスが30分、Virtual（仮想）デバイスが60分と決められていますので、
Firebase Test Labでテストを実行する場合はそこに収まるようにテストケースを考えましょう。&lt;br /&gt;
この時間はデフォルトでは物理デバイスもVirtual（仮想）デバイスも同じく15分で設定されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://firebase.google.com/pricing&quot;&gt;詳細はここのTest Lab&lt;/a&gt;の項目を御覧ください。&lt;/p&gt;

&lt;h4 id=&quot;-firebaseのアカウントの準備&quot;&gt;＞ Firebaseのアカウントの準備&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://console.firebase.google.com&quot;&gt;console.firebase.google.com&lt;/a&gt;からアカウントを作成します。&lt;/p&gt;

&lt;h3 id=&quot;-gcpのアカウントとプロジェクトを準備&quot;&gt;＞ GCPのアカウントとプロジェクトを準備&lt;/h3&gt;
&lt;p&gt;Circle CIからは gcloud コマンドを使って Firebase Test Lab 実行するので、GCPのアカウントも必須となります。
またプロジェクトの必要となりますので作成していきます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.cloud.google.com&quot;&gt;console.firebase.google.com&lt;/a&gt; からGCPのアカウントを作成&lt;/li&gt;
  &lt;li&gt;GCPの &lt;a href=&quot;https://console.cloud.google.com/projectcreate&quot;&gt;新規プロジェクトを作成する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;引き続きGCPで &lt;a href=&quot;https://console.cloud.google.com/marketplace/details/google/testing.googleapis.com&quot;&gt;Cloud Testing API&lt;/a&gt;と&lt;a href=&quot;https://console.cloud.google.com/marketplace/details/google/toolresults.googleapis.com&quot;&gt;Cloud Tool Results API&lt;/a&gt; を有効にする（下図左：画面上部でプロジェクトの選択を忘れずに！）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.cloud.google.com&quot;&gt;console.firebase.google.com&lt;/a&gt; に戻りGCPのプロジェクトとリンクする。画像内の(1)からプロジェクトを選択する。（下図右）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190717-gcp-activateapi-00.png&quot; width=&quot;47%&quot; style=&quot;margin-right:15px;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190717-firebase-linkproject-00.png&quot; width=&quot;47%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;続いて、gcloud コマンドは&lt;a href=&quot;https://cloud.google.com/sdk/downloads&quot;&gt;この公式ドキュメント&lt;/a&gt;の通りインストールを行ってください。&lt;br /&gt;
最後にAndroidのBuild環境をセットアップしてください。&lt;a href=&quot;https://developer.android.com/studio/install&quot;&gt;Android Studioをインストール&lt;/a&gt;するのがよいと思います。&lt;/p&gt;

&lt;h3 id=&quot;-コマンドから動かしてみる&quot;&gt;＞ コマンドから動かしてみる&lt;/h3&gt;

&lt;p&gt;まずは、ターゲットのプロジェクトを指定を行います。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# コマンドラインでGCPにログイン&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud auth&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 設定可能なプロジェクトをリストする&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud projects list&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
PROJECT_ID                 NAME                   PROJECT_NUMBER
my-test-project-00-2xxxx5  My-Test-Project-00     6xxxx4xxxxx6

&lt;span class=&quot;c&quot;&gt;# 「my-test-project-00-24690」をプロジェクトとして指定する&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;project my-test-project-00-2xxxx5&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 設定内容を確認する(account, projectが指定した内容であるか確認)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud config list&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;compute]
region &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; us-central1
zone &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; us-central1-c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;core]
account &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; xxxxx.xxxx.xxxx.xxxx@example.com
disable_usage_reporting &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; True
project &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; my-test-project-00-2xxxx5

Your active configuration is: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;default]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;-ローカルで動作させてみる&quot;&gt;＞ ローカルで動作させてみる&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# コードをCloneする&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/ryoyakawai/uitest_sample_android.git&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;uitest_sample_android/&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Emulatorが動作していない場合エラーとなりますが、以下の2つが生成されていればOKです。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - app/build/outputs/apk/debug/app-debug.apk&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./gradlew connectedAndroidTest&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 環境変数を指定する&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ GOOGLE_PROJECT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-test-project-00-2xxxx5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ BK_OBJ_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOOGLE_PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/uitest-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s2&quot;&gt;&quot;+%Y%m%d_%H%M&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# コマンドを改行するときは末尾のスペースを忘れずに入れてください。&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud firebase &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;android run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt; instrumentation &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--app&lt;/span&gt; ./app/build/outputs/apk/debug/app-debug.apk &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt; ./app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--test-targets&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;class com.example.uitestsample.MainActivityInstrumentedTest&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--results-dir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BK_OBJ_NAME&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--results-bucket&lt;/span&gt; cloud-test-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOOGLE_PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--directories-to-pull&lt;/span&gt; /sdcard/uitest/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--device&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Pixel2,version&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;26,locale&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_US,orientation&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;portrait &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--use-orchestrator&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--timeout&lt;/span&gt; 120s&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 無事に開始されると以下が出力さる&lt;/span&gt;
Have questions, feedback, or issues? Get support by visiting:
  https://firebase.google.com/support/

Uploading &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;./app/build/outputs/apk/debug/app-debug.apk] to Firebase Test Lab...
Uploading &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;./app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk] to Firebase Test Lab...
Raw results will be stored &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;your GCS bucket at &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.developers.google.com/storage/browser/cloud-test-my-test-project-00-2xxxx5/my-test-project-00-2xxxx5/uitest-20190716_1603/]

Test &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;matrix-1gpbgxrsx8fag] has been created &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the Google Cloud.
Firebase Test Lab will execute your instrumentation &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;on 1 device&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Creating individual &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;executions...done.

Test results will be streamed to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.firebase.google.com/project/my-test-project-00-2xxxx5/testlab/histories/bh.xxxxxxxxxxxx/matrices/8xxxxxxxxxxxx11].
16:17:55 Test is Pending
16:18:23 Starting attempt 1.
16:18:23 Test is Running
16:19:17 Started logcat recording.
16:19:17 Preparing device.
16:19:52 Logging &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;to Google account on device.
16:19:52 Installing apps.
16:20:06 Retrieving Pre-Test Package Stats information from the device.
16:20:06 Retrieving Performance Environment information from the device.
16:20:06 Started crash detection.
16:20:06 Started crash monitoring.
16:20:06 Started performance monitoring.
16:20:19 Started video recording.
16:20:19 Starting instrumentation test.
16:20:53 Completed instrumentation test.
16:21:07 Stopped performance monitoring.
16:21:14 Stopped crash monitoring.
16:21:14 Stopped logcat recording.
16:21:14 Retrieving Post-test Package Stats information from the device.
16:21:14 Logging out of Google account on device.
16:21:21 Done. Test &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 36 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;secs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
16:21:21 Starting results processing. Attempt: 1
16:21:28 Completed results processing. Time taken &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;secs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
16:21:28 Test is Finished

Instrumentation testing complete.

More details are available at &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.firebase.google.com/project/my-test-project-00-2xxxx5/testlab/histories/bh.xxxxxxxxxxxx/matrices/8xxxxxxxxxxxx11].
┌─────────┬──────────────────────────┬─────────────────────┐
│ OUTCOME │     TEST_AXIS_VALUE      │     TEST_DETAILS    │
├─────────┼──────────────────────────┼─────────────────────┤
│ Passed  │ Pixel2-26-en_US-portrait │ 3 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;cases passed │
└─────────┴──────────────────────────┴─────────────────────┘

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コマンドに出力されるFirebaseのURLにアクセスすると結果が見られます。以下の1行のように表示されているはずで、ブラウザからアクセスすると下図が表示されます。&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Test results will be streamed to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://console.firebase.google.com/project/my-test-project-00-2xxxx5/testlab/histories/bh.xxxxxxxxxxxx/matrices/8xxxxxxxxxxxx11]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;post-image-center&quot;&gt;
&lt;img src=&quot;https://ryoyakawai.com/blog/images/2019/07/20190717-firebase-result-00.png&quot; width=&quot;80%&quot; style=&quot;border-radius:4px;border:1px solid #eeeeee&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;静止画、動画を一覧で表示することができるので、テストで何がされていたかも後から確認することが可能です。
ちなみに、デフォルトで動画は撮影してくれる設定になっていますが、静止画に関しては自前で撮影する処理を書き、タイミングを決めてテストスクリプトに埋め込む必要があります。
テスト失敗時の静止画も自前で設定する必要がありますが、今回の&lt;a href=&quot;https://github.com/ryoyakawai/uitest_sample_android/blob/master/app/src/androidTest/java/com/example/uitestsample/uitestutils/UiTestUtils.kt&quot;&gt;サンプルアプリのUiTestUtils&lt;/a&gt;に含んでいますので試してみたい場合は利用してみてください。&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;CIの流れの中ではもちろん、また「日々の開発と並行してテストしたい場合にローカルで環境を用意する」ことはコスト的に厳しかったり、
「他端末の実デバイスを使ってまずはテストを動かしてみたい」というのも同じくコスト的に厳しいことが少なくないと思います。
全ては無理かもしれませんが、そんなときに心配の塊の1部だけでも取り除くべきFirebase Test Labを使う、というのもとても有効だと思います。&lt;br /&gt;
気になっている方は使ってみてはいかがでしょうか？&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://firebase.google.com/docs/test-lab/android/command-line&quot;&gt;Get started with Firebase Test Lab from the gcloud Command Line&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/sdk/gcloud/reference/firebase/test/android/run&quot;&gt;gcloud firebase test android run(Cloud SDK:Google Cloud)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Android" /><category term="Firebase Test Lab" /><category term="UI Test" /><summary>これは何？
「AndroidアプリをCircleCIでCIする。」のUI TestをCircleCIから実行する方法について説明した記事です。
サンプルアプリのUI Testを走らせるFirebase Test Lab（UI Testを実行するインフラ）について解説していきます。</summary></entry></feed>
